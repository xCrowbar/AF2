{"ast":null,"code":"import { BufferAttribute, BufferGeometry, FileLoader, Float32BufferAttribute, Loader, LoaderUtils, Vector3 } from '../../../build/three.module.js';\n/**\n * Description: A THREE loader for STL ASCII files, as created by Solidworks and other CAD programs.\n *\n * Supports both binary and ASCII encoded files, with automatic detection of type.\n *\n * The loader returns a non-indexed buffer geometry.\n *\n * Limitations:\n *  Binary decoding supports \"Magics\" color format (http://en.wikipedia.org/wiki/STL_(file_format)#Color_in_binary_STL).\n *  There is perhaps some question as to how valid it is to always assume little-endian-ness.\n *  ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *  var loader = new STLLoader();\n *  loader.load( './models/stl/slotted_disk.stl', function ( geometry ) {\n *    scene.add( new THREE.Mesh( geometry ) );\n *  });\n *\n * For binary STLs geometry might contain colors for vertices. To use it:\n *  // use the same code to load STL as above\n *  if (geometry.hasColors) {\n *    material = new THREE.MeshPhongMaterial({ opacity: geometry.alpha, vertexColors: true });\n *  } else { .... }\n *  var mesh = new THREE.Mesh( geometry, material );\n *\n * For ASCII STLs containing multiple solids, each solid is assigned to a different group.\n * Groups can be used to assign a different color by defining an array of materials with the same length of\n * geometry.groups and passing it to the Mesh constructor:\n *\n * var mesh = new THREE.Mesh( geometry, material );\n *\n * For example:\n *\n *  var materials = [];\n *  var nGeometryGroups = geometry.groups.length;\n *\n *  var colorMap = ...; // Some logic to index colors.\n *\n *  for (var i = 0; i < nGeometryGroups; i++) {\n *\n *\t\tvar material = new THREE.MeshPhongMaterial({\n *\t\t\tcolor: colorMap[i],\n *\t\t\twireframe: false\n *\t\t});\n *\n *  }\n *\n *  materials.push(material);\n *  var mesh = new THREE.Mesh(geometry, materials);\n */\n\nvar STLLoader = function (manager) {\n  Loader.call(this, manager);\n};\n\nSTLLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: STLLoader,\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  parse: function (data) {\n    function isBinary(data) {\n      var expect, face_size, n_faces, reader;\n      reader = new DataView(data);\n      face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n      n_faces = reader.getUint32(80, true);\n      expect = 80 + 32 / 8 + n_faces * face_size;\n\n      if (expect === reader.byteLength) {\n        return true;\n      } // An ASCII STL data must begin with 'solid ' as the first six bytes.\n      // However, ASCII STLs lacking the SPACE after the 'd' are known to be\n      // plentiful.  So, check the first 5 bytes for 'solid'.\n      // Several encodings, such as UTF-8, precede the text with up to 5 bytes:\n      // https://en.wikipedia.org/wiki/Byte_order_mark#Byte_order_marks_by_encoding\n      // Search for \"solid\" to start anywhere after those prefixes.\n      // US-ASCII ordinal values for 's', 'o', 'l', 'i', 'd'\n\n\n      var solid = [115, 111, 108, 105, 100];\n\n      for (var off = 0; off < 5; off++) {\n        // If \"solid\" text is matched to the current offset, declare it to be an ASCII STL.\n        if (matchDataViewAt(solid, reader, off)) return false;\n      } // Couldn't find \"solid\" text at the beginning; it is binary STL.\n\n\n      return true;\n    }\n\n    function matchDataViewAt(query, reader, offset) {\n      // Check if each byte in query matches the corresponding byte from the current offset\n      for (var i = 0, il = query.length; i < il; i++) {\n        if (query[i] !== reader.getUint8(offset + i, false)) return false;\n      }\n\n      return true;\n    }\n\n    function parseBinary(data) {\n      var reader = new DataView(data);\n      var faces = reader.getUint32(80, true);\n      var r,\n          g,\n          b,\n          hasColors = false,\n          colors;\n      var defaultR, defaultG, defaultB, alpha; // process STL header\n      // check for default color in header (\"COLOR=rgba\" sequence).\n\n      for (var index = 0; index < 80 - 10; index++) {\n        if (reader.getUint32(index, false) == 0x434F4C4F\n        /*COLO*/\n        && reader.getUint8(index + 4) == 0x52\n        /*'R'*/\n        && reader.getUint8(index + 5) == 0x3D\n        /*'='*/\n        ) {\n          hasColors = true;\n          colors = new Float32Array(faces * 3 * 3);\n          defaultR = reader.getUint8(index + 6) / 255;\n          defaultG = reader.getUint8(index + 7) / 255;\n          defaultB = reader.getUint8(index + 8) / 255;\n          alpha = reader.getUint8(index + 9) / 255;\n        }\n      }\n\n      var dataOffset = 84;\n      var faceLength = 12 * 4 + 2;\n      var geometry = new BufferGeometry();\n      var vertices = new Float32Array(faces * 3 * 3);\n      var normals = new Float32Array(faces * 3 * 3);\n\n      for (var face = 0; face < faces; face++) {\n        var start = dataOffset + face * faceLength;\n        var normalX = reader.getFloat32(start, true);\n        var normalY = reader.getFloat32(start + 4, true);\n        var normalZ = reader.getFloat32(start + 8, true);\n\n        if (hasColors) {\n          var packedColor = reader.getUint16(start + 48, true);\n\n          if ((packedColor & 0x8000) === 0) {\n            // facet has its own unique color\n            r = (packedColor & 0x1F) / 31;\n            g = (packedColor >> 5 & 0x1F) / 31;\n            b = (packedColor >> 10 & 0x1F) / 31;\n          } else {\n            r = defaultR;\n            g = defaultG;\n            b = defaultB;\n          }\n        }\n\n        for (var i = 1; i <= 3; i++) {\n          var vertexstart = start + i * 12;\n          var componentIdx = face * 3 * 3 + (i - 1) * 3;\n          vertices[componentIdx] = reader.getFloat32(vertexstart, true);\n          vertices[componentIdx + 1] = reader.getFloat32(vertexstart + 4, true);\n          vertices[componentIdx + 2] = reader.getFloat32(vertexstart + 8, true);\n          normals[componentIdx] = normalX;\n          normals[componentIdx + 1] = normalY;\n          normals[componentIdx + 2] = normalZ;\n\n          if (hasColors) {\n            colors[componentIdx] = r;\n            colors[componentIdx + 1] = g;\n            colors[componentIdx + 2] = b;\n          }\n        }\n      }\n\n      geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n      geometry.setAttribute('normal', new BufferAttribute(normals, 3));\n\n      if (hasColors) {\n        geometry.setAttribute('color', new BufferAttribute(colors, 3));\n        geometry.hasColors = true;\n        geometry.alpha = alpha;\n      }\n\n      return geometry;\n    }\n\n    function parseASCII(data) {\n      var geometry = new BufferGeometry();\n      var patternSolid = /solid([\\s\\S]*?)endsolid/g;\n      var patternFace = /facet([\\s\\S]*?)endfacet/g;\n      var faceCounter = 0;\n      var patternFloat = /[\\s]+([+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/.source;\n      var patternVertex = new RegExp('vertex' + patternFloat + patternFloat + patternFloat, 'g');\n      var patternNormal = new RegExp('normal' + patternFloat + patternFloat + patternFloat, 'g');\n      var vertices = [];\n      var normals = [];\n      var normal = new Vector3();\n      var result;\n      var groupCount = 0;\n      var startVertex = 0;\n      var endVertex = 0;\n\n      while ((result = patternSolid.exec(data)) !== null) {\n        startVertex = endVertex;\n        var solid = result[0];\n\n        while ((result = patternFace.exec(solid)) !== null) {\n          var vertexCountPerFace = 0;\n          var normalCountPerFace = 0;\n          var text = result[0];\n\n          while ((result = patternNormal.exec(text)) !== null) {\n            normal.x = parseFloat(result[1]);\n            normal.y = parseFloat(result[2]);\n            normal.z = parseFloat(result[3]);\n            normalCountPerFace++;\n          }\n\n          while ((result = patternVertex.exec(text)) !== null) {\n            vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\n            normals.push(normal.x, normal.y, normal.z);\n            vertexCountPerFace++;\n            endVertex++;\n          } // every face have to own ONE valid normal\n\n\n          if (normalCountPerFace !== 1) {\n            console.error('THREE.STLLoader: Something isn\\'t right with the normal of face number ' + faceCounter);\n          } // each face have to own THREE valid vertices\n\n\n          if (vertexCountPerFace !== 3) {\n            console.error('THREE.STLLoader: Something isn\\'t right with the vertices of face number ' + faceCounter);\n          }\n\n          faceCounter++;\n        }\n\n        var start = startVertex;\n        var count = endVertex - startVertex;\n        geometry.addGroup(start, count, groupCount);\n        groupCount++;\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      return geometry;\n    }\n\n    function ensureString(buffer) {\n      if (typeof buffer !== 'string') {\n        return LoaderUtils.decodeText(new Uint8Array(buffer));\n      }\n\n      return buffer;\n    }\n\n    function ensureBinary(buffer) {\n      if (typeof buffer === 'string') {\n        var array_buffer = new Uint8Array(buffer.length);\n\n        for (var i = 0; i < buffer.length; i++) {\n          array_buffer[i] = buffer.charCodeAt(i) & 0xff; // implicitly assumes little-endian\n        }\n\n        return array_buffer.buffer || array_buffer;\n      } else {\n        return buffer;\n      }\n    } // start\n\n\n    var binData = ensureBinary(data);\n    return isBinary(binData) ? parseBinary(binData) : parseASCII(ensureString(data));\n  }\n});\nexport { STLLoader };","map":{"version":3,"sources":["/home/mike/Scrivania/provaFrontEnd/af2_front_end_test/node_modules/three/examples/jsm/loaders/STLLoader.js"],"names":["BufferAttribute","BufferGeometry","FileLoader","Float32BufferAttribute","Loader","LoaderUtils","Vector3","STLLoader","manager","call","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","isBinary","expect","face_size","n_faces","reader","DataView","getUint32","byteLength","solid","off","matchDataViewAt","query","offset","i","il","length","getUint8","parseBinary","faces","r","g","b","hasColors","colors","defaultR","defaultG","defaultB","alpha","index","Float32Array","dataOffset","faceLength","geometry","vertices","normals","face","start","normalX","getFloat32","normalY","normalZ","packedColor","getUint16","vertexstart","componentIdx","setAttribute","parseASCII","patternSolid","patternFace","faceCounter","patternFloat","source","patternVertex","RegExp","patternNormal","normal","result","groupCount","startVertex","endVertex","exec","vertexCountPerFace","normalCountPerFace","x","parseFloat","y","z","push","count","addGroup","ensureString","buffer","decodeText","Uint8Array","ensureBinary","array_buffer","charCodeAt","binData"],"mappings":"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","sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tLoader,\n\tLoaderUtils,\n\tVector3\n} from '../../../build/three.module.js';\n\n/**\n * Description: A THREE loader for STL ASCII files, as created by Solidworks and other CAD programs.\n *\n * Supports both binary and ASCII encoded files, with automatic detection of type.\n *\n * The loader returns a non-indexed buffer geometry.\n *\n * Limitations:\n *  Binary decoding supports \"Magics\" color format (http://en.wikipedia.org/wiki/STL_(file_format)#Color_in_binary_STL).\n *  There is perhaps some question as to how valid it is to always assume little-endian-ness.\n *  ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *  var loader = new STLLoader();\n *  loader.load( './models/stl/slotted_disk.stl', function ( geometry ) {\n *    scene.add( new THREE.Mesh( geometry ) );\n *  });\n *\n * For binary STLs geometry might contain colors for vertices. To use it:\n *  // use the same code to load STL as above\n *  if (geometry.hasColors) {\n *    material = new THREE.MeshPhongMaterial({ opacity: geometry.alpha, vertexColors: true });\n *  } else { .... }\n *  var mesh = new THREE.Mesh( geometry, material );\n *\n * For ASCII STLs containing multiple solids, each solid is assigned to a different group.\n * Groups can be used to assign a different color by defining an array of materials with the same length of\n * geometry.groups and passing it to the Mesh constructor:\n *\n * var mesh = new THREE.Mesh( geometry, material );\n *\n * For example:\n *\n *  var materials = [];\n *  var nGeometryGroups = geometry.groups.length;\n *\n *  var colorMap = ...; // Some logic to index colors.\n *\n *  for (var i = 0; i < nGeometryGroups; i++) {\n *\n *\t\tvar material = new THREE.MeshPhongMaterial({\n *\t\t\tcolor: colorMap[i],\n *\t\t\twireframe: false\n *\t\t});\n *\n *  }\n *\n *  materials.push(material);\n *  var mesh = new THREE.Mesh(geometry, materials);\n */\n\n\nvar STLLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n};\n\nSTLLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: STLLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( data ) {\n\n\t\tfunction isBinary( data ) {\n\n\t\t\tvar expect, face_size, n_faces, reader;\n\t\t\treader = new DataView( data );\n\t\t\tface_size = ( 32 / 8 * 3 ) + ( ( 32 / 8 * 3 ) * 3 ) + ( 16 / 8 );\n\t\t\tn_faces = reader.getUint32( 80, true );\n\t\t\texpect = 80 + ( 32 / 8 ) + ( n_faces * face_size );\n\n\t\t\tif ( expect === reader.byteLength ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// An ASCII STL data must begin with 'solid ' as the first six bytes.\n\t\t\t// However, ASCII STLs lacking the SPACE after the 'd' are known to be\n\t\t\t// plentiful.  So, check the first 5 bytes for 'solid'.\n\n\t\t\t// Several encodings, such as UTF-8, precede the text with up to 5 bytes:\n\t\t\t// https://en.wikipedia.org/wiki/Byte_order_mark#Byte_order_marks_by_encoding\n\t\t\t// Search for \"solid\" to start anywhere after those prefixes.\n\n\t\t\t// US-ASCII ordinal values for 's', 'o', 'l', 'i', 'd'\n\n\t\t\tvar solid = [ 115, 111, 108, 105, 100 ];\n\n\t\t\tfor ( var off = 0; off < 5; off ++ ) {\n\n\t\t\t\t// If \"solid\" text is matched to the current offset, declare it to be an ASCII STL.\n\n\t\t\t\tif ( matchDataViewAt( solid, reader, off ) ) return false;\n\n\t\t\t}\n\n\t\t\t// Couldn't find \"solid\" text at the beginning; it is binary STL.\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tfunction matchDataViewAt( query, reader, offset ) {\n\n\t\t\t// Check if each byte in query matches the corresponding byte from the current offset\n\n\t\t\tfor ( var i = 0, il = query.length; i < il; i ++ ) {\n\n\t\t\t\tif ( query[ i ] !== reader.getUint8( offset + i, false ) ) return false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tfunction parseBinary( data ) {\n\n\t\t\tvar reader = new DataView( data );\n\t\t\tvar faces = reader.getUint32( 80, true );\n\n\t\t\tvar r, g, b, hasColors = false, colors;\n\t\t\tvar defaultR, defaultG, defaultB, alpha;\n\n\t\t\t// process STL header\n\t\t\t// check for default color in header (\"COLOR=rgba\" sequence).\n\n\t\t\tfor ( var index = 0; index < 80 - 10; index ++ ) {\n\n\t\t\t\tif ( ( reader.getUint32( index, false ) == 0x434F4C4F /*COLO*/ ) &&\n\t\t\t\t\t( reader.getUint8( index + 4 ) == 0x52 /*'R'*/ ) &&\n\t\t\t\t\t( reader.getUint8( index + 5 ) == 0x3D /*'='*/ ) ) {\n\n\t\t\t\t\thasColors = true;\n\t\t\t\t\tcolors = new Float32Array( faces * 3 * 3 );\n\n\t\t\t\t\tdefaultR = reader.getUint8( index + 6 ) / 255;\n\t\t\t\t\tdefaultG = reader.getUint8( index + 7 ) / 255;\n\t\t\t\t\tdefaultB = reader.getUint8( index + 8 ) / 255;\n\t\t\t\t\talpha = reader.getUint8( index + 9 ) / 255;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar dataOffset = 84;\n\t\t\tvar faceLength = 12 * 4 + 2;\n\n\t\t\tvar geometry = new BufferGeometry();\n\n\t\t\tvar vertices = new Float32Array( faces * 3 * 3 );\n\t\t\tvar normals = new Float32Array( faces * 3 * 3 );\n\n\t\t\tfor ( var face = 0; face < faces; face ++ ) {\n\n\t\t\t\tvar start = dataOffset + face * faceLength;\n\t\t\t\tvar normalX = reader.getFloat32( start, true );\n\t\t\t\tvar normalY = reader.getFloat32( start + 4, true );\n\t\t\t\tvar normalZ = reader.getFloat32( start + 8, true );\n\n\t\t\t\tif ( hasColors ) {\n\n\t\t\t\t\tvar packedColor = reader.getUint16( start + 48, true );\n\n\t\t\t\t\tif ( ( packedColor & 0x8000 ) === 0 ) {\n\n\t\t\t\t\t\t// facet has its own unique color\n\n\t\t\t\t\t\tr = ( packedColor & 0x1F ) / 31;\n\t\t\t\t\t\tg = ( ( packedColor >> 5 ) & 0x1F ) / 31;\n\t\t\t\t\t\tb = ( ( packedColor >> 10 ) & 0x1F ) / 31;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tr = defaultR;\n\t\t\t\t\t\tg = defaultG;\n\t\t\t\t\t\tb = defaultB;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 1; i <= 3; i ++ ) {\n\n\t\t\t\t\tvar vertexstart = start + i * 12;\n\t\t\t\t\tvar componentIdx = ( face * 3 * 3 ) + ( ( i - 1 ) * 3 );\n\n\t\t\t\t\tvertices[ componentIdx ] = reader.getFloat32( vertexstart, true );\n\t\t\t\t\tvertices[ componentIdx + 1 ] = reader.getFloat32( vertexstart + 4, true );\n\t\t\t\t\tvertices[ componentIdx + 2 ] = reader.getFloat32( vertexstart + 8, true );\n\n\t\t\t\t\tnormals[ componentIdx ] = normalX;\n\t\t\t\t\tnormals[ componentIdx + 1 ] = normalY;\n\t\t\t\t\tnormals[ componentIdx + 2 ] = normalZ;\n\n\t\t\t\t\tif ( hasColors ) {\n\n\t\t\t\t\t\tcolors[ componentIdx ] = r;\n\t\t\t\t\t\tcolors[ componentIdx + 1 ] = g;\n\t\t\t\t\t\tcolors[ componentIdx + 2 ] = b;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t\t\tgeometry.setAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\n\t\t\tif ( hasColors ) {\n\n\t\t\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\t\t\t\tgeometry.hasColors = true;\n\t\t\t\tgeometry.alpha = alpha;\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction parseASCII( data ) {\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tvar patternSolid = /solid([\\s\\S]*?)endsolid/g;\n\t\t\tvar patternFace = /facet([\\s\\S]*?)endfacet/g;\n\t\t\tvar faceCounter = 0;\n\n\t\t\tvar patternFloat = /[\\s]+([+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/.source;\n\t\t\tvar patternVertex = new RegExp( 'vertex' + patternFloat + patternFloat + patternFloat, 'g' );\n\t\t\tvar patternNormal = new RegExp( 'normal' + patternFloat + patternFloat + patternFloat, 'g' );\n\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\n\t\t\tvar normal = new Vector3();\n\n\t\t\tvar result;\n\n\t\t\tvar groupCount = 0;\n\t\t\tvar startVertex = 0;\n\t\t\tvar endVertex = 0;\n\n\t\t\twhile ( ( result = patternSolid.exec( data ) ) !== null ) {\n\n\t\t\t\tstartVertex = endVertex;\n\n\t\t\t\tvar solid = result[ 0 ];\n\n\t\t\t\twhile ( ( result = patternFace.exec( solid ) ) !== null ) {\n\n\t\t\t\t\tvar vertexCountPerFace = 0;\n\t\t\t\t\tvar normalCountPerFace = 0;\n\n\t\t\t\t\tvar text = result[ 0 ];\n\n\t\t\t\t\twhile ( ( result = patternNormal.exec( text ) ) !== null ) {\n\n\t\t\t\t\t\tnormal.x = parseFloat( result[ 1 ] );\n\t\t\t\t\t\tnormal.y = parseFloat( result[ 2 ] );\n\t\t\t\t\t\tnormal.z = parseFloat( result[ 3 ] );\n\t\t\t\t\t\tnormalCountPerFace ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\twhile ( ( result = patternVertex.exec( text ) ) !== null ) {\n\n\t\t\t\t\t\tvertices.push( parseFloat( result[ 1 ] ), parseFloat( result[ 2 ] ), parseFloat( result[ 3 ] ) );\n\t\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\t\t\t\t\t\tvertexCountPerFace ++;\n\t\t\t\t\t\tendVertex ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// every face have to own ONE valid normal\n\n\t\t\t\t\tif ( normalCountPerFace !== 1 ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.STLLoader: Something isn\\'t right with the normal of face number ' + faceCounter );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// each face have to own THREE valid vertices\n\n\t\t\t\t\tif ( vertexCountPerFace !== 3 ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.STLLoader: Something isn\\'t right with the vertices of face number ' + faceCounter );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceCounter ++;\n\n\t\t\t\t}\n\n\t\t\t\tvar start = startVertex;\n\t\t\t\tvar count = endVertex - startVertex;\n\n\t\t\t\tgeometry.addGroup( start, count, groupCount );\n\t\t\t\tgroupCount ++;\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tgeometry.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction ensureString( buffer ) {\n\n\t\t\tif ( typeof buffer !== 'string' ) {\n\n\t\t\t\treturn LoaderUtils.decodeText( new Uint8Array( buffer ) );\n\n\t\t\t}\n\n\t\t\treturn buffer;\n\n\t\t}\n\n\t\tfunction ensureBinary( buffer ) {\n\n\t\t\tif ( typeof buffer === 'string' ) {\n\n\t\t\t\tvar array_buffer = new Uint8Array( buffer.length );\n\t\t\t\tfor ( var i = 0; i < buffer.length; i ++ ) {\n\n\t\t\t\t\tarray_buffer[ i ] = buffer.charCodeAt( i ) & 0xff; // implicitly assumes little-endian\n\n\t\t\t\t}\n\n\t\t\t\treturn array_buffer.buffer || array_buffer;\n\n\t\t\t} else {\n\n\t\t\t\treturn buffer;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// start\n\n\t\tvar binData = ensureBinary( data );\n\n\t\treturn isBinary( binData ) ? parseBinary( binData ) : parseASCII( ensureString( data ) );\n\n\t}\n\n} );\n\nexport { STLLoader };\n"]},"metadata":{},"sourceType":"module"}