{"ast":null,"code":"import { parsePersonalSign, parseTransactionData, convertArrayBufferToHex, convertHexToArrayBuffer, getClientMeta, payloadId, uuid, formatRpcError, parseWalletConnectUri, convertNumberToHex, isJsonRpcResponseSuccess, isJsonRpcResponseError, isSilentPayload, getLocal, signingMethods, mobileLinkChoiceKey, isMobile, removeLocal } from \"@walletconnect/utils\";\nimport SocketTransport from \"@walletconnect/socket-transport\";\nimport { ERROR_SESSION_CONNECTED, ERROR_SESSION_DISCONNECTED, ERROR_SESSION_REJECTED, ERROR_MISSING_JSON_RPC, ERROR_MISSING_RESULT, ERROR_MISSING_ERROR, ERROR_MISSING_METHOD, ERROR_MISSING_ID, ERROR_INVALID_RESPONSE, ERROR_INVALID_URI, ERROR_MISSING_REQUIRED, ERROR_QRCODE_MODAL_NOT_PROVIDED, ERROR_QRCODE_MODAL_USER_CLOSED } from \"./errors\";\nimport EventManager from \"./events\";\nimport SessionStorage from \"./storage\";\nimport { getBridgeUrl } from \"./url\";\n\nclass Connector {\n  constructor(opts) {\n    this.protocol = \"wc\";\n    this.version = 1;\n    this._bridge = \"\";\n    this._key = null;\n    this._clientId = \"\";\n    this._clientMeta = null;\n    this._peerId = \"\";\n    this._peerMeta = null;\n    this._handshakeId = 0;\n    this._handshakeTopic = \"\";\n    this._connected = false;\n    this._accounts = [];\n    this._chainId = 0;\n    this._networkId = 0;\n    this._rpcUrl = \"\";\n    this._eventManager = new EventManager();\n    this._clientMeta = getClientMeta() || opts.connectorOpts.clientMeta || null;\n    this._cryptoLib = opts.cryptoLib;\n    this._sessionStorage = opts.sessionStorage || new SessionStorage(opts.connectorOpts.storageId);\n    this._qrcodeModal = opts.connectorOpts.qrcodeModal;\n    this._qrcodeModalOptions = opts.connectorOpts.qrcodeModalOptions;\n    this._signingMethods = [...signingMethods, ...(opts.connectorOpts.signingMethods || [])];\n\n    if (!opts.connectorOpts.bridge && !opts.connectorOpts.uri && !opts.connectorOpts.session) {\n      throw new Error(ERROR_MISSING_REQUIRED);\n    }\n\n    if (opts.connectorOpts.bridge) {\n      this.bridge = getBridgeUrl(opts.connectorOpts.bridge);\n    }\n\n    if (opts.connectorOpts.uri) {\n      this.uri = opts.connectorOpts.uri;\n    }\n\n    const session = opts.connectorOpts.session || this._getStorageSession();\n\n    if (session) {\n      this.session = session;\n    }\n\n    if (this.handshakeId) {\n      this._subscribeToSessionResponse(this.handshakeId, \"Session request rejected\");\n    }\n\n    this._transport = opts.transport || new SocketTransport({\n      protocol: this.protocol,\n      version: this.version,\n      url: this.bridge,\n      subscriptions: [this.clientId]\n    });\n\n    this._subscribeToInternalEvents();\n\n    this._initTransport();\n\n    if (opts.connectorOpts.uri) {\n      this._subscribeToSessionRequest();\n    }\n\n    if (opts.pushServerOpts) {\n      this._registerPushServer(opts.pushServerOpts);\n    }\n  }\n\n  set bridge(value) {\n    if (!value) {\n      return;\n    }\n\n    this._bridge = value;\n  }\n\n  get bridge() {\n    return this._bridge;\n  }\n\n  set key(value) {\n    if (!value) {\n      return;\n    }\n\n    const key = convertHexToArrayBuffer(value);\n    this._key = key;\n  }\n\n  get key() {\n    if (this._key) {\n      const key = convertArrayBufferToHex(this._key, true);\n      return key;\n    }\n\n    return \"\";\n  }\n\n  set clientId(value) {\n    if (!value) {\n      return;\n    }\n\n    this._clientId = value;\n  }\n\n  get clientId() {\n    let clientId = this._clientId;\n\n    if (!clientId) {\n      clientId = this._clientId = uuid();\n    }\n\n    return this._clientId;\n  }\n\n  set peerId(value) {\n    if (!value) {\n      return;\n    }\n\n    this._peerId = value;\n  }\n\n  get peerId() {\n    return this._peerId;\n  }\n\n  set clientMeta(value) {}\n\n  get clientMeta() {\n    let clientMeta = this._clientMeta;\n\n    if (!clientMeta) {\n      clientMeta = this._clientMeta = getClientMeta();\n    }\n\n    return clientMeta;\n  }\n\n  set peerMeta(value) {\n    this._peerMeta = value;\n  }\n\n  get peerMeta() {\n    const peerMeta = this._peerMeta;\n    return peerMeta;\n  }\n\n  set handshakeTopic(value) {\n    if (!value) {\n      return;\n    }\n\n    this._handshakeTopic = value;\n  }\n\n  get handshakeTopic() {\n    return this._handshakeTopic;\n  }\n\n  set handshakeId(value) {\n    if (!value) {\n      return;\n    }\n\n    this._handshakeId = value;\n  }\n\n  get handshakeId() {\n    return this._handshakeId;\n  }\n\n  get uri() {\n    const _uri = this._formatUri();\n\n    return _uri;\n  }\n\n  set uri(value) {\n    if (!value) {\n      return;\n    }\n\n    const {\n      handshakeTopic,\n      bridge,\n      key\n    } = this._parseUri(value);\n\n    this.handshakeTopic = handshakeTopic;\n    this.bridge = bridge;\n    this.key = key;\n  }\n\n  set chainId(value) {\n    this._chainId = value;\n  }\n\n  get chainId() {\n    const chainId = this._chainId;\n    return chainId;\n  }\n\n  set networkId(value) {\n    this._networkId = value;\n  }\n\n  get networkId() {\n    const networkId = this._networkId;\n    return networkId;\n  }\n\n  set accounts(value) {\n    this._accounts = value;\n  }\n\n  get accounts() {\n    const accounts = this._accounts;\n    return accounts;\n  }\n\n  set rpcUrl(value) {\n    this._rpcUrl = value;\n  }\n\n  get rpcUrl() {\n    const rpcUrl = this._rpcUrl;\n    return rpcUrl;\n  }\n\n  set connected(value) {}\n\n  get connected() {\n    return this._connected;\n  }\n\n  set pending(value) {}\n\n  get pending() {\n    return !!this._handshakeTopic;\n  }\n\n  get session() {\n    return {\n      connected: this.connected,\n      accounts: this.accounts,\n      chainId: this.chainId,\n      bridge: this.bridge,\n      key: this.key,\n      clientId: this.clientId,\n      clientMeta: this.clientMeta,\n      peerId: this.peerId,\n      peerMeta: this.peerMeta,\n      handshakeId: this.handshakeId,\n      handshakeTopic: this.handshakeTopic\n    };\n  }\n\n  set session(value) {\n    if (!value) {\n      return;\n    }\n\n    this._connected = value.connected;\n    this.accounts = value.accounts;\n    this.chainId = value.chainId;\n    this.bridge = value.bridge;\n    this.key = value.key;\n    this.clientId = value.clientId;\n    this.clientMeta = value.clientMeta;\n    this.peerId = value.peerId;\n    this.peerMeta = value.peerMeta;\n    this.handshakeId = value.handshakeId;\n    this.handshakeTopic = value.handshakeTopic;\n  }\n\n  on(event, callback) {\n    const eventEmitter = {\n      event,\n      callback\n    };\n\n    this._eventManager.subscribe(eventEmitter);\n  }\n\n  off(event) {\n    this._eventManager.unsubscribe(event);\n  }\n\n  async createInstantRequest(instantRequest) {\n    this._key = await this._generateKey();\n\n    const request = this._formatRequest({\n      method: \"wc_instantRequest\",\n      params: [{\n        peerId: this.clientId,\n        peerMeta: this.clientMeta,\n        request: this._formatRequest(instantRequest)\n      }]\n    });\n\n    this.handshakeId = request.id;\n    this.handshakeTopic = uuid();\n\n    this._eventManager.trigger({\n      event: \"display_uri\",\n      params: [this.uri]\n    });\n\n    this.on(\"modal_closed\", () => {\n      throw new Error(ERROR_QRCODE_MODAL_USER_CLOSED);\n    });\n\n    const endInstantRequest = () => {\n      this.killSession();\n    };\n\n    try {\n      const result = await this._sendCallRequest(request);\n\n      if (result) {\n        endInstantRequest();\n      }\n\n      return result;\n    } catch (error) {\n      endInstantRequest();\n      throw error;\n    }\n  }\n\n  async connect(opts) {\n    if (!this._qrcodeModal) {\n      throw new Error(ERROR_QRCODE_MODAL_NOT_PROVIDED);\n    }\n\n    if (this.connected) {\n      return {\n        chainId: this.chainId,\n        accounts: this.accounts\n      };\n    }\n\n    await this.createSession(opts);\n    return new Promise(async (resolve, reject) => {\n      this.on(\"modal_closed\", () => reject(new Error(ERROR_QRCODE_MODAL_USER_CLOSED)));\n      this.on(\"connect\", (error, payload) => {\n        if (error) {\n          return reject(error);\n        }\n\n        resolve(payload.params[0]);\n      });\n    });\n  }\n\n  async createSession(opts) {\n    if (this._connected) {\n      throw new Error(ERROR_SESSION_CONNECTED);\n    }\n\n    if (this.pending) {\n      return;\n    }\n\n    this._key = await this._generateKey();\n\n    const request = this._formatRequest({\n      method: \"wc_sessionRequest\",\n      params: [{\n        peerId: this.clientId,\n        peerMeta: this.clientMeta,\n        chainId: opts && opts.chainId ? opts.chainId : null\n      }]\n    });\n\n    this.handshakeId = request.id;\n    this.handshakeTopic = uuid();\n\n    this._sendSessionRequest(request, \"Session update rejected\", {\n      topic: this.handshakeTopic\n    });\n\n    this._eventManager.trigger({\n      event: \"display_uri\",\n      params: [this.uri]\n    });\n  }\n\n  approveSession(sessionStatus) {\n    if (this._connected) {\n      throw new Error(ERROR_SESSION_CONNECTED);\n    }\n\n    this.chainId = sessionStatus.chainId;\n    this.accounts = sessionStatus.accounts;\n    this.networkId = sessionStatus.networkId || 0;\n    this.rpcUrl = sessionStatus.rpcUrl || \"\";\n    const sessionParams = {\n      approved: true,\n      chainId: this.chainId,\n      networkId: this.networkId,\n      accounts: this.accounts,\n      rpcUrl: this.rpcUrl,\n      peerId: this.clientId,\n      peerMeta: this.clientMeta\n    };\n    const response = {\n      id: this.handshakeId,\n      jsonrpc: \"2.0\",\n      result: sessionParams\n    };\n\n    this._sendResponse(response);\n\n    this._connected = true;\n\n    this._setStorageSession();\n\n    this._eventManager.trigger({\n      event: \"connect\",\n      params: [{\n        peerId: this.peerId,\n        peerMeta: this.peerMeta,\n        chainId: this.chainId,\n        accounts: this.accounts\n      }]\n    });\n  }\n\n  rejectSession(sessionError) {\n    if (this._connected) {\n      throw new Error(ERROR_SESSION_CONNECTED);\n    }\n\n    const message = sessionError && sessionError.message ? sessionError.message : ERROR_SESSION_REJECTED;\n\n    const response = this._formatResponse({\n      id: this.handshakeId,\n      error: {\n        message\n      }\n    });\n\n    this._sendResponse(response);\n\n    this._connected = false;\n\n    this._eventManager.trigger({\n      event: \"disconnect\",\n      params: [{\n        message\n      }]\n    });\n\n    this._removeStorageSession();\n  }\n\n  updateSession(sessionStatus) {\n    if (!this._connected) {\n      throw new Error(ERROR_SESSION_DISCONNECTED);\n    }\n\n    this.chainId = sessionStatus.chainId;\n    this.accounts = sessionStatus.accounts;\n    this.networkId = sessionStatus.networkId || 0;\n    this.rpcUrl = sessionStatus.rpcUrl || \"\";\n    const sessionParams = {\n      approved: true,\n      chainId: this.chainId,\n      networkId: this.networkId,\n      accounts: this.accounts,\n      rpcUrl: this.rpcUrl\n    };\n\n    const request = this._formatRequest({\n      method: \"wc_sessionUpdate\",\n      params: [sessionParams]\n    });\n\n    this._sendSessionRequest(request, \"Session update rejected\");\n\n    this._eventManager.trigger({\n      event: \"session_update\",\n      params: [{\n        chainId: this.chainId,\n        accounts: this.accounts\n      }]\n    });\n\n    this._manageStorageSession();\n  }\n\n  async killSession(sessionError) {\n    const message = sessionError ? sessionError.message : \"Session Disconnected\";\n    const sessionParams = {\n      approved: false,\n      chainId: null,\n      networkId: null,\n      accounts: null\n    };\n\n    const request = this._formatRequest({\n      method: \"wc_sessionUpdate\",\n      params: [sessionParams]\n    });\n\n    await this._sendRequest(request);\n\n    this._handleSessionDisconnect(message);\n  }\n\n  async sendTransaction(tx) {\n    if (!this._connected) {\n      throw new Error(ERROR_SESSION_DISCONNECTED);\n    }\n\n    const parsedTx = parseTransactionData(tx);\n\n    const request = this._formatRequest({\n      method: \"eth_sendTransaction\",\n      params: [parsedTx]\n    });\n\n    const result = await this._sendCallRequest(request);\n    return result;\n  }\n\n  async signTransaction(tx) {\n    if (!this._connected) {\n      throw new Error(ERROR_SESSION_DISCONNECTED);\n    }\n\n    const parsedTx = parseTransactionData(tx);\n\n    const request = this._formatRequest({\n      method: \"eth_signTransaction\",\n      params: [parsedTx]\n    });\n\n    const result = await this._sendCallRequest(request);\n    return result;\n  }\n\n  async signMessage(params) {\n    if (!this._connected) {\n      throw new Error(ERROR_SESSION_DISCONNECTED);\n    }\n\n    const request = this._formatRequest({\n      method: \"eth_sign\",\n      params\n    });\n\n    const result = await this._sendCallRequest(request);\n    return result;\n  }\n\n  async signPersonalMessage(params) {\n    if (!this._connected) {\n      throw new Error(ERROR_SESSION_DISCONNECTED);\n    }\n\n    params = parsePersonalSign(params);\n\n    const request = this._formatRequest({\n      method: \"personal_sign\",\n      params\n    });\n\n    const result = await this._sendCallRequest(request);\n    return result;\n  }\n\n  async signTypedData(params) {\n    if (!this._connected) {\n      throw new Error(ERROR_SESSION_DISCONNECTED);\n    }\n\n    const request = this._formatRequest({\n      method: \"eth_signTypedData\",\n      params\n    });\n\n    const result = await this._sendCallRequest(request);\n    return result;\n  }\n\n  async updateChain(chainParams) {\n    if (!this._connected) {\n      throw new Error(\"Session currently disconnected\");\n    }\n\n    const request = this._formatRequest({\n      method: \"wallet_updateChain\",\n      params: [chainParams]\n    });\n\n    const result = await this._sendCallRequest(request);\n    return result;\n  }\n\n  unsafeSend(request, options) {\n    this._sendRequest(request, options);\n\n    this._eventManager.trigger({\n      event: \"call_request_sent\",\n      params: [{\n        request,\n        options\n      }]\n    });\n\n    return new Promise((resolve, reject) => {\n      this._subscribeToResponse(request.id, (error, payload) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        if (!payload) {\n          throw new Error(ERROR_MISSING_JSON_RPC);\n        }\n\n        resolve(payload);\n      });\n    });\n  }\n\n  async sendCustomRequest(request, options) {\n    if (!this._connected) {\n      throw new Error(ERROR_SESSION_DISCONNECTED);\n    }\n\n    switch (request.method) {\n      case \"eth_accounts\":\n        return this.accounts;\n\n      case \"eth_chainId\":\n        return convertNumberToHex(this.chainId);\n\n      case \"eth_sendTransaction\":\n      case \"eth_signTransaction\":\n        if (request.params) {\n          request.params[0] = parseTransactionData(request.params[0]);\n        }\n\n        break;\n\n      case \"personal_sign\":\n        if (request.params) {\n          request.params = parsePersonalSign(request.params);\n        }\n\n        break;\n\n      default:\n        break;\n    }\n\n    const formattedRequest = this._formatRequest(request);\n\n    const result = await this._sendCallRequest(formattedRequest, options);\n    return result;\n  }\n\n  approveRequest(response) {\n    if (isJsonRpcResponseSuccess(response)) {\n      const formattedResponse = this._formatResponse(response);\n\n      this._sendResponse(formattedResponse);\n    } else {\n      throw new Error(ERROR_MISSING_RESULT);\n    }\n  }\n\n  rejectRequest(response) {\n    if (isJsonRpcResponseError(response)) {\n      const formattedResponse = this._formatResponse(response);\n\n      this._sendResponse(formattedResponse);\n    } else {\n      throw new Error(ERROR_MISSING_ERROR);\n    }\n  }\n\n  transportClose() {\n    this._transport.close();\n  }\n\n  async _sendRequest(request, options) {\n    const callRequest = this._formatRequest(request);\n\n    const encryptionPayload = await this._encrypt(callRequest);\n    const topic = typeof (options === null || options === void 0 ? void 0 : options.topic) !== \"undefined\" ? options.topic : this.peerId;\n    const payload = JSON.stringify(encryptionPayload);\n    const silent = typeof (options === null || options === void 0 ? void 0 : options.forcePushNotification) !== \"undefined\" ? !options.forcePushNotification : isSilentPayload(callRequest);\n\n    this._transport.send(payload, topic, silent);\n  }\n\n  async _sendResponse(response) {\n    const encryptionPayload = await this._encrypt(response);\n    const topic = this.peerId;\n    const payload = JSON.stringify(encryptionPayload);\n    const silent = true;\n\n    this._transport.send(payload, topic, silent);\n  }\n\n  async _sendSessionRequest(request, errorMsg, options) {\n    this._sendRequest(request, options);\n\n    this._subscribeToSessionResponse(request.id, errorMsg);\n  }\n\n  _sendCallRequest(request, options) {\n    this._sendRequest(request, options);\n\n    this._eventManager.trigger({\n      event: \"call_request_sent\",\n      params: [{\n        request,\n        options\n      }]\n    });\n\n    return this._subscribeToCallResponse(request.id);\n  }\n\n  _formatRequest(request) {\n    if (typeof request.method === \"undefined\") {\n      throw new Error(ERROR_MISSING_METHOD);\n    }\n\n    const formattedRequest = {\n      id: typeof request.id === \"undefined\" ? payloadId() : request.id,\n      jsonrpc: \"2.0\",\n      method: request.method,\n      params: typeof request.params === \"undefined\" ? [] : request.params\n    };\n    return formattedRequest;\n  }\n\n  _formatResponse(response) {\n    if (typeof response.id === \"undefined\") {\n      throw new Error(ERROR_MISSING_ID);\n    }\n\n    const baseResponse = {\n      id: response.id,\n      jsonrpc: \"2.0\"\n    };\n\n    if (isJsonRpcResponseError(response)) {\n      const error = formatRpcError(response.error);\n      const errorResponse = Object.assign(Object.assign(Object.assign({}, baseResponse), response), {\n        error\n      });\n      return errorResponse;\n    } else if (isJsonRpcResponseSuccess(response)) {\n      const successResponse = Object.assign(Object.assign({}, baseResponse), response);\n      return successResponse;\n    }\n\n    throw new Error(ERROR_INVALID_RESPONSE);\n  }\n\n  _handleSessionDisconnect(errorMsg) {\n    const message = errorMsg || \"Session Disconnected\";\n\n    if (!this._connected) {\n      if (this._qrcodeModal) {\n        this._qrcodeModal.close();\n      }\n\n      removeLocal(mobileLinkChoiceKey);\n    }\n\n    if (this._connected) {\n      this._connected = false;\n    }\n\n    if (this._handshakeId) {\n      this._handshakeId = 0;\n    }\n\n    if (this._handshakeTopic) {\n      this._handshakeTopic = \"\";\n    }\n\n    if (this._peerId) {\n      this._peerId = \"\";\n    }\n\n    this._eventManager.trigger({\n      event: \"disconnect\",\n      params: [{\n        message\n      }]\n    });\n\n    this._removeStorageSession();\n\n    this.transportClose();\n  }\n\n  _handleSessionResponse(errorMsg, sessionParams) {\n    if (sessionParams) {\n      if (sessionParams.approved) {\n        if (!this._connected) {\n          this._connected = true;\n\n          if (sessionParams.chainId) {\n            this.chainId = sessionParams.chainId;\n          }\n\n          if (sessionParams.accounts) {\n            this.accounts = sessionParams.accounts;\n          }\n\n          if (sessionParams.peerId && !this.peerId) {\n            this.peerId = sessionParams.peerId;\n          }\n\n          if (sessionParams.peerMeta && !this.peerMeta) {\n            this.peerMeta = sessionParams.peerMeta;\n          }\n\n          this._eventManager.trigger({\n            event: \"connect\",\n            params: [{\n              peerId: this.peerId,\n              peerMeta: this.peerMeta,\n              chainId: this.chainId,\n              accounts: this.accounts\n            }]\n          });\n        } else {\n          if (sessionParams.chainId) {\n            this.chainId = sessionParams.chainId;\n          }\n\n          if (sessionParams.accounts) {\n            this.accounts = sessionParams.accounts;\n          }\n\n          this._eventManager.trigger({\n            event: \"session_update\",\n            params: [{\n              chainId: this.chainId,\n              accounts: this.accounts\n            }]\n          });\n        }\n\n        this._manageStorageSession();\n      } else {\n        this._handleSessionDisconnect(errorMsg);\n      }\n    } else {\n      this._handleSessionDisconnect(errorMsg);\n    }\n  }\n\n  async _handleIncomingMessages(socketMessage) {\n    const activeTopics = [this.clientId, this.handshakeTopic];\n\n    if (!activeTopics.includes(socketMessage.topic)) {\n      return;\n    }\n\n    let encryptionPayload;\n\n    try {\n      encryptionPayload = JSON.parse(socketMessage.payload);\n    } catch (error) {\n      return;\n    }\n\n    const payload = await this._decrypt(encryptionPayload);\n\n    if (payload) {\n      this._eventManager.trigger(payload);\n    }\n  }\n\n  _subscribeToSessionRequest() {\n    this._transport.subscribe(this.handshakeTopic);\n  }\n\n  _subscribeToResponse(id, callback) {\n    this.on(`response:${id}`, callback);\n  }\n\n  _subscribeToSessionResponse(id, errorMsg) {\n    this._subscribeToResponse(id, (error, payload) => {\n      if (error) {\n        this._handleSessionResponse(error.message);\n\n        return;\n      }\n\n      if (isJsonRpcResponseSuccess(payload)) {\n        this._handleSessionResponse(errorMsg, payload.result);\n      } else if (payload.error && payload.error.message) {\n        this._handleSessionResponse(payload.error.message);\n      } else {\n        this._handleSessionResponse(errorMsg);\n      }\n    });\n  }\n\n  _subscribeToCallResponse(id) {\n    return new Promise((resolve, reject) => {\n      this._subscribeToResponse(id, (error, payload) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        if (isJsonRpcResponseSuccess(payload)) {\n          resolve(payload.result);\n        } else if (payload.error && payload.error.message) {\n          reject(new Error(payload.error.message));\n        } else {\n          reject(new Error(ERROR_INVALID_RESPONSE));\n        }\n      });\n    });\n  }\n\n  _subscribeToInternalEvents() {\n    this.on(\"display_uri\", () => {\n      if (this._qrcodeModal) {\n        this._qrcodeModal.open(this.uri, () => {\n          this._eventManager.trigger({\n            event: \"modal_closed\",\n            params: []\n          });\n        }, this._qrcodeModalOptions);\n      }\n    });\n    this.on(\"connect\", () => {\n      if (this._qrcodeModal) {\n        this._qrcodeModal.close();\n      }\n    });\n    this.on(\"call_request_sent\", (error, payload) => {\n      const {\n        request\n      } = payload.params[0];\n\n      if (isMobile() && this._signingMethods.includes(request.method)) {\n        const mobileLinkUrl = getLocal(mobileLinkChoiceKey);\n\n        if (mobileLinkUrl) {\n          window.location.href = mobileLinkUrl.href;\n        }\n      }\n    });\n    this.on(\"wc_sessionRequest\", (error, payload) => {\n      if (error) {\n        this._eventManager.trigger({\n          event: \"error\",\n          params: [{\n            code: \"SESSION_REQUEST_ERROR\",\n            message: error.toString()\n          }]\n        });\n      }\n\n      this.handshakeId = payload.id;\n      this.peerId = payload.params[0].peerId;\n      this.peerMeta = payload.params[0].peerMeta;\n      const internalPayload = Object.assign(Object.assign({}, payload), {\n        method: \"session_request\"\n      });\n\n      this._eventManager.trigger(internalPayload);\n    });\n    this.on(\"wc_sessionUpdate\", (error, payload) => {\n      if (error) {\n        this._handleSessionResponse(error.message);\n      }\n\n      this._handleSessionResponse(\"Session disconnected\", payload.params[0]);\n    });\n  }\n\n  _initTransport() {\n    this._transport.on(\"message\", socketMessage => this._handleIncomingMessages(socketMessage));\n\n    this._transport.on(\"open\", () => this._eventManager.trigger({\n      event: \"transport_open\",\n      params: []\n    }));\n\n    this._transport.on(\"close\", () => this._eventManager.trigger({\n      event: \"transport_close\",\n      params: []\n    }));\n\n    this._transport.on(\"error\", () => this._eventManager.trigger({\n      event: \"transport_error\",\n      params: [\"Websocket connection failed\"]\n    }));\n\n    this._transport.open();\n  }\n\n  _formatUri() {\n    const protocol = this.protocol;\n    const handshakeTopic = this.handshakeTopic;\n    const version = this.version;\n    const bridge = encodeURIComponent(this.bridge);\n    const key = this.key;\n    const uri = `${protocol}:${handshakeTopic}@${version}?bridge=${bridge}&key=${key}`;\n    return uri;\n  }\n\n  _parseUri(uri) {\n    const result = parseWalletConnectUri(uri);\n\n    if (result.protocol === this.protocol) {\n      if (!result.handshakeTopic) {\n        throw Error(\"Invalid or missing handshakeTopic parameter value\");\n      }\n\n      const handshakeTopic = result.handshakeTopic;\n\n      if (!result.bridge) {\n        throw Error(\"Invalid or missing bridge url parameter value\");\n      }\n\n      const bridge = decodeURIComponent(result.bridge);\n\n      if (!result.key) {\n        throw Error(\"Invalid or missing key parameter value\");\n      }\n\n      const key = result.key;\n      return {\n        handshakeTopic,\n        bridge,\n        key\n      };\n    } else {\n      throw new Error(ERROR_INVALID_URI);\n    }\n  }\n\n  async _generateKey() {\n    if (this._cryptoLib) {\n      const result = await this._cryptoLib.generateKey();\n      return result;\n    }\n\n    return null;\n  }\n\n  async _encrypt(data) {\n    const key = this._key;\n\n    if (this._cryptoLib && key) {\n      const result = await this._cryptoLib.encrypt(data, key);\n      return result;\n    }\n\n    return null;\n  }\n\n  async _decrypt(payload) {\n    const key = this._key;\n\n    if (this._cryptoLib && key) {\n      const result = await this._cryptoLib.decrypt(payload, key);\n      return result;\n    }\n\n    return null;\n  }\n\n  _getStorageSession() {\n    let result = null;\n\n    if (this._sessionStorage) {\n      result = this._sessionStorage.getSession();\n    }\n\n    return result;\n  }\n\n  _setStorageSession() {\n    if (this._sessionStorage) {\n      this._sessionStorage.setSession(this.session);\n    }\n  }\n\n  _removeStorageSession() {\n    if (this._sessionStorage) {\n      this._sessionStorage.removeSession();\n    }\n  }\n\n  _manageStorageSession() {\n    if (this._connected) {\n      this._setStorageSession();\n    } else {\n      this._removeStorageSession();\n    }\n  }\n\n  _registerPushServer(pushServerOpts) {\n    if (!pushServerOpts.url || typeof pushServerOpts.url !== \"string\") {\n      throw Error(\"Invalid or missing pushServerOpts.url parameter value\");\n    }\n\n    if (!pushServerOpts.type || typeof pushServerOpts.type !== \"string\") {\n      throw Error(\"Invalid or missing pushServerOpts.type parameter value\");\n    }\n\n    if (!pushServerOpts.token || typeof pushServerOpts.token !== \"string\") {\n      throw Error(\"Invalid or missing pushServerOpts.token parameter value\");\n    }\n\n    const pushSubscription = {\n      bridge: this.bridge,\n      topic: this.clientId,\n      type: pushServerOpts.type,\n      token: pushServerOpts.token,\n      peerName: \"\",\n      language: pushServerOpts.language || \"\"\n    };\n    this.on(\"connect\", async (error, payload) => {\n      if (error) {\n        throw error;\n      }\n\n      if (pushServerOpts.peerMeta) {\n        const peerName = payload.params[0].peerMeta.name;\n        pushSubscription.peerName = peerName;\n      }\n\n      try {\n        const response = await fetch(`${pushServerOpts.url}/new`, {\n          method: \"POST\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(pushSubscription)\n        });\n        const json = await response.json();\n\n        if (!json.success) {\n          throw Error(\"Failed to register in Push Server\");\n        }\n      } catch (error) {\n        throw Error(\"Failed to register in Push Server\");\n      }\n    });\n  }\n\n}\n\nexport default Connector;","map":{"version":3,"mappings":"AA2BA,SACEA,iBADF,EAEEC,oBAFF,EAGEC,uBAHF,EAIEC,uBAJF,EAKEC,aALF,EAMEC,SANF,EAOEC,IAPF,EAQEC,cARF,EASEC,qBATF,EAUEC,kBAVF,EAWEC,wBAXF,EAYEC,sBAZF,EAaEC,eAbF,EAcEC,QAdF,EAeEC,cAfF,EAgBEC,mBAhBF,EAiBEC,QAjBF,EAkBEC,WAlBF,QAmBO,sBAnBP;AAoBA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,SACEC,uBADF,EAEEC,0BAFF,EAGEC,sBAHF,EAIEC,sBAJF,EAKEC,oBALF,EAMEC,mBANF,EAOEC,oBAPF,EAQEC,gBARF,EASEC,sBATF,EAUEC,iBAVF,EAWEC,sBAXF,EAYEC,+BAZF,EAaEC,8BAbF,QAcO,UAdP;AAeA,OAAOC,YAAP,MAAyB,UAAzB;AACA,OAAOC,cAAP,MAA2B,WAA3B;AACA,SAASC,YAAT,QAA6B,OAA7B;;AAIA,MAAMC,SAAN,CAAe;AAkDbC,cAAYC,IAAZ,EAAgC;AAjDhB,oBAAW,IAAX;AACA,mBAAU,CAAV;AAIR,mBAAU,EAAV;AACA,gBAA2B,IAA3B;AAIA,qBAAY,EAAZ;AACA,uBAAkC,IAAlC;AAIA,mBAAU,EAAV;AACA,qBAAgC,IAAhC;AAIA,wBAAe,CAAf;AACA,2BAAkB,EAAlB;AAIA,sBAAa,KAAb;AACA,qBAAsB,EAAtB;AACA,oBAAW,CAAX;AACA,sBAAa,CAAb;AACA,mBAAU,EAAV;AAMA,yBAA8B,IAAIL,YAAJ,EAA9B;AAeN,SAAKM,WAAL,GAAmBlC,aAAa,MAAMiC,IAAI,CAACE,aAAL,CAAmBC,UAAtC,IAAoD,IAAvE;AACA,SAAKC,UAAL,GAAkBJ,IAAI,CAACK,SAAvB;AACA,SAAKC,eAAL,GAAuBN,IAAI,CAACO,cAAL,IAAuB,IAAIX,cAAJ,CAAmBI,IAAI,CAACE,aAAL,CAAmBM,SAAtC,CAA9C;AACA,SAAKC,YAAL,GAAoBT,IAAI,CAACE,aAAL,CAAmBQ,WAAvC;AACA,SAAKC,mBAAL,GAA2BX,IAAI,CAACE,aAAL,CAAmBU,kBAA9C;AACA,SAAKC,eAAL,GAAuB,CAAC,GAAGpC,cAAJ,EAAoB,IAAIuB,IAAI,CAACE,aAAL,CAAmBzB,cAAnB,IAAqC,EAAzC,CAApB,CAAvB;;AAEA,QAAI,CAACuB,IAAI,CAACE,aAAL,CAAmBY,MAApB,IAA8B,CAACd,IAAI,CAACE,aAAL,CAAmBa,GAAlD,IAAyD,CAACf,IAAI,CAACE,aAAL,CAAmBc,OAAjF,EAA0F;AACxF,YAAM,IAAIC,KAAJ,CAAUzB,sBAAV,CAAN;AACD;;AAED,QAAIQ,IAAI,CAACE,aAAL,CAAmBY,MAAvB,EAA+B;AAC7B,WAAKA,MAAL,GAAcjB,YAAY,CAACG,IAAI,CAACE,aAAL,CAAmBY,MAApB,CAA1B;AACD;;AAED,QAAId,IAAI,CAACE,aAAL,CAAmBa,GAAvB,EAA4B;AAC1B,WAAKA,GAAL,GAAWf,IAAI,CAACE,aAAL,CAAmBa,GAA9B;AACD;;AAED,UAAMC,OAAO,GAAGhB,IAAI,CAACE,aAAL,CAAmBc,OAAnB,IAA8B,KAAKE,kBAAL,EAA9C;;AAEA,QAAIF,OAAJ,EAAa;AACX,WAAKA,OAAL,GAAeA,OAAf;AACD;;AAED,QAAI,KAAKG,WAAT,EAAsB;AACpB,WAAKC,2BAAL,CAAiC,KAAKD,WAAtC,EAAmD,0BAAnD;AACD;;AAED,SAAKE,UAAL,GACErB,IAAI,CAACsB,SAAL,IACA,IAAIzC,eAAJ,CAAoB;AAClB0C,cAAQ,EAAE,KAAKA,QADG;AAElBC,aAAO,EAAE,KAAKA,OAFI;AAGlBC,SAAG,EAAE,KAAKX,MAHQ;AAIlBY,mBAAa,EAAE,CAAC,KAAKC,QAAN;AAJG,KAApB,CAFF;;AASA,SAAKC,0BAAL;;AACA,SAAKC,cAAL;;AAEA,QAAI7B,IAAI,CAACE,aAAL,CAAmBa,GAAvB,EAA4B;AAC1B,WAAKe,0BAAL;AACD;;AAED,QAAI9B,IAAI,CAAC+B,cAAT,EAAyB;AACvB,WAAKC,mBAAL,CAAyBhC,IAAI,CAAC+B,cAA9B;AACD;AACF;;AAIS,MAANjB,MAAM,CAACmB,KAAD,EAAc;AACtB,QAAI,CAACA,KAAL,EAAY;AACV;AACD;;AACD,SAAKC,OAAL,GAAeD,KAAf;AACD;;AAES,MAANnB,MAAM;AACR,WAAO,KAAKoB,OAAZ;AACD;;AAEM,MAAHC,GAAG,CAACF,KAAD,EAAc;AACnB,QAAI,CAACA,KAAL,EAAY;AACV;AACD;;AACD,UAAME,GAAG,GAAgBrE,uBAAuB,CAACmE,KAAD,CAAhD;AACA,SAAKG,IAAL,GAAYD,GAAZ;AACD;;AAEM,MAAHA,GAAG;AACL,QAAI,KAAKC,IAAT,EAAe;AACb,YAAMD,GAAG,GAAWtE,uBAAuB,CAAC,KAAKuE,IAAN,EAAY,IAAZ,CAA3C;AACA,aAAOD,GAAP;AACD;;AACD,WAAO,EAAP;AACD;;AAEW,MAARR,QAAQ,CAACM,KAAD,EAAc;AACxB,QAAI,CAACA,KAAL,EAAY;AACV;AACD;;AACD,SAAKI,SAAL,GAAiBJ,KAAjB;AACD;;AAEW,MAARN,QAAQ;AACV,QAAIA,QAAQ,GAAkB,KAAKU,SAAnC;;AACA,QAAI,CAACV,QAAL,EAAe;AACbA,cAAQ,GAAG,KAAKU,SAAL,GAAiBpE,IAAI,EAAhC;AACD;;AAED,WAAO,KAAKoE,SAAZ;AACD;;AAES,MAANC,MAAM,CAACL,KAAD,EAAM;AACd,QAAI,CAACA,KAAL,EAAY;AACV;AACD;;AACD,SAAKM,OAAL,GAAeN,KAAf;AACD;;AAES,MAANK,MAAM;AACR,WAAO,KAAKC,OAAZ;AACD;;AAEa,MAAVpC,UAAU,CAAC8B,KAAD,EAAM,CAEnB;;AAEa,MAAV9B,UAAU;AACZ,QAAIA,UAAU,GAAuB,KAAKF,WAA1C;;AACA,QAAI,CAACE,UAAL,EAAiB;AACfA,gBAAU,GAAG,KAAKF,WAAL,GAAmBlC,aAAa,EAA7C;AACD;;AACD,WAAOoC,UAAP;AACD;;AAEW,MAARqC,QAAQ,CAACP,KAAD,EAAM;AAChB,SAAKQ,SAAL,GAAiBR,KAAjB;AACD;;AAEW,MAARO,QAAQ;AACV,UAAMA,QAAQ,GAAuB,KAAKC,SAA1C;AACA,WAAOD,QAAP;AACD;;AAEiB,MAAdE,cAAc,CAACT,KAAD,EAAM;AACtB,QAAI,CAACA,KAAL,EAAY;AACV;AACD;;AACD,SAAKU,eAAL,GAAuBV,KAAvB;AACD;;AAEiB,MAAdS,cAAc;AAChB,WAAO,KAAKC,eAAZ;AACD;;AAEc,MAAXxB,WAAW,CAACc,KAAD,EAAM;AACnB,QAAI,CAACA,KAAL,EAAY;AACV;AACD;;AACD,SAAKW,YAAL,GAAoBX,KAApB;AACD;;AAEc,MAAXd,WAAW;AACb,WAAO,KAAKyB,YAAZ;AACD;;AAEM,MAAH7B,GAAG;AACL,UAAM8B,IAAI,GAAG,KAAKC,UAAL,EAAb;;AACA,WAAOD,IAAP;AACD;;AAEM,MAAH9B,GAAG,CAACkB,KAAD,EAAM;AACX,QAAI,CAACA,KAAL,EAAY;AACV;AACD;;AACD,UAAM;AAAES,oBAAF;AAAkB5B,YAAlB;AAA0BqB;AAA1B,QAAkC,KAAKY,SAAL,CAAed,KAAf,CAAxC;;AACA,SAAKS,cAAL,GAAsBA,cAAtB;AACA,SAAK5B,MAAL,GAAcA,MAAd;AACA,SAAKqB,GAAL,GAAWA,GAAX;AACD;;AAEU,MAAPa,OAAO,CAACf,KAAD,EAAM;AACf,SAAKgB,QAAL,GAAgBhB,KAAhB;AACD;;AAEU,MAAPe,OAAO;AACT,UAAMA,OAAO,GAAkB,KAAKC,QAApC;AACA,WAAOD,OAAP;AACD;;AAEY,MAATE,SAAS,CAACjB,KAAD,EAAM;AACjB,SAAKkB,UAAL,GAAkBlB,KAAlB;AACD;;AAEY,MAATiB,SAAS;AACX,UAAMA,SAAS,GAAkB,KAAKC,UAAtC;AACA,WAAOD,SAAP;AACD;;AAEW,MAARE,QAAQ,CAACnB,KAAD,EAAM;AAChB,SAAKoB,SAAL,GAAiBpB,KAAjB;AACD;;AAEW,MAARmB,QAAQ;AACV,UAAMA,QAAQ,GAAoB,KAAKC,SAAvC;AACA,WAAOD,QAAP;AACD;;AAES,MAANE,MAAM,CAACrB,KAAD,EAAM;AACd,SAAKsB,OAAL,GAAetB,KAAf;AACD;;AAES,MAANqB,MAAM;AACR,UAAMA,MAAM,GAAkB,KAAKC,OAAnC;AACA,WAAOD,MAAP;AACD;;AAEY,MAATE,SAAS,CAACvB,KAAD,EAAM,CAElB;;AAEY,MAATuB,SAAS;AACX,WAAO,KAAKC,UAAZ;AACD;;AAEU,MAAPC,OAAO,CAACzB,KAAD,EAAM,CAEhB;;AAEU,MAAPyB,OAAO;AACT,WAAO,CAAC,CAAC,KAAKf,eAAd;AACD;;AAEU,MAAP3B,OAAO;AACT,WAAO;AACLwC,eAAS,EAAE,KAAKA,SADX;AAELJ,cAAQ,EAAE,KAAKA,QAFV;AAGLJ,aAAO,EAAE,KAAKA,OAHT;AAILlC,YAAM,EAAE,KAAKA,MAJR;AAKLqB,SAAG,EAAE,KAAKA,GALL;AAMLR,cAAQ,EAAE,KAAKA,QANV;AAOLxB,gBAAU,EAAE,KAAKA,UAPZ;AAQLmC,YAAM,EAAE,KAAKA,MARR;AASLE,cAAQ,EAAE,KAAKA,QATV;AAULrB,iBAAW,EAAE,KAAKA,WAVb;AAWLuB,oBAAc,EAAE,KAAKA;AAXhB,KAAP;AAaD;;AAEU,MAAP1B,OAAO,CAACiB,KAAD,EAAM;AACf,QAAI,CAACA,KAAL,EAAY;AACV;AACD;;AACD,SAAKwB,UAAL,GAAkBxB,KAAK,CAACuB,SAAxB;AACA,SAAKJ,QAAL,GAAgBnB,KAAK,CAACmB,QAAtB;AACA,SAAKJ,OAAL,GAAef,KAAK,CAACe,OAArB;AACA,SAAKlC,MAAL,GAAcmB,KAAK,CAACnB,MAApB;AACA,SAAKqB,GAAL,GAAWF,KAAK,CAACE,GAAjB;AACA,SAAKR,QAAL,GAAgBM,KAAK,CAACN,QAAtB;AACA,SAAKxB,UAAL,GAAkB8B,KAAK,CAAC9B,UAAxB;AACA,SAAKmC,MAAL,GAAcL,KAAK,CAACK,MAApB;AACA,SAAKE,QAAL,GAAgBP,KAAK,CAACO,QAAtB;AACA,SAAKrB,WAAL,GAAmBc,KAAK,CAACd,WAAzB;AACA,SAAKuB,cAAL,GAAsBT,KAAK,CAACS,cAA5B;AACD;;AAIMiB,IAAE,CAACC,KAAD,EAAgBC,QAAhB,EAA4E;AACnF,UAAMC,YAAY,GAAG;AACnBF,WADmB;AAEnBC;AAFmB,KAArB;;AAIA,SAAKE,aAAL,CAAmBC,SAAnB,CAA6BF,YAA7B;AACD;;AAEMG,KAAG,CAACL,KAAD,EAAc;AACtB,SAAKG,aAAL,CAAmBG,WAAnB,CAA+BN,KAA/B;AACD;;AAEgC,QAApBO,oBAAoB,CAACC,cAAD,EAAyC;AACxE,SAAKhC,IAAL,GAAY,MAAM,KAAKiC,YAAL,EAAlB;;AAEA,UAAMC,OAAO,GAAoB,KAAKC,cAAL,CAAoB;AACnDC,YAAM,EAAE,mBAD2C;AAEnDC,YAAM,EAAE,CACN;AACEnC,cAAM,EAAE,KAAKX,QADf;AAEEa,gBAAQ,EAAE,KAAKrC,UAFjB;AAGEmE,eAAO,EAAE,KAAKC,cAAL,CAAoBH,cAApB;AAHX,OADM;AAF2C,KAApB,CAAjC;;AAWA,SAAKjD,WAAL,GAAmBmD,OAAO,CAACI,EAA3B;AACA,SAAKhC,cAAL,GAAsBzE,IAAI,EAA1B;;AAEA,SAAK8F,aAAL,CAAmBY,OAAnB,CAA2B;AACzBf,WAAK,EAAE,aADkB;AAEzBa,YAAM,EAAE,CAAC,KAAK1D,GAAN;AAFiB,KAA3B;;AAKA,SAAK4C,EAAL,CAAQ,cAAR,EAAwB,MAAK;AAC3B,YAAM,IAAI1C,KAAJ,CAAUvB,8BAAV,CAAN;AACD,KAFD;;AAIA,UAAMkF,iBAAiB,GAAG,MAAK;AAC7B,WAAKC,WAAL;AACD,KAFD;;AAIA,QAAI;AACF,YAAMC,MAAM,GAAG,MAAM,KAAKC,gBAAL,CAAsBT,OAAtB,CAArB;;AAEA,UAAIQ,MAAJ,EAAY;AACVF,yBAAiB;AAClB;;AAED,aAAOE,MAAP;AACD,KARD,CAQE,OAAOE,KAAP,EAAc;AACdJ,uBAAiB;AACjB,YAAMI,KAAN;AACD;AACF;;AAEmB,QAAPC,OAAO,CAACjF,IAAD,EAA6B;AAC/C,QAAI,CAAC,KAAKS,YAAV,EAAwB;AACtB,YAAM,IAAIQ,KAAJ,CAAUxB,+BAAV,CAAN;AACD;;AAED,QAAI,KAAK+D,SAAT,EAAoB;AAClB,aAAO;AACLR,eAAO,EAAE,KAAKA,OADT;AAELI,gBAAQ,EAAE,KAAKA;AAFV,OAAP;AAID;;AAED,UAAM,KAAK8B,aAAL,CAAmBlF,IAAnB,CAAN;AAEA,WAAO,IAAImF,OAAJ,CAA4B,OAAOC,OAAP,EAAgBC,MAAhB,KAA0B;AAC3D,WAAK1B,EAAL,CAAQ,cAAR,EAAwB,MAAM0B,MAAM,CAAC,IAAIpE,KAAJ,CAAUvB,8BAAV,CAAD,CAApC;AAEA,WAAKiE,EAAL,CAAQ,SAAR,EAAmB,CAACqB,KAAD,EAAQM,OAAR,KAAmB;AACpC,YAAIN,KAAJ,EAAW;AACT,iBAAOK,MAAM,CAACL,KAAD,CAAb;AACD;;AAEDI,eAAO,CAACE,OAAO,CAACb,MAAR,CAAe,CAAf,CAAD,CAAP;AACD,OAND;AAOD,KAVM,CAAP;AAWD;;AAEyB,QAAbS,aAAa,CAAClF,IAAD,EAA6B;AACrD,QAAI,KAAKyD,UAAT,EAAqB;AACnB,YAAM,IAAIxC,KAAJ,CAAUnC,uBAAV,CAAN;AACD;;AAED,QAAI,KAAK4E,OAAT,EAAkB;AAChB;AACD;;AAED,SAAKtB,IAAL,GAAY,MAAM,KAAKiC,YAAL,EAAlB;;AAEA,UAAMC,OAAO,GAAoB,KAAKC,cAAL,CAAoB;AACnDC,YAAM,EAAE,mBAD2C;AAEnDC,YAAM,EAAE,CACN;AACEnC,cAAM,EAAE,KAAKX,QADf;AAEEa,gBAAQ,EAAE,KAAKrC,UAFjB;AAGE6C,eAAO,EAAEhD,IAAI,IAAIA,IAAI,CAACgD,OAAb,GAAuBhD,IAAI,CAACgD,OAA5B,GAAsC;AAHjD,OADM;AAF2C,KAApB,CAAjC;;AAWA,SAAK7B,WAAL,GAAmBmD,OAAO,CAACI,EAA3B;AACA,SAAKhC,cAAL,GAAsBzE,IAAI,EAA1B;;AAEA,SAAKsH,mBAAL,CAAyBjB,OAAzB,EAAkC,yBAAlC,EAA6D;AAC3DkB,WAAK,EAAE,KAAK9C;AAD+C,KAA7D;;AAIA,SAAKqB,aAAL,CAAmBY,OAAnB,CAA2B;AACzBf,WAAK,EAAE,aADkB;AAEzBa,YAAM,EAAE,CAAC,KAAK1D,GAAN;AAFiB,KAA3B;AAID;;AAEM0E,gBAAc,CAACC,aAAD,EAA8B;AACjD,QAAI,KAAKjC,UAAT,EAAqB;AACnB,YAAM,IAAIxC,KAAJ,CAAUnC,uBAAV,CAAN;AACD;;AAED,SAAKkE,OAAL,GAAe0C,aAAa,CAAC1C,OAA7B;AACA,SAAKI,QAAL,GAAgBsC,aAAa,CAACtC,QAA9B;AACA,SAAKF,SAAL,GAAiBwC,aAAa,CAACxC,SAAd,IAA2B,CAA5C;AACA,SAAKI,MAAL,GAAcoC,aAAa,CAACpC,MAAd,IAAwB,EAAtC;AAEA,UAAMqC,aAAa,GAAmB;AACpCC,cAAQ,EAAE,IAD0B;AAEpC5C,aAAO,EAAE,KAAKA,OAFsB;AAGpCE,eAAS,EAAE,KAAKA,SAHoB;AAIpCE,cAAQ,EAAE,KAAKA,QAJqB;AAKpCE,YAAM,EAAE,KAAKA,MALuB;AAMpChB,YAAM,EAAE,KAAKX,QANuB;AAOpCa,cAAQ,EAAE,KAAKrC;AAPqB,KAAtC;AAUA,UAAM0F,QAAQ,GAAG;AACfnB,QAAE,EAAE,KAAKvD,WADM;AAEf2E,aAAO,EAAE,KAFM;AAGfhB,YAAM,EAAEa;AAHO,KAAjB;;AAMA,SAAKI,aAAL,CAAmBF,QAAnB;;AAEA,SAAKpC,UAAL,GAAkB,IAAlB;;AACA,SAAKuC,kBAAL;;AACA,SAAKjC,aAAL,CAAmBY,OAAnB,CAA2B;AACzBf,WAAK,EAAE,SADkB;AAEzBa,YAAM,EAAE,CACN;AACEnC,cAAM,EAAE,KAAKA,MADf;AAEEE,gBAAQ,EAAE,KAAKA,QAFjB;AAGEQ,eAAO,EAAE,KAAKA,OAHhB;AAIEI,gBAAQ,EAAE,KAAKA;AAJjB,OADM;AAFiB,KAA3B;AAWD;;AAEM6C,eAAa,CAACC,YAAD,EAA6B;AAC/C,QAAI,KAAKzC,UAAT,EAAqB;AACnB,YAAM,IAAIxC,KAAJ,CAAUnC,uBAAV,CAAN;AACD;;AAED,UAAMqH,OAAO,GACXD,YAAY,IAAIA,YAAY,CAACC,OAA7B,GAAuCD,YAAY,CAACC,OAApD,GAA8DnH,sBADhE;;AAGA,UAAM6G,QAAQ,GAAG,KAAKO,eAAL,CAAqB;AACpC1B,QAAE,EAAE,KAAKvD,WAD2B;AAEpC6D,WAAK,EAAE;AAAEmB;AAAF;AAF6B,KAArB,CAAjB;;AAKA,SAAKJ,aAAL,CAAmBF,QAAnB;;AAEA,SAAKpC,UAAL,GAAkB,KAAlB;;AACA,SAAKM,aAAL,CAAmBY,OAAnB,CAA2B;AACzBf,WAAK,EAAE,YADkB;AAEzBa,YAAM,EAAE,CAAC;AAAE0B;AAAF,OAAD;AAFiB,KAA3B;;AAIA,SAAKE,qBAAL;AACD;;AAEMC,eAAa,CAACZ,aAAD,EAA8B;AAChD,QAAI,CAAC,KAAKjC,UAAV,EAAsB;AACpB,YAAM,IAAIxC,KAAJ,CAAUlC,0BAAV,CAAN;AACD;;AAED,SAAKiE,OAAL,GAAe0C,aAAa,CAAC1C,OAA7B;AACA,SAAKI,QAAL,GAAgBsC,aAAa,CAACtC,QAA9B;AACA,SAAKF,SAAL,GAAiBwC,aAAa,CAACxC,SAAd,IAA2B,CAA5C;AACA,SAAKI,MAAL,GAAcoC,aAAa,CAACpC,MAAd,IAAwB,EAAtC;AAEA,UAAMqC,aAAa,GAAmB;AACpCC,cAAQ,EAAE,IAD0B;AAEpC5C,aAAO,EAAE,KAAKA,OAFsB;AAGpCE,eAAS,EAAE,KAAKA,SAHoB;AAIpCE,cAAQ,EAAE,KAAKA,QAJqB;AAKpCE,YAAM,EAAE,KAAKA;AALuB,KAAtC;;AAQA,UAAMgB,OAAO,GAAG,KAAKC,cAAL,CAAoB;AAClCC,YAAM,EAAE,kBAD0B;AAElCC,YAAM,EAAE,CAACkB,aAAD;AAF0B,KAApB,CAAhB;;AAKA,SAAKJ,mBAAL,CAAyBjB,OAAzB,EAAkC,yBAAlC;;AAEA,SAAKP,aAAL,CAAmBY,OAAnB,CAA2B;AACzBf,WAAK,EAAE,gBADkB;AAEzBa,YAAM,EAAE,CACN;AACEzB,eAAO,EAAE,KAAKA,OADhB;AAEEI,gBAAQ,EAAE,KAAKA;AAFjB,OADM;AAFiB,KAA3B;;AAUA,SAAKmD,qBAAL;AACD;;AAEuB,QAAX1B,WAAW,CAACqB,YAAD,EAA6B;AACnD,UAAMC,OAAO,GAAGD,YAAY,GAAGA,YAAY,CAACC,OAAhB,GAA0B,sBAAtD;AAEA,UAAMR,aAAa,GAAmB;AACpCC,cAAQ,EAAE,KAD0B;AAEpC5C,aAAO,EAAE,IAF2B;AAGpCE,eAAS,EAAE,IAHyB;AAIpCE,cAAQ,EAAE;AAJ0B,KAAtC;;AAOA,UAAMkB,OAAO,GAAG,KAAKC,cAAL,CAAoB;AAClCC,YAAM,EAAE,kBAD0B;AAElCC,YAAM,EAAE,CAACkB,aAAD;AAF0B,KAApB,CAAhB;;AAKA,UAAM,KAAKa,YAAL,CAAkBlC,OAAlB,CAAN;;AAEA,SAAKmC,wBAAL,CAA8BN,OAA9B;AACD;;AAE2B,QAAfO,eAAe,CAACC,EAAD,EAAY;AACtC,QAAI,CAAC,KAAKlD,UAAV,EAAsB;AACpB,YAAM,IAAIxC,KAAJ,CAAUlC,0BAAV,CAAN;AACD;;AAED,UAAM6H,QAAQ,GAAGhJ,oBAAoB,CAAC+I,EAAD,CAArC;;AAEA,UAAMrC,OAAO,GAAG,KAAKC,cAAL,CAAoB;AAClCC,YAAM,EAAE,qBAD0B;AAElCC,YAAM,EAAE,CAACmC,QAAD;AAF0B,KAApB,CAAhB;;AAKA,UAAM9B,MAAM,GAAG,MAAM,KAAKC,gBAAL,CAAsBT,OAAtB,CAArB;AACA,WAAOQ,MAAP;AACD;;AAE2B,QAAf+B,eAAe,CAACF,EAAD,EAAY;AACtC,QAAI,CAAC,KAAKlD,UAAV,EAAsB;AACpB,YAAM,IAAIxC,KAAJ,CAAUlC,0BAAV,CAAN;AACD;;AAED,UAAM6H,QAAQ,GAAGhJ,oBAAoB,CAAC+I,EAAD,CAArC;;AAEA,UAAMrC,OAAO,GAAG,KAAKC,cAAL,CAAoB;AAClCC,YAAM,EAAE,qBAD0B;AAElCC,YAAM,EAAE,CAACmC,QAAD;AAF0B,KAApB,CAAhB;;AAKA,UAAM9B,MAAM,GAAG,MAAM,KAAKC,gBAAL,CAAsBT,OAAtB,CAArB;AACA,WAAOQ,MAAP;AACD;;AAEuB,QAAXgC,WAAW,CAACrC,MAAD,EAAc;AACpC,QAAI,CAAC,KAAKhB,UAAV,EAAsB;AACpB,YAAM,IAAIxC,KAAJ,CAAUlC,0BAAV,CAAN;AACD;;AAED,UAAMuF,OAAO,GAAG,KAAKC,cAAL,CAAoB;AAClCC,YAAM,EAAE,UAD0B;AAElCC;AAFkC,KAApB,CAAhB;;AAKA,UAAMK,MAAM,GAAG,MAAM,KAAKC,gBAAL,CAAsBT,OAAtB,CAArB;AACA,WAAOQ,MAAP;AACD;;AAE+B,QAAnBiC,mBAAmB,CAACtC,MAAD,EAAc;AAC5C,QAAI,CAAC,KAAKhB,UAAV,EAAsB;AACpB,YAAM,IAAIxC,KAAJ,CAAUlC,0BAAV,CAAN;AACD;;AAED0F,UAAM,GAAG9G,iBAAiB,CAAC8G,MAAD,CAA1B;;AAEA,UAAMH,OAAO,GAAG,KAAKC,cAAL,CAAoB;AAClCC,YAAM,EAAE,eAD0B;AAElCC;AAFkC,KAApB,CAAhB;;AAKA,UAAMK,MAAM,GAAG,MAAM,KAAKC,gBAAL,CAAsBT,OAAtB,CAArB;AACA,WAAOQ,MAAP;AACD;;AAEyB,QAAbkC,aAAa,CAACvC,MAAD,EAAc;AACtC,QAAI,CAAC,KAAKhB,UAAV,EAAsB;AACpB,YAAM,IAAIxC,KAAJ,CAAUlC,0BAAV,CAAN;AACD;;AAED,UAAMuF,OAAO,GAAG,KAAKC,cAAL,CAAoB;AAClCC,YAAM,EAAE,mBAD0B;AAElCC;AAFkC,KAApB,CAAhB;;AAKA,UAAMK,MAAM,GAAG,MAAM,KAAKC,gBAAL,CAAsBT,OAAtB,CAArB;AACA,WAAOQ,MAAP;AACD;;AAEuB,QAAXmC,WAAW,CAACC,WAAD,EAAgC;AACtD,QAAI,CAAC,KAAKzD,UAAV,EAAsB;AACpB,YAAM,IAAIxC,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAED,UAAMqD,OAAO,GAAG,KAAKC,cAAL,CAAoB;AAClCC,YAAM,EAAE,oBAD0B;AAElCC,YAAM,EAAE,CAACyC,WAAD;AAF0B,KAApB,CAAhB;;AAKA,UAAMpC,MAAM,GAAG,MAAM,KAAKC,gBAAL,CAAsBT,OAAtB,CAArB;AACA,WAAOQ,MAAP;AACD;;AAEMqC,YAAU,CACf7C,OADe,EAEf8C,OAFe,EAEU;AAEzB,SAAKZ,YAAL,CAAkBlC,OAAlB,EAA2B8C,OAA3B;;AAEA,SAAKrD,aAAL,CAAmBY,OAAnB,CAA2B;AACzBf,WAAK,EAAE,mBADkB;AAEzBa,YAAM,EAAE,CAAC;AAAEH,eAAF;AAAW8C;AAAX,OAAD;AAFiB,KAA3B;;AAKA,WAAO,IAAIjC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;AACrC,WAAKgC,oBAAL,CAA0B/C,OAAO,CAACI,EAAlC,EAAsC,CAACM,KAAD,EAAsBM,OAAtB,KAA6C;AACjF,YAAIN,KAAJ,EAAW;AACTK,gBAAM,CAACL,KAAD,CAAN;AACA;AACD;;AACD,YAAI,CAACM,OAAL,EAAc;AACZ,gBAAM,IAAIrE,KAAJ,CAAUhC,sBAAV,CAAN;AACD;;AACDmG,eAAO,CAACE,OAAD,CAAP;AACD,OATD;AAUD,KAXM,CAAP;AAYD;;AAE6B,QAAjBgC,iBAAiB,CAAChD,OAAD,EAAoC8C,OAApC,EAA6D;AACzF,QAAI,CAAC,KAAK3D,UAAV,EAAsB;AACpB,YAAM,IAAIxC,KAAJ,CAAUlC,0BAAV,CAAN;AACD;;AAED,YAAQuF,OAAO,CAACE,MAAhB;AACE,WAAK,cAAL;AACE,eAAO,KAAKpB,QAAZ;;AACF,WAAK,aAAL;AACE,eAAOhF,kBAAkB,CAAC,KAAK4E,OAAN,CAAzB;;AACF,WAAK,qBAAL;AACA,WAAK,qBAAL;AACE,YAAIsB,OAAO,CAACG,MAAZ,EAAoB;AAClBH,iBAAO,CAACG,MAAR,CAAe,CAAf,IAAoB7G,oBAAoB,CAAC0G,OAAO,CAACG,MAAR,CAAe,CAAf,CAAD,CAAxC;AACD;;AACD;;AACF,WAAK,eAAL;AACE,YAAIH,OAAO,CAACG,MAAZ,EAAoB;AAClBH,iBAAO,CAACG,MAAR,GAAiB9G,iBAAiB,CAAC2G,OAAO,CAACG,MAAT,CAAlC;AACD;;AACD;;AACF;AACE;AAjBJ;;AAoBA,UAAM8C,gBAAgB,GAAG,KAAKhD,cAAL,CAAoBD,OAApB,CAAzB;;AAEA,UAAMQ,MAAM,GAAG,MAAM,KAAKC,gBAAL,CAAsBwC,gBAAtB,EAAwCH,OAAxC,CAArB;AACA,WAAOtC,MAAP;AACD;;AAEM0C,gBAAc,CAAC3B,QAAD,EAA2C;AAC9D,QAAIxH,wBAAwB,CAACwH,QAAD,CAA5B,EAAwC;AACtC,YAAM4B,iBAAiB,GAAG,KAAKrB,eAAL,CAAqBP,QAArB,CAA1B;;AACA,WAAKE,aAAL,CAAmB0B,iBAAnB;AACD,KAHD,MAGO;AACL,YAAM,IAAIxG,KAAJ,CAAU/B,oBAAV,CAAN;AACD;AACF;;AAEMwI,eAAa,CAAC7B,QAAD,EAAyC;AAC3D,QAAIvH,sBAAsB,CAACuH,QAAD,CAA1B,EAAsC;AACpC,YAAM4B,iBAAiB,GAAG,KAAKrB,eAAL,CAAqBP,QAArB,CAA1B;;AACA,WAAKE,aAAL,CAAmB0B,iBAAnB;AACD,KAHD,MAGO;AACL,YAAM,IAAIxG,KAAJ,CAAU9B,mBAAV,CAAN;AACD;AACF;;AAEMwI,gBAAc;AACnB,SAAKtG,UAAL,CAAgBuG,KAAhB;AACD;;AAI2B,QAAZpB,YAAY,CAC1BlC,OAD0B,EAE1B8C,OAF0B,EAEgB;AAE1C,UAAMS,WAAW,GAAoB,KAAKtD,cAAL,CAAoBD,OAApB,CAArC;;AAEA,UAAMwD,iBAAiB,GAA8B,MAAM,KAAKC,QAAL,CAAcF,WAAd,CAA3D;AAEA,UAAMrC,KAAK,GAAW,QAAO4B,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAE5B,KAAhB,MAA0B,WAA1B,GAAwC4B,OAAO,CAAC5B,KAAhD,GAAwD,KAAKlD,MAAnF;AACA,UAAMgD,OAAO,GAAW0C,IAAI,CAACC,SAAL,CAAeH,iBAAf,CAAxB;AACA,UAAMI,MAAM,GACV,QAAOd,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEe,qBAAhB,MAA0C,WAA1C,GACI,CAACf,OAAO,CAACe,qBADb,GAEI5J,eAAe,CAACsJ,WAAD,CAHrB;;AAKA,SAAKxG,UAAL,CAAgB+G,IAAhB,CAAqB9C,OAArB,EAA8BE,KAA9B,EAAqC0C,MAArC;AACD;;AAE4B,QAAbnC,aAAa,CAACF,QAAD,EAA0D;AACrF,UAAMiC,iBAAiB,GAA8B,MAAM,KAAKC,QAAL,CAAclC,QAAd,CAA3D;AAEA,UAAML,KAAK,GAAW,KAAKlD,MAA3B;AACA,UAAMgD,OAAO,GAAW0C,IAAI,CAACC,SAAL,CAAeH,iBAAf,CAAxB;AACA,UAAMI,MAAM,GAAG,IAAf;;AAEA,SAAK7G,UAAL,CAAgB+G,IAAhB,CAAqB9C,OAArB,EAA8BE,KAA9B,EAAqC0C,MAArC;AACD;;AAEkC,QAAnB3C,mBAAmB,CACjCjB,OADiC,EAEjC+D,QAFiC,EAGjCjB,OAHiC,EAGA;AAEjC,SAAKZ,YAAL,CAAkBlC,OAAlB,EAA2B8C,OAA3B;;AACA,SAAKhG,2BAAL,CAAiCkD,OAAO,CAACI,EAAzC,EAA6C2D,QAA7C;AACD;;AAEStD,kBAAgB,CAACT,OAAD,EAA2B8C,OAA3B,EAAoD;AAC5E,SAAKZ,YAAL,CAAkBlC,OAAlB,EAA2B8C,OAA3B;;AAEA,SAAKrD,aAAL,CAAmBY,OAAnB,CAA2B;AACzBf,WAAK,EAAE,mBADkB;AAEzBa,YAAM,EAAE,CAAC;AAAEH,eAAF;AAAW8C;AAAX,OAAD;AAFiB,KAA3B;;AAKA,WAAO,KAAKkB,wBAAL,CAA8BhE,OAAO,CAACI,EAAtC,CAAP;AACD;;AAESH,gBAAc,CAACD,OAAD,EAAkC;AACxD,QAAI,OAAOA,OAAO,CAACE,MAAf,KAA0B,WAA9B,EAA2C;AACzC,YAAM,IAAIvD,KAAJ,CAAU7B,oBAAV,CAAN;AACD;;AACD,UAAMmI,gBAAgB,GAAoB;AACxC7C,QAAE,EAAE,OAAOJ,OAAO,CAACI,EAAf,KAAsB,WAAtB,GAAoC1G,SAAS,EAA7C,GAAkDsG,OAAO,CAACI,EADtB;AAExCoB,aAAO,EAAE,KAF+B;AAGxCtB,YAAM,EAAEF,OAAO,CAACE,MAHwB;AAIxCC,YAAM,EAAE,OAAOH,OAAO,CAACG,MAAf,KAA0B,WAA1B,GAAwC,EAAxC,GAA6CH,OAAO,CAACG;AAJrB,KAA1C;AAMA,WAAO8C,gBAAP;AACD;;AAESnB,iBAAe,CACvBP,QADuB,EAC2C;AAElE,QAAI,OAAOA,QAAQ,CAACnB,EAAhB,KAAuB,WAA3B,EAAwC;AACtC,YAAM,IAAIzD,KAAJ,CAAU5B,gBAAV,CAAN;AACD;;AAED,UAAMkJ,YAAY,GAAG;AAAE7D,QAAE,EAAEmB,QAAQ,CAACnB,EAAf;AAAmBoB,aAAO,EAAE;AAA5B,KAArB;;AAEA,QAAIxH,sBAAsB,CAACuH,QAAD,CAA1B,EAAsC;AACpC,YAAMb,KAAK,GAAG9G,cAAc,CAAC2H,QAAQ,CAACb,KAAV,CAA5B;AAEA,YAAMwD,aAAa,iDACdD,YADc,GAEd1C,QAFc,GAEN;AACXb;AADW,OAFM,CAAnB;AAKA,aAAOwD,aAAP;AACD,KATD,MASO,IAAInK,wBAAwB,CAACwH,QAAD,CAA5B,EAAwC;AAC7C,YAAM4C,eAAe,mCAChBF,YADgB,GAEhB1C,QAFgB,CAArB;AAKA,aAAO4C,eAAP;AACD;;AAED,UAAM,IAAIxH,KAAJ,CAAU3B,sBAAV,CAAN;AACD;;AAEOmH,0BAAwB,CAAC4B,QAAD,EAAkB;AAChD,UAAMlC,OAAO,GAAGkC,QAAQ,IAAI,sBAA5B;;AACA,QAAI,CAAC,KAAK5E,UAAV,EAAsB;AACpB,UAAI,KAAKhD,YAAT,EAAuB;AACrB,aAAKA,YAAL,CAAkBmH,KAAlB;AACD;;AACDhJ,iBAAW,CAACF,mBAAD,CAAX;AACD;;AACD,QAAI,KAAK+E,UAAT,EAAqB;AACnB,WAAKA,UAAL,GAAkB,KAAlB;AACD;;AACD,QAAI,KAAKb,YAAT,EAAuB;AACrB,WAAKA,YAAL,GAAoB,CAApB;AACD;;AACD,QAAI,KAAKD,eAAT,EAA0B;AACxB,WAAKA,eAAL,GAAuB,EAAvB;AACD;;AACD,QAAI,KAAKJ,OAAT,EAAkB;AAChB,WAAKA,OAAL,GAAe,EAAf;AACD;;AACD,SAAKwB,aAAL,CAAmBY,OAAnB,CAA2B;AACzBf,WAAK,EAAE,YADkB;AAEzBa,YAAM,EAAE,CAAC;AAAE0B;AAAF,OAAD;AAFiB,KAA3B;;AAIA,SAAKE,qBAAL;;AACA,SAAKsB,cAAL;AACD;;AAEOe,wBAAsB,CAACL,QAAD,EAAmB1C,aAAnB,EAAiD;AAC7E,QAAIA,aAAJ,EAAmB;AACjB,UAAIA,aAAa,CAACC,QAAlB,EAA4B;AAC1B,YAAI,CAAC,KAAKnC,UAAV,EAAsB;AACpB,eAAKA,UAAL,GAAkB,IAAlB;;AAEA,cAAIkC,aAAa,CAAC3C,OAAlB,EAA2B;AACzB,iBAAKA,OAAL,GAAe2C,aAAa,CAAC3C,OAA7B;AACD;;AAED,cAAI2C,aAAa,CAACvC,QAAlB,EAA4B;AAC1B,iBAAKA,QAAL,GAAgBuC,aAAa,CAACvC,QAA9B;AACD;;AAED,cAAIuC,aAAa,CAACrD,MAAd,IAAwB,CAAC,KAAKA,MAAlC,EAA0C;AACxC,iBAAKA,MAAL,GAAcqD,aAAa,CAACrD,MAA5B;AACD;;AAED,cAAIqD,aAAa,CAACnD,QAAd,IAA0B,CAAC,KAAKA,QAApC,EAA8C;AAC5C,iBAAKA,QAAL,GAAgBmD,aAAa,CAACnD,QAA9B;AACD;;AAED,eAAKuB,aAAL,CAAmBY,OAAnB,CAA2B;AACzBf,iBAAK,EAAE,SADkB;AAEzBa,kBAAM,EAAE,CACN;AACEnC,oBAAM,EAAE,KAAKA,MADf;AAEEE,sBAAQ,EAAE,KAAKA,QAFjB;AAGEQ,qBAAO,EAAE,KAAKA,OAHhB;AAIEI,sBAAQ,EAAE,KAAKA;AAJjB,aADM;AAFiB,WAA3B;AAWD,SA9BD,MA8BO;AACL,cAAIuC,aAAa,CAAC3C,OAAlB,EAA2B;AACzB,iBAAKA,OAAL,GAAe2C,aAAa,CAAC3C,OAA7B;AACD;;AACD,cAAI2C,aAAa,CAACvC,QAAlB,EAA4B;AAC1B,iBAAKA,QAAL,GAAgBuC,aAAa,CAACvC,QAA9B;AACD;;AAED,eAAKW,aAAL,CAAmBY,OAAnB,CAA2B;AACzBf,iBAAK,EAAE,gBADkB;AAEzBa,kBAAM,EAAE,CACN;AACEzB,qBAAO,EAAE,KAAKA,OADhB;AAEEI,sBAAQ,EAAE,KAAKA;AAFjB,aADM;AAFiB,WAA3B;AASD;;AAED,aAAKmD,qBAAL;AACD,OAnDD,MAmDO;AACL,aAAKE,wBAAL,CAA8B4B,QAA9B;AACD;AACF,KAvDD,MAuDO;AACL,WAAK5B,wBAAL,CAA8B4B,QAA9B;AACD;AACF;;AAEoC,QAAvBM,uBAAuB,CAACC,aAAD,EAA8B;AACjE,UAAMC,YAAY,GAAG,CAAC,KAAKlH,QAAN,EAAgB,KAAKe,cAArB,CAArB;;AAEA,QAAI,CAACmG,YAAY,CAACC,QAAb,CAAsBF,aAAa,CAACpD,KAApC,CAAL,EAAiD;AAC/C;AACD;;AAED,QAAIsC,iBAAJ;;AACA,QAAI;AACFA,uBAAiB,GAAGE,IAAI,CAACe,KAAL,CAAWH,aAAa,CAACtD,OAAzB,CAApB;AACD,KAFD,CAEE,OAAON,KAAP,EAAc;AACd;AACD;;AAED,UAAMM,OAAO,GAIF,MAAM,KAAK0D,QAAL,CAAclB,iBAAd,CAJjB;;AAMA,QAAIxC,OAAJ,EAAa;AACX,WAAKvB,aAAL,CAAmBY,OAAnB,CAA2BW,OAA3B;AACD;AACF;;AAEOxD,4BAA0B;AAChC,SAAKT,UAAL,CAAgB2C,SAAhB,CAA0B,KAAKtB,cAA/B;AACD;;AAEO2E,sBAAoB,CAC1B3C,EAD0B,EAE1Bb,QAF0B,EAEkC;AAE5D,SAAKF,EAAL,CAAQ,YAAYe,EAAE,EAAtB,EAA0Bb,QAA1B;AACD;;AAEOzC,6BAA2B,CAACsD,EAAD,EAAa2D,QAAb,EAA6B;AAC9D,SAAKhB,oBAAL,CAA0B3C,EAA1B,EAA8B,CAACM,KAAD,EAAQM,OAAR,KAAmB;AAC/C,UAAIN,KAAJ,EAAW;AACT,aAAK0D,sBAAL,CAA4B1D,KAAK,CAACmB,OAAlC;;AACA;AACD;;AACD,UAAI9H,wBAAwB,CAACiH,OAAD,CAA5B,EAAuC;AACrC,aAAKoD,sBAAL,CAA4BL,QAA5B,EAAsC/C,OAAO,CAACR,MAA9C;AACD,OAFD,MAEO,IAAIQ,OAAO,CAACN,KAAR,IAAiBM,OAAO,CAACN,KAAR,CAAcmB,OAAnC,EAA4C;AACjD,aAAKuC,sBAAL,CAA4BpD,OAAO,CAACN,KAAR,CAAcmB,OAA1C;AACD,OAFM,MAEA;AACL,aAAKuC,sBAAL,CAA4BL,QAA5B;AACD;AACF,KAZD;AAaD;;AAEOC,0BAAwB,CAAC5D,EAAD,EAAW;AACzC,WAAO,IAAIS,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;AACrC,WAAKgC,oBAAL,CAA0B3C,EAA1B,EAA8B,CAACM,KAAD,EAAQM,OAAR,KAAmB;AAC/C,YAAIN,KAAJ,EAAW;AACTK,gBAAM,CAACL,KAAD,CAAN;AACA;AACD;;AACD,YAAI3G,wBAAwB,CAACiH,OAAD,CAA5B,EAAuC;AACrCF,iBAAO,CAACE,OAAO,CAACR,MAAT,CAAP;AACD,SAFD,MAEO,IAAIQ,OAAO,CAACN,KAAR,IAAiBM,OAAO,CAACN,KAAR,CAAcmB,OAAnC,EAA4C;AACjDd,gBAAM,CAAC,IAAIpE,KAAJ,CAAUqE,OAAO,CAACN,KAAR,CAAcmB,OAAxB,CAAD,CAAN;AACD,SAFM,MAEA;AACLd,gBAAM,CAAC,IAAIpE,KAAJ,CAAU3B,sBAAV,CAAD,CAAN;AACD;AACF,OAZD;AAaD,KAdM,CAAP;AAeD;;AAEOsC,4BAA0B;AAChC,SAAK+B,EAAL,CAAQ,aAAR,EAAuB,MAAK;AAC1B,UAAI,KAAKlD,YAAT,EAAuB;AACrB,aAAKA,YAAL,CAAkBwI,IAAlB,CACE,KAAKlI,GADP,EAEE,MAAK;AACH,eAAKgD,aAAL,CAAmBY,OAAnB,CAA2B;AACzBf,iBAAK,EAAE,cADkB;AAEzBa,kBAAM,EAAE;AAFiB,WAA3B;AAID,SAPH,EAQE,KAAK9D,mBARP;AAUD;AACF,KAbD;AAeA,SAAKgD,EAAL,CAAQ,SAAR,EAAmB,MAAK;AACtB,UAAI,KAAKlD,YAAT,EAAuB;AACrB,aAAKA,YAAL,CAAkBmH,KAAlB;AACD;AACF,KAJD;AAMA,SAAKjE,EAAL,CAAQ,mBAAR,EAA6B,CAACqB,KAAD,EAAQM,OAAR,KAAmB;AAC9C,YAAM;AAAEhB;AAAF,UAAcgB,OAAO,CAACb,MAAR,CAAe,CAAf,CAApB;;AACA,UAAI9F,QAAQ,MAAM,KAAKkC,eAAL,CAAqBiI,QAArB,CAA8BxE,OAAO,CAACE,MAAtC,CAAlB,EAAiE;AAC/D,cAAM0E,aAAa,GAAG1K,QAAQ,CAACE,mBAAD,CAA9B;;AACA,YAAIwK,aAAJ,EAAmB;AACjBC,gBAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuBH,aAAa,CAACG,IAArC;AACD;AACF;AACF,KARD;AAUA,SAAK1F,EAAL,CAAQ,mBAAR,EAA6B,CAACqB,KAAD,EAAQM,OAAR,KAAmB;AAC9C,UAAIN,KAAJ,EAAW;AACT,aAAKjB,aAAL,CAAmBY,OAAnB,CAA2B;AACzBf,eAAK,EAAE,OADkB;AAEzBa,gBAAM,EAAE,CACN;AACE6E,gBAAI,EAAE,uBADR;AAEEnD,mBAAO,EAAEnB,KAAK,CAACuE,QAAN;AAFX,WADM;AAFiB,SAA3B;AASD;;AACD,WAAKpI,WAAL,GAAmBmE,OAAO,CAACZ,EAA3B;AACA,WAAKpC,MAAL,GAAcgD,OAAO,CAACb,MAAR,CAAe,CAAf,EAAkBnC,MAAhC;AACA,WAAKE,QAAL,GAAgB8C,OAAO,CAACb,MAAR,CAAe,CAAf,EAAkBjC,QAAlC;AAEA,YAAMgH,eAAe,mCAChBlE,OADgB,GACT;AACVd,cAAM,EAAE;AADE,OADS,CAArB;;AAIA,WAAKT,aAAL,CAAmBY,OAAnB,CAA2B6E,eAA3B;AACD,KArBD;AAuBA,SAAK7F,EAAL,CAAQ,kBAAR,EAA4B,CAACqB,KAAD,EAAQM,OAAR,KAAmB;AAC7C,UAAIN,KAAJ,EAAW;AACT,aAAK0D,sBAAL,CAA4B1D,KAAK,CAACmB,OAAlC;AACD;;AACD,WAAKuC,sBAAL,CAA4B,sBAA5B,EAAoDpD,OAAO,CAACb,MAAR,CAAe,CAAf,CAApD;AACD,KALD;AAMD;;AAEO5C,gBAAc;AACpB,SAAKR,UAAL,CAAgBsC,EAAhB,CAAmB,SAAnB,EAA+BiF,aAAD,IAC5B,KAAKD,uBAAL,CAA6BC,aAA7B,CADF;;AAIA,SAAKvH,UAAL,CAAgBsC,EAAhB,CAAmB,MAAnB,EAA2B,MACzB,KAAKI,aAAL,CAAmBY,OAAnB,CAA2B;AAAEf,WAAK,EAAE,gBAAT;AAA2Ba,YAAM,EAAE;AAAnC,KAA3B,CADF;;AAIA,SAAKpD,UAAL,CAAgBsC,EAAhB,CAAmB,OAAnB,EAA4B,MAC1B,KAAKI,aAAL,CAAmBY,OAAnB,CAA2B;AAAEf,WAAK,EAAE,iBAAT;AAA4Ba,YAAM,EAAE;AAApC,KAA3B,CADF;;AAIA,SAAKpD,UAAL,CAAgBsC,EAAhB,CAAmB,OAAnB,EAA4B,MAC1B,KAAKI,aAAL,CAAmBY,OAAnB,CAA2B;AACzBf,WAAK,EAAE,iBADkB;AAEzBa,YAAM,EAAE,CAAC,6BAAD;AAFiB,KAA3B,CADF;;AAOA,SAAKpD,UAAL,CAAgB4H,IAAhB;AACD;;AAIOnG,YAAU;AAChB,UAAMvB,QAAQ,GAAG,KAAKA,QAAtB;AACA,UAAMmB,cAAc,GAAG,KAAKA,cAA5B;AACA,UAAMlB,OAAO,GAAG,KAAKA,OAArB;AACA,UAAMV,MAAM,GAAG2I,kBAAkB,CAAC,KAAK3I,MAAN,CAAjC;AACA,UAAMqB,GAAG,GAAG,KAAKA,GAAjB;AACA,UAAMpB,GAAG,GAAG,GAAGQ,QAAQ,IAAImB,cAAc,IAAIlB,OAAO,WAAWV,MAAM,QAAQqB,GAAG,EAAhF;AACA,WAAOpB,GAAP;AACD;;AAEOgC,WAAS,CAAChC,GAAD,EAAY;AAC3B,UAAM+D,MAAM,GAAoB3G,qBAAqB,CAAC4C,GAAD,CAArD;;AAEA,QAAI+D,MAAM,CAACvD,QAAP,KAAoB,KAAKA,QAA7B,EAAuC;AACrC,UAAI,CAACuD,MAAM,CAACpC,cAAZ,EAA4B;AAC1B,cAAMzB,KAAK,CAAC,mDAAD,CAAX;AACD;;AACD,YAAMyB,cAAc,GAAGoC,MAAM,CAACpC,cAA9B;;AAEA,UAAI,CAACoC,MAAM,CAAChE,MAAZ,EAAoB;AAClB,cAAMG,KAAK,CAAC,+CAAD,CAAX;AACD;;AACD,YAAMH,MAAM,GAAG4I,kBAAkB,CAAC5E,MAAM,CAAChE,MAAR,CAAjC;;AAEA,UAAI,CAACgE,MAAM,CAAC3C,GAAZ,EAAiB;AACf,cAAMlB,KAAK,CAAC,wCAAD,CAAX;AACD;;AACD,YAAMkB,GAAG,GAAG2C,MAAM,CAAC3C,GAAnB;AAEA,aAAO;AAAEO,sBAAF;AAAkB5B,cAAlB;AAA0BqB;AAA1B,OAAP;AACD,KAjBD,MAiBO;AACL,YAAM,IAAIlB,KAAJ,CAAU1B,iBAAV,CAAN;AACD;AACF;;AAIyB,QAAZ8E,YAAY;AACxB,QAAI,KAAKjE,UAAT,EAAqB;AACnB,YAAM0E,MAAM,GAAG,MAAM,KAAK1E,UAAL,CAAgBuJ,WAAhB,EAArB;AACA,aAAO7E,MAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAEqB,QAARiD,QAAQ,CACpB6B,IADoB,EACmD;AAEvE,UAAMzH,GAAG,GAAuB,KAAKC,IAArC;;AACA,QAAI,KAAKhC,UAAL,IAAmB+B,GAAvB,EAA4B;AAC1B,YAAM2C,MAAM,GAAuB,MAAM,KAAK1E,UAAL,CAAgByJ,OAAhB,CAAwBD,IAAxB,EAA8BzH,GAA9B,CAAzC;AACA,aAAO2C,MAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAEqB,QAARkE,QAAQ,CACpB1D,OADoB,EACO;AAE3B,UAAMnD,GAAG,GAAuB,KAAKC,IAArC;;AACA,QAAI,KAAKhC,UAAL,IAAmB+B,GAAvB,EAA4B;AAC1B,YAAM2C,MAAM,GAID,MAAM,KAAK1E,UAAL,CAAgB0J,OAAhB,CAAwBxE,OAAxB,EAAiCnD,GAAjC,CAJjB;AAKA,aAAO2C,MAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAIO5D,oBAAkB;AACxB,QAAI4D,MAAM,GAAiC,IAA3C;;AACA,QAAI,KAAKxE,eAAT,EAA0B;AACxBwE,YAAM,GAAG,KAAKxE,eAAL,CAAqByJ,UAArB,EAAT;AACD;;AACD,WAAOjF,MAAP;AACD;;AAEOkB,oBAAkB;AACxB,QAAI,KAAK1F,eAAT,EAA0B;AACxB,WAAKA,eAAL,CAAqB0J,UAArB,CAAgC,KAAKhJ,OAArC;AACD;AACF;;AAEOqF,uBAAqB;AAC3B,QAAI,KAAK/F,eAAT,EAA0B;AACxB,WAAKA,eAAL,CAAqB2J,aAArB;AACD;AACF;;AAEO1D,uBAAqB;AAC3B,QAAI,KAAK9C,UAAT,EAAqB;AACnB,WAAKuC,kBAAL;AACD,KAFD,MAEO;AACL,WAAKK,qBAAL;AACD;AACF;;AAIOrE,qBAAmB,CAACD,cAAD,EAAmC;AAC5D,QAAI,CAACA,cAAc,CAACN,GAAhB,IAAuB,OAAOM,cAAc,CAACN,GAAtB,KAA8B,QAAzD,EAAmE;AACjE,YAAMR,KAAK,CAAC,uDAAD,CAAX;AACD;;AAED,QAAI,CAACc,cAAc,CAACmI,IAAhB,IAAwB,OAAOnI,cAAc,CAACmI,IAAtB,KAA+B,QAA3D,EAAqE;AACnE,YAAMjJ,KAAK,CAAC,wDAAD,CAAX;AACD;;AAED,QAAI,CAACc,cAAc,CAACoI,KAAhB,IAAyB,OAAOpI,cAAc,CAACoI,KAAtB,KAAgC,QAA7D,EAAuE;AACrE,YAAMlJ,KAAK,CAAC,yDAAD,CAAX;AACD;;AAED,UAAMmJ,gBAAgB,GAAsB;AAC1CtJ,YAAM,EAAE,KAAKA,MAD6B;AAE1C0E,WAAK,EAAE,KAAK7D,QAF8B;AAG1CuI,UAAI,EAAEnI,cAAc,CAACmI,IAHqB;AAI1CC,WAAK,EAAEpI,cAAc,CAACoI,KAJoB;AAK1CE,cAAQ,EAAE,EALgC;AAM1CC,cAAQ,EAAEvI,cAAc,CAACuI,QAAf,IAA2B;AANK,KAA5C;AASA,SAAK3G,EAAL,CAAQ,SAAR,EAAmB,OAAOqB,KAAP,EAA4BM,OAA5B,KAA4C;AAC7D,UAAIN,KAAJ,EAAW;AACT,cAAMA,KAAN;AACD;;AAED,UAAIjD,cAAc,CAACS,QAAnB,EAA6B;AAC3B,cAAM6H,QAAQ,GAAG/E,OAAO,CAACb,MAAR,CAAe,CAAf,EAAkBjC,QAAlB,CAA2B+H,IAA5C;AACAH,wBAAgB,CAACC,QAAjB,GAA4BA,QAA5B;AACD;;AAED,UAAI;AACF,cAAMxE,QAAQ,GAAG,MAAM2E,KAAK,CAAC,GAAGzI,cAAc,CAACN,GAAG,MAAtB,EAA8B;AACxD+C,gBAAM,EAAE,MADgD;AAExDiG,iBAAO,EAAE;AACPC,kBAAM,EAAE,kBADD;AAEP,4BAAgB;AAFT,WAF+C;AAMxDC,cAAI,EAAE3C,IAAI,CAACC,SAAL,CAAemC,gBAAf;AANkD,SAA9B,CAA5B;AASA,cAAMQ,IAAI,GAAG,MAAM/E,QAAQ,CAAC+E,IAAT,EAAnB;;AACA,YAAI,CAACA,IAAI,CAACC,OAAV,EAAmB;AACjB,gBAAM5J,KAAK,CAAC,mCAAD,CAAX;AACD;AACF,OAdD,CAcE,OAAO+D,KAAP,EAAc;AACd,cAAM/D,KAAK,CAAC,mCAAD,CAAX;AACD;AACF,KA3BD;AA4BD;;AArrCY;;AAurCf,eAAenB,SAAf","names":["parsePersonalSign","parseTransactionData","convertArrayBufferToHex","convertHexToArrayBuffer","getClientMeta","payloadId","uuid","formatRpcError","parseWalletConnectUri","convertNumberToHex","isJsonRpcResponseSuccess","isJsonRpcResponseError","isSilentPayload","getLocal","signingMethods","mobileLinkChoiceKey","isMobile","removeLocal","SocketTransport","ERROR_SESSION_CONNECTED","ERROR_SESSION_DISCONNECTED","ERROR_SESSION_REJECTED","ERROR_MISSING_JSON_RPC","ERROR_MISSING_RESULT","ERROR_MISSING_ERROR","ERROR_MISSING_METHOD","ERROR_MISSING_ID","ERROR_INVALID_RESPONSE","ERROR_INVALID_URI","ERROR_MISSING_REQUIRED","ERROR_QRCODE_MODAL_NOT_PROVIDED","ERROR_QRCODE_MODAL_USER_CLOSED","EventManager","SessionStorage","getBridgeUrl","Connector","constructor","opts","_clientMeta","connectorOpts","clientMeta","_cryptoLib","cryptoLib","_sessionStorage","sessionStorage","storageId","_qrcodeModal","qrcodeModal","_qrcodeModalOptions","qrcodeModalOptions","_signingMethods","bridge","uri","session","Error","_getStorageSession","handshakeId","_subscribeToSessionResponse","_transport","transport","protocol","version","url","subscriptions","clientId","_subscribeToInternalEvents","_initTransport","_subscribeToSessionRequest","pushServerOpts","_registerPushServer","value","_bridge","key","_key","_clientId","peerId","_peerId","peerMeta","_peerMeta","handshakeTopic","_handshakeTopic","_handshakeId","_uri","_formatUri","_parseUri","chainId","_chainId","networkId","_networkId","accounts","_accounts","rpcUrl","_rpcUrl","connected","_connected","pending","on","event","callback","eventEmitter","_eventManager","subscribe","off","unsubscribe","createInstantRequest","instantRequest","_generateKey","request","_formatRequest","method","params","id","trigger","endInstantRequest","killSession","result","_sendCallRequest","error","connect","createSession","Promise","resolve","reject","payload","_sendSessionRequest","topic","approveSession","sessionStatus","sessionParams","approved","response","jsonrpc","_sendResponse","_setStorageSession","rejectSession","sessionError","message","_formatResponse","_removeStorageSession","updateSession","_manageStorageSession","_sendRequest","_handleSessionDisconnect","sendTransaction","tx","parsedTx","signTransaction","signMessage","signPersonalMessage","signTypedData","updateChain","chainParams","unsafeSend","options","_subscribeToResponse","sendCustomRequest","formattedRequest","approveRequest","formattedResponse","rejectRequest","transportClose","close","callRequest","encryptionPayload","_encrypt","JSON","stringify","silent","forcePushNotification","send","errorMsg","_subscribeToCallResponse","baseResponse","errorResponse","successResponse","_handleSessionResponse","_handleIncomingMessages","socketMessage","activeTopics","includes","parse","_decrypt","open","mobileLinkUrl","window","location","href","code","toString","internalPayload","encodeURIComponent","decodeURIComponent","generateKey","data","encrypt","decrypt","getSession","setSession","removeSession","type","token","pushSubscription","peerName","language","name","fetch","headers","Accept","body","json","success"],"sourceRoot":"","sources":["../../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}