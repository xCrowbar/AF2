{"ast":null,"code":"/** PURE_IMPORTS_START _ReplaySubject PURE_IMPORTS_END */\nimport { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n  var config;\n\n  if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n    config = configOrBufferSize;\n  } else {\n    config = {\n      bufferSize: configOrBufferSize,\n      windowTime: windowTime,\n      refCount: false,\n      scheduler: scheduler\n    };\n  }\n\n  return function (source) {\n    return source.lift(shareReplayOperator(config));\n  };\n}\n\nfunction shareReplayOperator(_a) {\n  var _b = _a.bufferSize,\n      bufferSize = _b === void 0 ? Number.POSITIVE_INFINITY : _b,\n      _c = _a.windowTime,\n      windowTime = _c === void 0 ? Number.POSITIVE_INFINITY : _c,\n      useRefCount = _a.refCount,\n      scheduler = _a.scheduler;\n  var subject;\n  var refCount = 0;\n  var subscription;\n  var hasError = false;\n  var isComplete = false;\n  return function shareReplayOperation(source) {\n    refCount++;\n    var innerSub;\n\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n      innerSub = subject.subscribe(this);\n      subscription = source.subscribe({\n        next: function (value) {\n          subject.next(value);\n        },\n        error: function (err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete: function () {\n          isComplete = true;\n          subscription = undefined;\n          subject.complete();\n        }\n      });\n\n      if (isComplete) {\n        subscription = undefined;\n      }\n    } else {\n      innerSub = subject.subscribe(this);\n    }\n\n    this.add(function () {\n      refCount--;\n      innerSub.unsubscribe();\n      innerSub = undefined;\n\n      if (subscription && !isComplete && useRefCount && refCount === 0) {\n        subscription.unsubscribe();\n        subscription = undefined;\n        subject = undefined;\n      }\n    });\n  };\n}","map":{"version":3,"mappings":"AACA;AAiEA,SAAMA,aAAN,QACE,kBADF;OAKE,SAA8BC,WAA9B,CAA8BC,kBAA9B,EAA8BC,UAA9B,EAA8BC,SAA9B,EAA8B;AAC9B,MAAIC,MAAJ;;MACEH,kBAAS,WAAwCA,kBAAxC,KAAwC;AAClDG;SACC;UACE;AACAC,gBAAU,oBADV;AAEAH,gBAAU,YAFV;AAGAI,gBAAS,KAHT;AAIAH;AAJA;AAMJ;;AACD;AAAA;AAAA;AAED;;SACEI;AAKA,MAAIC,OAAqC,CAACH,UAA1C;AAAA,MAA0CA,0DAA1C;AAAA,MAA0CI,kBAA1C;AAAA,MAA0CP,0DAA1C;AAAA,MAA0CQ,yBAA1C;AAAA,MAA0CP,wBAA1C;AACA,MAAIQ,OAAJ;AACA,MAAIL,YAAJ;AACA,MAAIM,YAAJ;AACA,MAAIC,WAAU,KAAd;AAEA,gBAAO,GAAS,KAAhB;SAIE,SAAWC,oBAAX,CAAWC,MAAX,EAAW;AACXT,YAAI;AACJ,QAAIU,QAAJ;;QACE,YAAWH,UAAM;AACjBA,cAAO,GAAG,KAAV;AACAF,gBAAQ,IAAGZ,aAAH,CAAoBM,UAApB,EAA2BH,UAA3B,EAA2BC,SAA3B,CAAR;AACAa,wBAAe,UAAf,CAAsB,IAAtB;kBACM,SAAC,UAAD,CAAM;YACR,YAAYC,KAAZ,EAAmB;AACpBN;AACD,SAHU;aAIR,YAAWO,GAAX,EAAgB;AAChBL,kBAAQ,OAAR;AACDF;AACD,SAPU;gBAQR,cAAkB;AAClBQ,uBAAY,IAAZ;AACAP,sBAAQ,YAAR;AACDD;AACA;AAZS,OAAN;;UAmBJQ,YAAY;AACbP;AACF;WACC;AACDI;AAED;;SACEI,gBAAW;AACXd,cAAQ;AACRU,cAAQ,YAAR;AACAA,cAAI,YAAJ;;UACEJ,YAAY,IAAC,WAAb,IAA2BF,WAA3B,IAA2BJ;AAC3BM,oBAAY,YAAZ;AACAA,oBAAU,YAAV;AACDD;AACA;AACH;AACH","names":["ReplaySubject","shareReplay","configOrBufferSize","windowTime","scheduler","config","bufferSize","refCount","shareReplayOperator","_b","_c","useRefCount","subject","subscription","hasError","shareReplayOperation","source","innerSub","value","err","isComplete","add"],"sources":["../../../src/internal/operators/shareReplay.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}