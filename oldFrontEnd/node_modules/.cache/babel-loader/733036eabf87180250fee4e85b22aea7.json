{"ast":null,"code":"var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n/* eslint-disable */\n\n/* istanbul ignore next  */\n\nfunction fromByteArray(uint8) {\n  var i;\n  var extraBytes = uint8.length % 3; // if we have 1 byte left, pad 2 bytes\n\n  var output = '';\n  var temp;\n  var length;\n\n  function encode(num) {\n    return lookup.charAt(num);\n  }\n\n  function tripletToBase64(num) {\n    return encode(num >> 18 & 0x3f) + encode(num >> 12 & 0x3f) + encode(num >> 6 & 0x3f) + encode(num & 0x3f);\n  } // go through the array every three bytes, we'll deal with trailing stuff later\n\n\n  for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n    temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];\n    output += tripletToBase64(temp);\n  } // pad the end with zeros, but make sure to not forget the extra bytes\n\n\n  switch (extraBytes) {\n    case 1:\n      temp = uint8[uint8.length - 1];\n      output += encode(temp >> 2);\n      output += encode(temp << 4 & 0x3f);\n      output += '==';\n      break;\n\n    case 2:\n      temp = (uint8[uint8.length - 2] << 8) + uint8[uint8.length - 1];\n      output += encode(temp >> 10);\n      output += encode(temp >> 4 & 0x3f);\n      output += encode(temp << 2 & 0x3f);\n      output += '=';\n      break;\n\n    default:\n      break;\n  }\n\n  return output;\n}\n/* istanbul ignore next  */\n\n\nfunction b64enc(buf) {\n  return fromByteArray(buf).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n/* istanbul ignore next  */\n\n\nfunction b64RawEnc(buf) {\n  return fromByteArray(buf).replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n/* istanbul ignore next  */\n\n\nfunction hexEncode(buf) {\n  return Array.from(buf).map(function (x) {\n    return (\"0\" + x.toString(16)).substr(-2);\n  }).join('');\n}\n/**\n * Transforms the binary data in the credential into base64 strings\n * for posting to the server.\n * @param {PublicKeyCredential} newAssertion\n */\n\n/* istanbul ignore next  */\n\n\nexport var transformNewAssertionForServer = function (newAssertion) {\n  var attObj = new Uint8Array(newAssertion.response.attestationObject);\n  var clientDataJSON = new Uint8Array(newAssertion.response.clientDataJSON);\n  var rawId = new Uint8Array(newAssertion.rawId);\n  var registrationClientExtensions = newAssertion.getClientExtensionResults();\n  return {\n    id: newAssertion.id,\n    rawId: b64enc(rawId),\n    type: newAssertion.type,\n    attObj: b64enc(attObj),\n    clientData: b64enc(clientDataJSON),\n    registrationClientExtensions: JSON.stringify(registrationClientExtensions)\n  };\n};\n/**\n * Encodes the binary data in the assertion into strings for posting to the server.\n * @param {PublicKeyCredential} newAssertion\n */\n\n/* istanbul ignore next  */\n\nexport var transformAssertionForServer = function (newAssertion) {\n  var authData = new Uint8Array(newAssertion.response.authenticatorData);\n  var clientDataJSON = new Uint8Array(newAssertion.response.clientDataJSON);\n  var rawId = new Uint8Array(newAssertion.rawId);\n  var sig = new Uint8Array(newAssertion.response.signature);\n  var assertionClientExtensions = newAssertion.getClientExtensionResults();\n  return {\n    id: newAssertion.id,\n    rawId: b64enc(rawId),\n    type: newAssertion.type,\n    authData: b64RawEnc(authData),\n    clientData: b64RawEnc(clientDataJSON),\n    signature: hexEncode(sig),\n    assertionClientExtensions: JSON.stringify(assertionClientExtensions)\n  };\n};","map":{"version":3,"mappings":"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","names":["lookup","fromByteArray","uint8","i","extraBytes","length","output","temp","encode","num","charAt","tripletToBase64","b64enc","buf","replace","b64RawEnc","hexEncode","Array","from","map","x","toString","substr","join","transformNewAssertionForServer","newAssertion","attObj","Uint8Array","response","attestationObject","clientDataJSON","rawId","registrationClientExtensions","getClientExtensionResults","id","type","clientData","JSON","stringify","transformAssertionForServer","authData","authenticatorData","sig","signature","assertionClientExtensions"],"sourceRoot":"","sources":["../../../src/util/webauthn.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}