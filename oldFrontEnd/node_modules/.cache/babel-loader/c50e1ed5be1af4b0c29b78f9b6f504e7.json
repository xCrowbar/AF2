{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ethErrors = void 0;\n\nconst classes_1 = require(\"./classes\");\n\nconst utils_1 = require(\"./utils\");\n\nconst error_constants_1 = require(\"./error-constants\");\n\nexports.ethErrors = {\n  rpc: {\n    /**\n     * Get a JSON RPC 2.0 Parse (-32700) error.\n     */\n    parse: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.parse, arg),\n\n    /**\n     * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n     */\n    invalidRequest: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidRequest, arg),\n\n    /**\n     * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n     */\n    invalidParams: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidParams, arg),\n\n    /**\n     * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n     */\n    methodNotFound: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotFound, arg),\n\n    /**\n     * Get a JSON RPC 2.0 Internal (-32603) error.\n     */\n    internal: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.internal, arg),\n\n    /**\n     * Get a JSON RPC 2.0 Server error.\n     * Permits integer error codes in the [ -32099 <= -32005 ] range.\n     * Codes -32000 through -32004 are reserved by EIP-1474.\n     */\n    server: opts => {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum RPC Server errors must provide single object argument.');\n      }\n\n      const {\n        code\n      } = opts;\n\n      if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n        throw new Error('\"code\" must be an integer such that: -32099 <= code <= -32005');\n      }\n\n      return getEthJsonRpcError(code, opts);\n    },\n\n    /**\n     * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n     */\n    invalidInput: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidInput, arg),\n\n    /**\n     * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n     */\n    resourceNotFound: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceNotFound, arg),\n\n    /**\n     * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n     */\n    resourceUnavailable: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceUnavailable, arg),\n\n    /**\n     * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n     */\n    transactionRejected: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.transactionRejected, arg),\n\n    /**\n     * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n     */\n    methodNotSupported: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotSupported, arg),\n\n    /**\n     * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.\n     */\n    limitExceeded: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.limitExceeded, arg)\n  },\n  provider: {\n    /**\n     * Get an Ethereum Provider User Rejected Request (4001) error.\n     */\n    userRejectedRequest: arg => {\n      return getEthProviderError(error_constants_1.errorCodes.provider.userRejectedRequest, arg);\n    },\n\n    /**\n     * Get an Ethereum Provider Unauthorized (4100) error.\n     */\n    unauthorized: arg => {\n      return getEthProviderError(error_constants_1.errorCodes.provider.unauthorized, arg);\n    },\n\n    /**\n     * Get an Ethereum Provider Unsupported Method (4200) error.\n     */\n    unsupportedMethod: arg => {\n      return getEthProviderError(error_constants_1.errorCodes.provider.unsupportedMethod, arg);\n    },\n\n    /**\n     * Get an Ethereum Provider Not Connected (4900) error.\n     */\n    disconnected: arg => {\n      return getEthProviderError(error_constants_1.errorCodes.provider.disconnected, arg);\n    },\n\n    /**\n     * Get an Ethereum Provider Chain Not Connected (4901) error.\n     */\n    chainDisconnected: arg => {\n      return getEthProviderError(error_constants_1.errorCodes.provider.chainDisconnected, arg);\n    },\n\n    /**\n     * Get a custom Ethereum Provider error.\n     */\n    custom: opts => {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum Provider custom errors must provide single object argument.');\n      }\n\n      const {\n        code,\n        message,\n        data\n      } = opts;\n\n      if (!message || typeof message !== 'string') {\n        throw new Error('\"message\" must be a nonempty string');\n      }\n\n      return new classes_1.EthereumProviderError(code, message, data);\n    }\n  }\n}; // Internal\n\nfunction getEthJsonRpcError(code, arg) {\n  const [message, data] = parseOpts(arg);\n  return new classes_1.EthereumRpcError(code, message || utils_1.getMessageFromCode(code), data);\n}\n\nfunction getEthProviderError(code, arg) {\n  const [message, data] = parseOpts(arg);\n  return new classes_1.EthereumProviderError(code, message || utils_1.getMessageFromCode(code), data);\n}\n\nfunction parseOpts(arg) {\n  if (arg) {\n    if (typeof arg === 'string') {\n      return [arg];\n    } else if (typeof arg === 'object' && !Array.isArray(arg)) {\n      const {\n        message,\n        data\n      } = arg;\n\n      if (message && typeof message !== 'string') {\n        throw new Error('Must specify string message.');\n      }\n\n      return [message || undefined, data];\n    }\n  }\n\n  return [];\n}","map":{"version":3,"mappings":"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","names":["exports","rpc","parse","arg","getEthJsonRpcError","error_constants_1","invalidRequest","invalidParams","methodNotFound","internal","server","opts","Array","isArray","Error","code","Number","isInteger","invalidInput","resourceNotFound","resourceUnavailable","transactionRejected","methodNotSupported","limitExceeded","provider","userRejectedRequest","getEthProviderError","unauthorized","unsupportedMethod","disconnected","chainDisconnected","custom","message","data","classes_1","parseOpts","utils_1","undefined"],"sourceRoot":"","sources":["../src/errors.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}