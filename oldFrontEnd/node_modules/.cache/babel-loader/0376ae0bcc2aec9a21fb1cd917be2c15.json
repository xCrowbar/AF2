{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar baseTransaction_1 = require(\"./baseTransaction\");\n\nvar types_1 = require(\"./types\");\n\nvar util_1 = require(\"./util\");\n\nvar TRANSACTION_TYPE = 1;\nvar TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');\n/**\n * Typed transaction with optional access lists\n *\n * - TransactionType: 1\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\n */\n\nvar AccessListEIP2930Transaction =\n/** @class */\nfunction (_super) {\n  __extends(AccessListEIP2930Transaction, _super);\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n\n\n  function AccessListEIP2930Transaction(txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var _this = this;\n\n    var _a, _b;\n\n    _this = _super.call(this, __assign(__assign({}, txData), {\n      type: TRANSACTION_TYPE\n    })) || this;\n    /**\n     * The default HF if the tx type is active on that HF\n     * or the first greater HF where the tx is active.\n     *\n     * @hidden\n     */\n\n    _this.DEFAULT_HARDFORK = 'berlin';\n    var chainId = txData.chainId,\n        accessList = txData.accessList,\n        gasPrice = txData.gasPrice;\n    _this.common = _this._getCommon(opts.common, chainId);\n    _this.chainId = _this.common.chainIdBN(); // EIP-2718 check is done in Common\n\n    if (!_this.common.isActivatedEIP(2930)) {\n      throw new Error('EIP-2930 not enabled on Common');\n    }\n\n    _this.activeCapabilities = _this.activeCapabilities.concat([2718, 2930]); // Populate the access list fields\n\n    var accessListData = util_1.AccessLists.getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);\n    _this.accessList = accessListData.accessList;\n    _this.AccessListJSON = accessListData.AccessListJSON; // Verify the access list format.\n\n    util_1.AccessLists.verifyAccessList(_this.accessList);\n    _this.gasPrice = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(gasPrice === '' ? '0x' : gasPrice));\n\n    _this._validateCannotExceedMaxInteger({\n      gasPrice: _this.gasPrice\n    });\n\n    if (_this.gasPrice.mul(_this.gasLimit).gt(ethereumjs_util_1.MAX_INTEGER)) {\n      var msg = _this._errorMsg('gasLimit * gasPrice cannot exceed MAX_INTEGER');\n\n      throw new Error(msg);\n    }\n\n    if (_this.v && !_this.v.eqn(0) && !_this.v.eqn(1)) {\n      var msg = _this._errorMsg('The y-parity of the transaction should either be 0 or 1');\n\n      throw new Error(msg);\n    }\n\n    if (_this.common.gteHardfork('homestead') && ((_a = _this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      var msg = _this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n\n      throw new Error(msg);\n    }\n\n    if (_this.common.isActivatedEIP(3860)) {\n      (0, util_1.checkMaxInitCodeSize)(_this.common, _this.data.length);\n    }\n\n    var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;\n\n    if (freeze) {\n      Object.freeze(_this);\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(AccessListEIP2930Transaction.prototype, \"senderR\", {\n    /**\n     * EIP-2930 alias for `r`\n     *\n     * @deprecated use `r` instead\n     */\n    get: function () {\n      return this.r;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AccessListEIP2930Transaction.prototype, \"senderS\", {\n    /**\n     * EIP-2930 alias for `s`\n     *\n     * @deprecated use `s` instead\n     */\n    get: function () {\n      return this.s;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AccessListEIP2930Transaction.prototype, \"yParity\", {\n    /**\n     * EIP-2930 alias for `v`\n     *\n     * @deprecated use `v` instead\n     */\n    get: function () {\n      return this.v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * v, r, s }\n   *\n   * Notes:\n   * - `chainId` will be set automatically if not provided\n   * - All parameters are optional and have some basic default values\n   */\n\n  AccessListEIP2930Transaction.fromTxData = function (txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return new AccessListEIP2930Transaction(txData, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\n   */\n\n\n  AccessListEIP2930Transaction.fromSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n      throw new Error(\"Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: \".concat(TRANSACTION_TYPE, \", received: \").concat(serialized.slice(0, 1).toString('hex')));\n    }\n\n    var values = ethereumjs_util_1.rlp.decode(serialized.slice(1));\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input: must be array');\n    }\n\n    return AccessListEIP2930Transaction.fromValuesArray(values, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link AccessListEIP2930Transaction.fromSerializedTx})\n   *\n   * Note: This means that the Buffer should start with 0x01.\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link AccessListEIP2930Transaction.fromSerializedTx} constructor\n   */\n\n\n  AccessListEIP2930Transaction.fromRlpSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return AccessListEIP2930Transaction.fromSerializedTx(serialized, opts);\n  };\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\n   */\n\n\n  AccessListEIP2930Transaction.fromValuesArray = function (values, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (values.length !== 8 && values.length !== 11) {\n      throw new Error('Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).');\n    }\n\n    var _a = __read(values, 11),\n        chainId = _a[0],\n        nonce = _a[1],\n        gasPrice = _a[2],\n        gasLimit = _a[3],\n        to = _a[4],\n        value = _a[5],\n        data = _a[6],\n        accessList = _a[7],\n        v = _a[8],\n        r = _a[9],\n        s = _a[10];\n\n    (0, ethereumjs_util_1.validateNoLeadingZeroes)({\n      nonce: nonce,\n      gasPrice: gasPrice,\n      gasLimit: gasLimit,\n      value: value,\n      v: v,\n      r: r,\n      s: s\n    });\n    var emptyAccessList = [];\n    return new AccessListEIP2930Transaction({\n      chainId: new ethereumjs_util_1.BN(chainId),\n      nonce: nonce,\n      gasPrice: gasPrice,\n      gasLimit: gasLimit,\n      to: to,\n      value: value,\n      data: data,\n      accessList: accessList !== null && accessList !== void 0 ? accessList : emptyAccessList,\n      v: v !== undefined ? new ethereumjs_util_1.BN(v) : undefined,\n      r: r,\n      s: s\n    }, opts);\n  };\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n\n\n  AccessListEIP2930Transaction.prototype.getDataFee = function () {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value;\n    }\n\n    var cost = _super.prototype.getDataFee.call(this);\n\n    cost.iaddn(util_1.AccessLists.getDataFeeEIP2930(this.accessList, this.common));\n\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: cost,\n        hardfork: this.common.hardfork()\n      };\n    }\n\n    return cost;\n  };\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n\n\n  AccessListEIP2930Transaction.prototype.getUpfrontCost = function () {\n    return this.gasLimit.mul(this.gasPrice).add(this.value);\n  };\n  /**\n   * Returns a Buffer Array of the raw Buffers of the EIP-2930 transaction, in order.\n   *\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\n   *\n   * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block\n   * with {@link Block.fromValuesArray}.\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.\n   */\n\n\n  AccessListEIP2930Transaction.prototype.raw = function () {\n    return [(0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.chainId), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value), this.data, this.accessList, this.v !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.v) : Buffer.from([]), this.r !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.r) : Buffer.from([]), this.s !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.s) : Buffer.from([])];\n  };\n  /**\n   * Returns the serialized encoding of the EIP-2930 transaction.\n   *\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\n   *\n   * Note that in contrast to the legacy tx serialization format this is not\n   * valid RLP any more due to the raw tx type preceding and concatenated to\n   * the RLP encoding of the values.\n   */\n\n\n  AccessListEIP2930Transaction.prototype.serialize = function () {\n    var base = this.raw();\n    return Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n  };\n  /**\n   * Returns the serialized unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: in contrast to the legacy tx the raw message format is already\n   * serialized and doesn't need to be RLP encoded any more.\n   *\n   * ```javascript\n   * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n\n\n  AccessListEIP2930Transaction.prototype.getMessageToSign = function (hashMessage) {\n    if (hashMessage === void 0) {\n      hashMessage = true;\n    }\n\n    var base = this.raw().slice(0, 8);\n    var message = Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n\n    if (hashMessage) {\n      return (0, ethereumjs_util_1.keccak256)(message);\n    } else {\n      return message;\n    }\n  };\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n\n\n  AccessListEIP2930Transaction.prototype.hash = function () {\n    if (!this.isSigned()) {\n      var msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n\n      throw new Error(msg);\n    }\n\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = (0, ethereumjs_util_1.keccak256)(this.serialize());\n      }\n\n      return this.cache.hash;\n    }\n\n    return (0, ethereumjs_util_1.keccak256)(this.serialize());\n  };\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n\n\n  AccessListEIP2930Transaction.prototype.getMessageToVerifySignature = function () {\n    return this.getMessageToSign();\n  };\n  /**\n   * Returns the public key of the sender\n   */\n\n\n  AccessListEIP2930Transaction.prototype.getSenderPublicKey = function () {\n    var _a;\n\n    if (!this.isSigned()) {\n      var msg = this._errorMsg('Cannot call this method if transaction is not signed');\n\n      throw new Error(msg);\n    }\n\n    var msgHash = this.getMessageToVerifySignature(); // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n\n    if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      var msg = this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n\n      throw new Error(msg);\n    }\n\n    var _b = this,\n        yParity = _b.yParity,\n        r = _b.r,\n        s = _b.s;\n\n    try {\n      return (0, ethereumjs_util_1.ecrecover)(msgHash, yParity.addn(27), // Recover the 27 which was stripped from ecsign\n      (0, ethereumjs_util_1.bnToUnpaddedBuffer)(r), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(s));\n    } catch (e) {\n      var msg = this._errorMsg('Invalid Signature');\n\n      throw new Error(msg);\n    }\n  };\n\n  AccessListEIP2930Transaction.prototype._processSignature = function (v, r, s) {\n    var opts = {\n      common: this.common\n    };\n    return AccessListEIP2930Transaction.fromTxData({\n      chainId: this.chainId,\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      accessList: this.accessList,\n      v: new ethereumjs_util_1.BN(v - 27),\n      r: new ethereumjs_util_1.BN(r),\n      s: new ethereumjs_util_1.BN(s)\n    }, opts);\n  };\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n\n\n  AccessListEIP2930Transaction.prototype.toJSON = function () {\n    var accessListJSON = util_1.AccessLists.getAccessListJSON(this.accessList);\n    return {\n      chainId: (0, ethereumjs_util_1.bnToHex)(this.chainId),\n      nonce: (0, ethereumjs_util_1.bnToHex)(this.nonce),\n      gasPrice: (0, ethereumjs_util_1.bnToHex)(this.gasPrice),\n      gasLimit: (0, ethereumjs_util_1.bnToHex)(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: (0, ethereumjs_util_1.bnToHex)(this.value),\n      data: '0x' + this.data.toString('hex'),\n      accessList: accessListJSON,\n      v: this.v !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.v) : undefined,\n      r: this.r !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.r) : undefined,\n      s: this.s !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.s) : undefined\n    };\n  };\n  /**\n   * Return a compact error string representation of the object\n   */\n\n\n  AccessListEIP2930Transaction.prototype.errorStr = function () {\n    var _a, _b;\n\n    var errorStr = this._getSharedErrorPostfix(); // Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail\n\n\n    errorStr += \" gasPrice=\".concat(this.gasPrice, \" accessListCount=\").concat((_b = (_a = this.accessList) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0);\n    return errorStr;\n  };\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n\n\n  AccessListEIP2930Transaction.prototype._errorMsg = function (msg) {\n    return \"\".concat(msg, \" (\").concat(this.errorStr(), \")\");\n  };\n\n  return AccessListEIP2930Transaction;\n}(baseTransaction_1.BaseTransaction);\n\nexports.default = AccessListEIP2930Transaction;","map":{"version":3,"mappings":"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","names":["TRANSACTION_TYPE","TRANSACTION_TYPE_BUFFER","Buffer","from","toString","padStart","__extends","txData","opts","_super","type","_this","accessList","gasPrice","common","_getCommon","chainId","chainIdBN","isActivatedEIP","Error","activeCapabilities","concat","accessListData","util_1","getAccessListData","AccessListJSON","verifyAccessList","ethereumjs_util_1","_validateCannotExceedMaxInteger","mul","gasLimit","gt","msg","_errorMsg","v","eqn","gteHardfork","s","_a","types_1","data","length","freeze","_b","Object","AccessListEIP2930Transaction","r","serialized","slice","equals","values","decode","Array","isArray","fromValuesArray","fromSerializedTx","nonce","to","value","emptyAccessList","undefined","cache","dataFee","hardfork","cost","getDataFee","call","iaddn","getDataFeeEIP2930","isFrozen","add","buf","base","raw","encode","hashMessage","message","isSigned","hash","serialize","getMessageToSign","msgHash","getMessageToVerifySignature","yParity","addn","e","fromTxData","accessListJSON","getAccessListJSON","errorStr","_getSharedErrorPostfix","baseTransaction_1"],"sourceRoot":"","sources":["../src/eip2930Transaction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}