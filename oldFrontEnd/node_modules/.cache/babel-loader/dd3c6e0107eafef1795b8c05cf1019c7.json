{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscription,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function bufferWhen(closingSelector) {\n  return function (source) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nvar BufferWhenOperator = /*@__PURE__*/function () {\n  function BufferWhenOperator(closingSelector) {\n    this.closingSelector = closingSelector;\n  }\n\n  BufferWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  };\n\n  return BufferWhenOperator;\n}();\n\nvar BufferWhenSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(BufferWhenSubscriber, _super);\n\n  function BufferWhenSubscriber(destination, closingSelector) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.closingSelector = closingSelector;\n    _this.subscribing = false;\n\n    _this.openBuffer();\n\n    return _this;\n  }\n\n  BufferWhenSubscriber.prototype._next = function (value) {\n    this.buffer.push(value);\n  };\n\n  BufferWhenSubscriber.prototype._complete = function () {\n    var buffer = this.buffer;\n\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n\n    _super.prototype._complete.call(this);\n  };\n\n  BufferWhenSubscriber.prototype._unsubscribe = function () {\n    this.buffer = undefined;\n    this.subscribing = false;\n  };\n\n  BufferWhenSubscriber.prototype.notifyNext = function () {\n    this.openBuffer();\n  };\n\n  BufferWhenSubscriber.prototype.notifyComplete = function () {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  };\n\n  BufferWhenSubscriber.prototype.openBuffer = function () {\n    var closingSubscription = this.closingSubscription;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    var buffer = this.buffer;\n\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n    var closingNotifier;\n\n    try {\n      var closingSelector = this.closingSelector;\n      closingNotifier = closingSelector();\n    } catch (err) {\n      return this.error(err);\n    }\n\n    closingSubscription = new Subscription();\n    this.closingSubscription = closingSubscription;\n    this.add(closingSubscription);\n    this.subscribing = true;\n    closingSubscription.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(this)));\n    this.subscribing = false;\n  };\n\n  return BufferWhenSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"mappings":";AAGA,OAAO,KAAEA,OAAT,MAAuB,OAAvB;AAEA,SAASC,YAAT,QAAS,iBAAT;AA4CA,SAAMC,qBAAN,EAA8BC,cAA9B,EAAoEC,qBAApE,QAAoE,mBAApE;OACE,SAAOC,UAAP,CAAsCC,eAAtC,EAAsC;SACpC,UAAaC,MAAb,EAAmB;AACnB;AACH;AAED;;IAEEC,kCAAoB,YAAsC;WAAtCA,oCAAsC;AACzD;AAED;;oBACgB,WAAUC,OAAI,sBAAqBF,MAArB,EAAiC;AAC9D;AACH;;AARA,SAQCC,kBARD;AAeA,CAbsB;;IAagBE,8CAA6BC,MAA7B,EAA6B;AAKjEX,0CAAYW,MAAZ;;WAAAD,qBACEE,aAAMN,iBAEP;AAHiD,kDAAsC,IAAtC;;AAH1CO,4BAAuBP,eAAvB;AAKNO,SAAI,CAACC,WAAL,GAAkB,KAAlB;;;;AACD;AAES;;sBACS,CAACC,UAAOC;AAC1B;AAES;;sBACO,CAAID,UAAQE;AAC3B,QAAIC,MAAM,GAAE,WAAZ;;QACEA,QAAK;AACN;AACD;;AACDP;AAGD;;sBACgB,WAAUQ;AACxB,SAAKD,MAAL,GAAKE,SAAL;AACD;AAED;;sBACiB,CAAEL,UAACM;AACnB;AAED;;sBACW,WAAaC;QACpB,KAAKR,aAAW;AACjB;WACC;AACD;AACF;AAED;;sBACQ,oCAA6B;AAEnC,QAAIS,mBAAmB,GAAE,wBAAzB;;QACEA,qBAAY;AACZ;AACDA;AAED;;AACA,QAAIL,MAAK,QAAQA,MAAjB;;QACE,KAAKA;AACN;AAED;;AAEA,SAAIA,MAAJ,GAAI,EAAJ;AACA,QAAIM,eAAJ;;QACU;AACR,yBAAkB,uBAAlB;AACDA;AAAC,aACAC,KAAO;AACR;AACD;;AACAF,uBAAK,OAAmBtB,YAAnB,EAAL;AACA,SAAKsB,mBAAL,GAASA,mBAAT;AACA,SAAKG,GAAL,CAAKH,mBAAL;AACA,uBAAmB,IAAnB;AACAA,uBAAmB,IAAnB,CAAwBpB,cAAC,kDAAzB;AACD;AACH;;AArEsC;CAAA","names":["tslib_1","Subscription","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","bufferWhen","closingSelector","source","BufferWhenOperator","call","BufferWhenSubscriber","_super","destination","_this","subscribing","prototype","_next","_complete","buffer","_unsubscribe","undefined","notifyNext","notifyComplete","closingSubscription","closingNotifier","err","add"],"sources":["../../../src/internal/operators/bufferWhen.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}