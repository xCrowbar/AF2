{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonRpcEngine = void 0;\n\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\n\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\n\n\nclass JsonRpcEngine extends safe_event_emitter_1.default {\n  constructor() {\n    super();\n    this._middleware = [];\n  }\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n\n\n  push(middleware) {\n    this._middleware.push(middleware);\n  }\n\n  handle(req, cb) {\n    if (cb && typeof cb !== 'function') {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n\n      return this._handleBatch(req);\n    }\n\n    if (cb) {\n      return this._handle(req, cb);\n    }\n\n    return this._promiseHandle(req);\n  }\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n\n\n  asMiddleware() {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JsonRpcEngine._runAllMiddleware(req, res, this._middleware);\n\n        if (isComplete) {\n          await JsonRpcEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError);\n        }\n\n        return next(async handlerCallback => {\n          try {\n            await JsonRpcEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n\n  async _handleBatch(reqs, cb) {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all( // 1. Begin executing each request in the order received\n      reqs.map(this._promiseHandle.bind(this))); // 3. Return batch response\n\n      if (cb) {\n        return cb(null, responses);\n      }\n\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n\n      throw error;\n    }\n  }\n  /**\n   * A promise-wrapped _handle.\n   */\n\n\n  _promiseHandle(req) {\n    return new Promise(resolve => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n\n\n  async _handle(callerReq, cb) {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== 'object') {\n      const error = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Requests must be plain objects. Received: ${typeof callerReq}`, {\n        request: callerReq\n      });\n      return cb(error, {\n        id: undefined,\n        jsonrpc: '2.0',\n        error\n      });\n    }\n\n    if (typeof callerReq.method !== 'string') {\n      const error = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Must specify a string method. Received: ${typeof callerReq.method}`, {\n        request: callerReq\n      });\n      return cb(error, {\n        id: callerReq.id,\n        jsonrpc: '2.0',\n        error\n      });\n    }\n\n    const req = Object.assign({}, callerReq);\n    const res = {\n      id: req.id,\n      jsonrpc: req.jsonrpc\n    };\n    let error = null;\n\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n\n      if (!res.error) {\n        res.error = eth_rpc_errors_1.serializeError(error);\n      }\n    }\n\n    return cb(error, res);\n  }\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n\n\n  async _processRequest(req, res) {\n    const [error, isComplete, returnHandlers] = await JsonRpcEngine._runAllMiddleware(req, res, this._middleware); // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n\n    JsonRpcEngine._checkForCompletion(req, res, isComplete); // The return handlers should run even if an error was encountered during\n    // middleware processing.\n\n\n    await JsonRpcEngine._runReturnHandlers(returnHandlers); // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n\n    if (error) {\n      throw error;\n    }\n  }\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n\n\n  static async _runAllMiddleware(req, res, middlewareStack) {\n    const returnHandlers = [];\n    let error = null;\n    let isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers\n\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JsonRpcEngine._runMiddleware(req, res, middleware, returnHandlers);\n\n      if (isComplete) {\n        break;\n      }\n    }\n\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */\n\n\n  static _runMiddleware(req, res, middleware, returnHandlers) {\n    return new Promise(resolve => {\n      const end = err => {\n        const error = err || res.error;\n\n        if (error) {\n          res.error = eth_rpc_errors_1.serializeError(error);\n        } // True indicates that the request should end\n\n\n        resolve([error, true]);\n      };\n\n      const next = returnHandler => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== 'function') {\n              end(new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: \"next\" return handlers must be functions. ` + `Received \"${typeof returnHandler}\" for request:\\n${jsonify(req)}`, {\n                request: req\n              }));\n            }\n\n            returnHandlers.push(returnHandler);\n          } // False indicates that the request should not end\n\n\n          resolve([null, false]);\n        }\n      };\n\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n\n\n  static async _runReturnHandlers(handlers) {\n    for (const handler of handlers) {\n      await new Promise((resolve, reject) => {\n        handler(err => err ? reject(err) : resolve());\n      });\n    }\n  }\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n\n\n  static _checkForCompletion(req, res, isComplete) {\n    if (!('result' in res) && !('error' in res)) {\n      throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Response has no error or result for request:\\n${jsonify(req)}`, {\n        request: req\n      });\n    }\n\n    if (!isComplete) {\n      throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Nothing ended request:\\n${jsonify(req)}`, {\n        request: req\n      });\n    }\n  }\n\n}\n\nexports.JsonRpcEngine = JsonRpcEngine;\n\nfunction jsonify(request) {\n  return JSON.stringify(request, null, 2);\n}","map":{"version":3,"mappings":"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","names":["JsonRpcEngine","safe_event_emitter_1","constructor","_middleware","push","middleware","handle","req","cb","Error","Array","isArray","_handleBatch","_handle","_promiseHandle","asMiddleware","res","next","end","middlewareError","isComplete","returnHandlers","_runAllMiddleware","_runReturnHandlers","handlerCallback","error","reqs","responses","Promise","all","map","bind","resolve","_err","callerReq","eth_rpc_errors_1","rpc","invalidRequest","request","id","undefined","jsonrpc","method","_processRequest","_error","result","_checkForCompletion","middlewareStack","_runMiddleware","reverse","err","returnHandler","internal","jsonify","handlers","handler","reject","exports","JSON","stringify"],"sourceRoot":"","sources":["../src/JsonRpcEngine.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}