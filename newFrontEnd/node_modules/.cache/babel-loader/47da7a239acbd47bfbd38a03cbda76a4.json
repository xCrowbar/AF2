{"ast":null,"code":"import React, { useEffect } from 'react';\nimport { Scene, Color, Fog, PerspectiveCamera, Vector3, WebGLRenderer, Mesh, PlaneGeometry, MeshPhongMaterial, GridHelper, HemisphereLight, DirectionalLight, sRGBEncoding } from 'three';\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nvar camera, cameraTarget, scene, renderer, controls;\n\nfunction Stl(width, height, url, objectColor, gridLineColor, skyboxColor, groundColor, lightColor, volume) {\n  scene = new Scene();\n  scene.background = new Color(skyboxColor);\n  scene.fog = new Fog(0xa0a0a0, 200, 1000);\n  camera = new PerspectiveCamera(45, width / height, 1, 1000);\n  camera.position.set(200, 100, 200);\n  cameraTarget = new Vector3(0, 0, 0);\n  renderer = new WebGLRenderer({\n    antialias: true,\n    alpha: true,\n    preserveDrawingBuffer: true\n  });\n  renderer.setSize(width, height);\n  document.getElementById('stlviewer').innerHTML = '';\n  document.getElementById('stlviewer').appendChild(renderer.domElement);\n  controls = new OrbitControls(camera, renderer.domElement);\n  controls.target.set(0, 0, 0);\n  controls.update();\n  var ground = new Mesh(new PlaneGeometry(2000, 2000), new MeshPhongMaterial({\n    color: groundColor,\n    depthWrite: false\n  }));\n  ground.rotation.x = -Math.PI / 2;\n  ground.receiveShadow = true;\n  scene.add(ground);\n  var grid = new GridHelper(2000, 20, gridLineColor, gridLineColor);\n  grid.material.opacity = 0.2;\n  grid.material.transparent = true;\n  scene.add(grid);\n  var hemiLight = new HemisphereLight(0xffffff, 0x444444);\n  hemiLight.position.set(0, 200, 0);\n  scene.add(hemiLight);\n  var directionalLight = new DirectionalLight(lightColor);\n  directionalLight.position.set(0, 200, 100);\n  directionalLight.castShadow = true;\n  directionalLight.shadow.camera.top = 180;\n  directionalLight.shadow.camera.bottom = -100;\n  directionalLight.shadow.camera.left = -120;\n  directionalLight.shadow.camera.right = 120;\n  scene.add(directionalLight);\n  var loader = new STLLoader();\n  loader.load(url, function (geometry) {\n    var material = new MeshPhongMaterial({\n      color: objectColor,\n      specular: 0x111111,\n      shininess: 200\n    });\n    var mesh = new Mesh(geometry, material);\n    mesh.position.set(0, 0, 0);\n    mesh.rotation.set(-Math.PI / 2, 0, 0);\n    mesh.scale.set(1, 1, 1);\n    mesh.castShadow = true;\n    mesh.receiveShadow = true;\n\n    var signedVolumeOfTriangle = function signedVolumeOfTriangle(p1, p2, p3) {\n      return p1.dot(p2.cross(p3)) / 6.0;\n    };\n\n    var position = geometry.attributes.position;\n    var faces = position.count / 3;\n    var sum = 0;\n    var p1 = new Vector3(),\n        p2 = new Vector3(),\n        p3 = new Vector3();\n\n    for (var i = 0; i < faces; i++) {\n      p1.fromBufferAttribute(position, i * 3 + 0);\n      p2.fromBufferAttribute(position, i * 3 + 1);\n      p3.fromBufferAttribute(position, i * 3 + 2);\n      sum += signedVolumeOfTriangle(p1, p2, p3);\n    }\n\n    volume(sum);\n    scene.add(mesh);\n  });\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.outputEncoding = sRGBEncoding;\n  renderer.shadowMap.enabled = true;\n\n  var animate = function animate() {\n    requestAnimationFrame(animate);\n    render();\n  };\n\n  var render = function render() {\n    camera.lookAt(cameraTarget);\n    renderer.render(scene, camera);\n  };\n\n  animate();\n}\n\nvar StlViewer = function StlViewer(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      url = _ref.url,\n      objectColor = _ref.objectColor,\n      gridLineColor = _ref.gridLineColor,\n      skyboxColor = _ref.skyboxColor,\n      groundColor = _ref.groundColor,\n      lightColor = _ref.lightColor,\n      volume = _ref.volume;\n  useEffect(function () {\n    Stl(width, height, url, objectColor, gridLineColor, skyboxColor, groundColor, lightColor, volume);\n  }, [url]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"stlviewer\"\n  });\n};\n\nexport { StlViewer };","map":{"version":3,"mappings":"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","names":["camera","cameraTarget","scene","renderer","controls","Stl","width","height","url","objectColor","gridLineColor","skyboxColor","groundColor","lightColor","volume","THREE","background","fog","position","set","antialias","alpha","preserveDrawingBuffer","setSize","document","getElementById","innerHTML","appendChild","domElement","OrbitControls","target","update","ground","color","depthWrite","rotation","x","Math","PI","receiveShadow","add","grid","material","opacity","transparent","hemiLight","directionalLight","castShadow","shadow","top","bottom","left","right","loader","STLLoader","load","geometry","specular","shininess","mesh","scale","signedVolumeOfTriangle","p1","p2","p3","dot","cross","attributes","faces","count","sum","i","fromBufferAttribute","setPixelRatio","window","devicePixelRatio","outputEncoding","shadowMap","enabled","animate","requestAnimationFrame","render","lookAt","StlViewer","useEffect","React","id"],"sources":["../src/Stl.js","../src/index.js"],"sourcesContent":["import * as THREE from 'three'\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n\nlet camera, cameraTarget, scene, renderer, controls\nexport default function Stl(\n  width,\n  height,\n  url,\n  objectColor,\n  gridLineColor,\n  skyboxColor,\n  groundColor,\n  lightColor,\n  volume\n) {\n  // scene setup\n\n  scene = new THREE.Scene()\n  scene.background = new THREE.Color(skyboxColor)\n  scene.fog = new THREE.Fog(0xa0a0a0, 200, 1000)\n\n  // camera setup\n  camera = new THREE.PerspectiveCamera(45, width / height, 1, 1000)\n  camera.position.set(200, 100, 200)\n\n  cameraTarget = new THREE.Vector3(0, 0, 0)\n\n  // renderer setup\n  renderer = new THREE.WebGLRenderer({\n    antialias: true,\n    alpha: true,\n    preserveDrawingBuffer: true\n  })\n  renderer.setSize(width, height)\n\n  // where to render your scene\n  document.getElementById('stlviewer').innerHTML = ''\n  document.getElementById('stlviewer').appendChild(renderer.domElement)\n\n  // controls\n  controls = new OrbitControls(camera, renderer.domElement)\n  controls.target.set(0, 0, 0)\n  controls.update()\n\n  // ground\n\n  const ground = new THREE.Mesh(\n    new THREE.PlaneGeometry(2000, 2000),\n    new THREE.MeshPhongMaterial({ color: groundColor, depthWrite: false })\n  )\n  ground.rotation.x = -Math.PI / 2\n  ground.receiveShadow = true\n  scene.add(ground)\n\n  const grid = new THREE.GridHelper(2000, 20, gridLineColor, gridLineColor)\n  grid.material.opacity = 0.2\n  grid.material.transparent = true\n  scene.add(grid)\n\n  // lights\n  const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444)\n  hemiLight.position.set(0, 200, 0)\n  scene.add(hemiLight)\n\n  const directionalLight = new THREE.DirectionalLight(lightColor)\n  directionalLight.position.set(0, 200, 100)\n  directionalLight.castShadow = true\n  directionalLight.shadow.camera.top = 180\n  directionalLight.shadow.camera.bottom = -100\n  directionalLight.shadow.camera.left = -120\n  directionalLight.shadow.camera.right = 120\n  scene.add(directionalLight)\n\n  // adding stl to scene\n  const loader = new STLLoader()\n  loader.load(url, (geometry) => {\n    const material = new THREE.MeshPhongMaterial({\n      color: objectColor,\n      specular: 0x111111,\n      shininess: 200\n    })\n    const mesh = new THREE.Mesh(geometry, material)\n\n    mesh.position.set(0, 0, 0)\n    mesh.rotation.set(-Math.PI / 2, 0, 0)\n    mesh.scale.set(1, 1, 1)\n\n    mesh.castShadow = true\n    mesh.receiveShadow = true\n\n    const signedVolumeOfTriangle = (p1, p2, p3) => {\n      return p1.dot(p2.cross(p3)) / 6.0\n    }\n    let position = geometry.attributes.position\n    let faces = position.count / 3\n    let sum = 0\n    let p1 = new THREE.Vector3(),\n      p2 = new THREE.Vector3(),\n      p3 = new THREE.Vector3()\n    for (let i = 0; i < faces; i++) {\n      p1.fromBufferAttribute(position, i * 3 + 0)\n      p2.fromBufferAttribute(position, i * 3 + 1)\n      p3.fromBufferAttribute(position, i * 3 + 2)\n      sum += signedVolumeOfTriangle(p1, p2, p3)\n    }\n    volume(sum)\n\n    scene.add(mesh)\n  })\n\n  // renderer\n\n  renderer.setPixelRatio(window.devicePixelRatio)\n  renderer.outputEncoding = THREE.sRGBEncoding\n\n  renderer.shadowMap.enabled = true\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / height\n    camera.updateProjectionMatrix()\n\n    renderer.setSize(window.innerWidth, height)\n  }\n\n  const animate = () => {\n    requestAnimationFrame(animate)\n    render()\n  }\n\n  const render = () => {\n    camera.lookAt(cameraTarget)\n    renderer.render(scene, camera)\n  }\n  animate()\n  // window.addEventListener('resize', onWindowResize)\n}\n","import React, { useEffect } from 'react'\nimport Stl from './Stl'\n\nexport const StlViewer = ({\n  width,\n  height,\n  url,\n  objectColor,\n  gridLineColor,\n  skyboxColor,\n  groundColor,\n  lightColor,\n  volume\n}) => {\n  useEffect(() => {\n    Stl(\n      width,\n      height,\n      url,\n      objectColor,\n      gridLineColor,\n      skyboxColor,\n      groundColor,\n      lightColor,\n      volume\n    )\n  }, [url])\n  return <div id='stlviewer'></div>\n}\n"]},"metadata":{},"sourceType":"module"}