{"ast":null,"code":"var _jsxFileName = \"/home/mike/Scrivania/provaFrontEnd/af2_front_end_test/src/component/WalletCheck/WalletConnected.js\",\n    _s = $RefreshSig$();\n\nimport { useWeb3React } from '@web3-react/core';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { useState, useEffect, Children } from 'react';\nimport { Navigate } from \"react-router-dom\";\nimport User from '../../SmartContracts/Users/Users';\nimport MetamaskLogin from '../../Pages/metamaskLogin/metamaskLogin';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1, 3, 4, 5, 42, 56, 97, 1337]\n});\nexport default function WalletConnected(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const {\n    active: networkActive,\n    error: networkError,\n    activate: activateNetwork\n  } = useWeb3React();\n  const [loaded, setLoaded] = useState(false);\n  const [network, setNetwork] = useState(false);\n  let account = undefined;\n  useEffect(() => {\n    injected.isAuthorized().then(isAuthorized => {\n      if (isAuthorized && !networkActive && !networkError) {\n        setLoaded(true);\n        activateNetwork(injected);\n      }\n    }).catch(() => {\n      setLoaded(true);\n    });\n  }, [activateNetwork, networkActive, networkError]);\n\n  if (loaded) {\n    if (networkActive === true) {\n      console.log(loaded, networkActive);\n      return children;\n    } else if (networkActive === false) {\n      console.log(loaded, networkActive);\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 14\n      }, this);\n    }\n  } else return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"Loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 14\n  }, this);\n} //Versione scarsa\n\n/*useEffect(()=>{\n  const accountCheck=async()=>{\n    let user=new User();\n    \n    const {ethereum}=window;\n    account =await ethereum.request({ method: 'eth_accounts' })\n      .then((res)=>{\n        if(res.length>0){\n          \n          \n          setLoaded(true)\n          setNetwork(true)\n        }\n            \n              else {\n                setLoaded(true);\n              }\n              })\n            .catch(()=>{setLoaded(true)})\n         };\n  accountCheck();\n},[loaded])\n\n      if(loaded && network){\n  console.log(\"ok\");\n  return (children);}\nelse if(loaded && !network){\n  console.log(\"no ok\");\n return  <Navigate to=\"/login\"></Navigate>\n}\nelse return (<span>Loading</span>)\n*/\n\n_s(WalletConnected, \"3UYmpRWEYuzvD9PsMxmj2UHts2A=\", false, function () {\n  return [useWeb3React];\n});\n\n_c = WalletConnected;\n\nvar _c;\n\n$RefreshReg$(_c, \"WalletConnected\");","map":{"version":3,"sources":["/home/mike/Scrivania/provaFrontEnd/af2_front_end_test/src/component/WalletCheck/WalletConnected.js"],"names":["useWeb3React","InjectedConnector","useState","useEffect","Children","Navigate","User","MetamaskLogin","injected","supportedChainIds","WalletConnected","children","active","networkActive","error","networkError","activate","activateNetwork","loaded","setLoaded","network","setNetwork","account","undefined","isAuthorized","then","catch","console","log"],"mappings":";;;AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,QAAT,EAAkBC,SAAlB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,OAAOC,IAAP,MAAiB,kCAAjB;AACA,OAAOC,aAAP,MAA0B,yCAA1B;;AAEA,OAAO,MAAMC,QAAQ,GAAG,IAAIP,iBAAJ,CAAsB;AAAEQ,EAAAA,iBAAiB,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAA0B,IAA1B;AAArB,CAAtB,CAAjB;AAEN,eAAe,SAASC,eAAT,OAAsC;AAAA;;AAAA,MAAb;AAAEC,IAAAA;AAAF,GAAa;AACpD,QAAM;AAAEC,IAAAA,MAAM,EAAEC,aAAV;AAAyBC,IAAAA,KAAK,EAAEC,YAAhC;AAA8CC,IAAAA,QAAQ,EAAEC;AAAxD,MAA4EjB,YAAY,EAA9F;AACA,QAAM,CAACkB,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACkB,OAAD,EAASC,UAAT,IAAqBnB,QAAQ,CAAC,KAAD,CAAnC;AACA,MAAIoB,OAAO,GAACC,SAAZ;AAEApB,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,QAAQ,CACLgB,YADH,GAEGC,IAFH,CAESD,YAAD,IAAkB;AAEtB,UAAIA,YAAY,IAAI,CAACX,aAAjB,IAAkC,CAACE,YAAvC,EAAqD;AACnDI,QAAAA,SAAS,CAAC,IAAD,CAAT;AACAF,QAAAA,eAAe,CAACT,QAAD,CAAf;AAGD;AACF,KAVH,EAWGkB,KAXH,CAWS,MAAM;AACXP,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD,KAbH;AAcD,GAfQ,EAeN,CAACF,eAAD,EAAkBJ,aAAlB,EAAiCE,YAAjC,CAfM,CAAT;;AAmBA,MAAGG,MAAH,EAAU;AACR,QAAGL,aAAa,KAAG,IAAnB,EAAwB;AACtBc,MAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ,EAAmBL,aAAnB;AACA,aAAOF,QAAP;AACC,KAHH,MAIK,IAAGE,aAAa,KAAG,KAAnB,EAAyB;AAC5Bc,MAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ,EAAmBL,aAAnB;AACA,0BAAO,QAAC,QAAD;AAAU,QAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;AACF,GATD,MAYI,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAIL,C,CAGD;;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GA5EyBH,e;UAC2DV,Y;;;KAD3DU,e","sourcesContent":["import { useWeb3React } from '@web3-react/core'\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { useState,useEffect, Children } from 'react';\nimport {Navigate} from \"react-router-dom\";\nimport User from '../../SmartContracts/Users/Users';\nimport MetamaskLogin from '../../Pages/metamaskLogin/metamaskLogin';\n\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 3, 4, 5, 42, 56, 97 , 1337] });\n\n export default function WalletConnected({ children }){\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React();\n  const [loaded, setLoaded] = useState(false);\n  const [network,setNetwork]=useState(false);\n  let account=undefined;\n    \n  useEffect(() => {\n    injected\n      .isAuthorized()\n      .then((isAuthorized) => {\n        \n        if (isAuthorized && !networkActive && !networkError) {\n          setLoaded(true)\n          activateNetwork(injected);\n          \n\n        }\n      })\n      .catch(() => {\n        setLoaded(true)\n      })\n  }, [activateNetwork, networkActive, networkError])\n  \n\n\n  if(loaded){\n    if(networkActive===true){\n      console.log(loaded,networkActive);\n      return children;\n      }\n    else if(networkActive===false){\n      console.log(loaded,networkActive);\n      return <Navigate to=\"/login\"></Navigate>\n    }\n  }\n\n    else \n      return <span>Loading</span>\n  \n  \n\n}\n\n\n//Versione scarsa\n  /*useEffect(()=>{\n    const accountCheck=async()=>{\n      let user=new User();\n      \n      const {ethereum}=window;\n      account =await ethereum.request({ method: 'eth_accounts' })\n        .then((res)=>{\n          if(res.length>0){\n            \n            \n            setLoaded(true)\n            setNetwork(true)\n          }\n              \n                else {\n                  setLoaded(true);\n                }\n                })\n              .catch(()=>{setLoaded(true)})\n\n          };\n    accountCheck();\n  },[loaded])\n  \n        if(loaded && network){\n    console.log(\"ok\");\n    return (children);}\n  else if(loaded && !network){\n    console.log(\"no ok\");\n   return  <Navigate to=\"/login\"></Navigate>\n  }\n  else return (<span>Loading</span>)\n  */"]},"metadata":{},"sourceType":"module"}