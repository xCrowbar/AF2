{"ast":null,"code":"var _jsxFileName = \"/home/mike/Scrivania/provaFrontEnd/af2_front_end_test/src/Pages/metamaskLogin/metamaskLogin.js\",\n    _s = $RefreshSig$();\n\nimport { useNavigate } from \"react-router-dom\";\nimport { HomeNav } from \"../../component/Navbar/homeNav\";\nimport metamaskIcon from '../../images/metamsak.png';\nimport { useState } from \"react\";\nimport User from \"../../SmartContracts/Users/Users\";\nimport './metamaskLogin.css';\nimport { useWeb3React } from \"@web3-react/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MetamaskLogin() {\n  _s();\n\n  const navigate = useNavigate();\n  const [error, setError] = useState(false);\n  const [errorMessage, SetErrorMessage] = useState(\"\");\n  let user = new User();\n  const {\n    chainId,\n    account,\n    activate,\n    active,\n    library\n  } = useWeb3React();\n\n  const enterPlatform = async () => {\n    if (window.ethereum) {\n      /*await window.ethereum.request({ method: \"eth_requestAccounts\"} )\n        .then((res)=>{\n          if(res.length>0){\n            user.isUser()\n              .then((res)=>{\n                if(!res){\n                  setError(true);\n                  SetErrorMessage(\"You are not subscribed into the platform\"); \n                  }\n                else {\n                  navigate('/',{replace:true});\n                }});\n      }});*/\n    } else {\n      alert(\"INSTALL METAMASK\");\n      navigate(\"login\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(HomeNav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loginForm\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Entra con Metamask\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"metaIcon\",\n        src: metamaskIcon,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"containerLogin\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"loginButton\",\n          onClick: enterPlatform,\n          children: \"Entra\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 87\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"error\",\n        href: \"/signin\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 13\n  }, this);\n}\n\n_s(MetamaskLogin, \"bacpGcdSN4H0NBsSwypQ9ZHtcIU=\", false, function () {\n  return [useNavigate, useWeb3React];\n});\n\n_c = MetamaskLogin;\n\nvar _c;\n\n$RefreshReg$(_c, \"MetamaskLogin\");","map":{"version":3,"sources":["/home/mike/Scrivania/provaFrontEnd/af2_front_end_test/src/Pages/metamaskLogin/metamaskLogin.js"],"names":["useNavigate","HomeNav","metamaskIcon","useState","User","useWeb3React","MetamaskLogin","navigate","error","setError","errorMessage","SetErrorMessage","user","chainId","account","activate","active","library","enterPlatform","window","ethereum","alert"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,OAAT,QAAwB,gCAAxB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,SAAUC,QAAV,QAA0B,OAA1B;AACA,OAAOC,IAAP,MAAiB,kCAAjB;AACA,OAAO,qBAAP;AACA,SAASC,YAAT,QAA6B,kBAA7B;;AAEA,eAAe,SAASC,aAAT,GAAwB;AAAA;;AACnC,QAAMC,QAAQ,GAACP,WAAW,EAA1B;AACA,QAAM,CAACQ,KAAD,EAASC,QAAT,IAAmBN,QAAQ,CAAC,KAAD,CAAjC;AACA,QAAM,CAACO,YAAD,EAAcC,eAAd,IAA+BR,QAAQ,CAAC,EAAD,CAA7C;AACA,MAAIS,IAAI,GAAC,IAAIR,IAAJ,EAAT;AACA,QAAM;AAAES,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA,QAApB;AAA8BC,IAAAA,MAA9B;AAAqCC,IAAAA;AAArC,MAAiDZ,YAAY,EAAnE;;AAGA,QAAOa,aAAa,GAAC,YAAU;AAC3B,QAAGC,MAAM,CAACC,QAAV,EAAmB;AAEjB;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAES,KAhBD,MAiBI;AACFC,MAAAA,KAAK,CAAC,kBAAD,CAAL;AACAd,MAAAA,QAAQ,CAAC,OAAD,CAAR;AACC;AAER,GAvBC;;AA8BA,sBACQ;AAAA,4BACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAyB,QAAA,GAAG,EAAEL,YAA9B;AAA4C,QAAA,GAAG,EAAC;AAAhD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,gCACA;AAAQ,UAAA,SAAS,EAAC,aAAlB;AAAgC,UAAA,OAAO,EAAEgB,aAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eACsE;AAAA;AAAA;AAAA;AAAA,gBADtE;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,EAMIV,KAAK,iBAAI;AAAG,QAAA,SAAS,EAAC,OAAb;AAAqB,QAAA,IAAI,EAAC,SAA1B;AAAA,kBAAqCE;AAArC;AAAA;AAAA;AAAA;AAAA,cANb;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADR;AAcH;;GApDuBJ,a;UACLN,W,EAIwCK,Y;;;KALnCC,a","sourcesContent":["import { useNavigate } from \"react-router-dom\";\nimport { HomeNav } from \"../../component/Navbar/homeNav\";\nimport metamaskIcon from '../../images/metamsak.png'\nimport {  useState } from \"react\";\nimport User from \"../../SmartContracts/Users/Users\";\nimport './metamaskLogin.css'\nimport { useWeb3React } from \"@web3-react/core\";\n\nexport default function MetamaskLogin(){\n    const navigate=useNavigate();\n    const [error , setError]=useState(false);\n    const [errorMessage,SetErrorMessage]=useState(\"\")\n    let user=new User();\n    const { chainId, account, activate, active,library } = useWeb3React()\n\n   \n    const  enterPlatform=async ()=>{\n        if(window.ethereum){\n\n          /*await window.ethereum.request({ method: \"eth_requestAccounts\"} )\n            .then((res)=>{\n              if(res.length>0){\n                user.isUser()\n                  .then((res)=>{\n                    if(!res){\n                      setError(true);\n                      SetErrorMessage(\"You are not subscribed into the platform\"); \n                      }\n                    else {\n                      navigate('/',{replace:true});\n                    }});\n\n        }});*/\n        }\n        else{\n          alert(\"INSTALL METAMASK\");\n          navigate(\"login\");   \n          }\n    \n  };\n\n   \n\n\n\n   \n    return (\n            <div>\n              <HomeNav/>\n              <div className=\"loginForm\">\n                <h2>Entra con Metamask</h2>\n                <img className=\"metaIcon\"src={metamaskIcon} alt=\"\"></img>\n                <div className=\"containerLogin\">\n                <button className=\"loginButton\" onClick={enterPlatform}>Entra</button><br/>\n                </div>\n                { error && <a className='error' href=\"/signin\">{errorMessage}</a>}\n\n              </div>\n            </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}