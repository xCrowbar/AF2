{"ast":null,"code":"'use strict';\n\nvar THREE = require('three'); //\n// STL Loader added\n//\n\n/**\n * @author aleeper / http://adamleeper.com/\n * @author mrdoob / http://mrdoob.com/\n * @author gero3 / https://github.com/gero3\n *\n * Description: A THREE loader for STL ASCII files, as created by Solidworks and other CAD programs.\n *\n * Supports both binary and ASCII encoded files, with automatic detection of type.\n *\n * Limitations:\n *  Binary decoding supports \"Magics\" color format (http://en.wikipedia.org/wiki/STL_(file_format)#Color_in_binary_STL).\n *  There is perhaps some question as to how valid it is to always assume little-endian-ness.\n *  ASCII decoding assumes file is UTF-8. Seems to work for the examples...\n *\n * Usage:\n *  var loader = new THREE.STLLoader();\n *  loader.load( './models/stl/slotted_disk.stl', function ( geometry ) {\n *    scene.add( new THREE.Mesh( geometry ) );\n *  });\n *\n * For binary STLs geometry might contain colors for vertices. To use it:\n *  // use the same code to load STL as above\n *  if (geometry.hasColors) {\n *    material = new THREE.MeshPhongMaterial({ opacity: geometry.alpha, vertexColors: THREE.VertexColors });\n *  } else { .... }\n *  var mesh = new THREE.Mesh( geometry, material );\n */\n\n\nTHREE.STLLoader = function (manager) {\n  this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n};\n\nTHREE.STLLoader.prototype = {\n  constructor: THREE.STLLoader,\n  loadFromUrl: function loadFromUrl(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new THREE.XHRLoader(scope.manager);\n    loader.setCrossOrigin(this.crossOrigin);\n    loader.setResponseType('arraybuffer');\n    loader.load(url, function (text) {\n      onLoad(scope.parse(text));\n    }, onProgress, onError);\n  },\n  loadFromFile: function loadFromFile(buffer, onLoad) {\n    var scope = this;\n    onLoad(scope.parse(buffer));\n  },\n  parse: function parse(data) {\n    var isBinary = function isBinary() {\n      var expect, face_size, n_faces, reader;\n      reader = new DataView(binData);\n      face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n      n_faces = reader.getUint32(80, true);\n      expect = 80 + 32 / 8 + n_faces * face_size;\n\n      if (expect === reader.byteLength) {\n        return true;\n      } // some binary files will have different size from expected,\n      // checking characters higher than ASCII to confirm is binary\n\n\n      var fileLength = reader.byteLength;\n\n      for (var index = 0; index < fileLength; index++) {\n        if (reader.getUint8(index, false) > 127) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    var binData = this.ensureBinary(data);\n    return isBinary() ? this.parseBinary(binData) : this.parseASCII(this.ensureString(data));\n  },\n  parseBinary: function parseBinary(data) {\n    var reader = new DataView(data);\n    var faces = reader.getUint32(80, true);\n    var r,\n        g,\n        b,\n        hasColors = false,\n        colors;\n    var defaultR, defaultG, defaultB, alpha; // process STL header\n    // check for default color in header (\"COLOR=rgba\" sequence).\n\n    for (var index = 0; index < 80 - 10; index++) {\n      if (reader.getUint32(index, false) == 0x434f4c4f\n      /*COLO*/\n      && reader.getUint8(index + 4) == 0x52\n      /*'R'*/\n      && reader.getUint8(index + 5) == 0x3d\n      /*'='*/\n      ) {\n        hasColors = true;\n        colors = new Float32Array(faces * 3 * 3);\n        defaultR = reader.getUint8(index + 6) / 255;\n        defaultG = reader.getUint8(index + 7) / 255;\n        defaultB = reader.getUint8(index + 8) / 255;\n        alpha = reader.getUint8(index + 9) / 255;\n      }\n    }\n\n    var dataOffset = 84;\n    var faceLength = 12 * 4 + 2;\n    var offset = 0;\n    var geometry = new THREE.BufferGeometry();\n    var vertices = new Float32Array(faces * 3 * 3);\n    var normals = new Float32Array(faces * 3 * 3);\n\n    for (var face = 0; face < faces; face++) {\n      var start = dataOffset + face * faceLength;\n      var normalX = reader.getFloat32(start, true);\n      var normalY = reader.getFloat32(start + 4, true);\n      var normalZ = reader.getFloat32(start + 8, true);\n\n      if (hasColors) {\n        var packedColor = reader.getUint16(start + 48, true);\n\n        if ((packedColor & 0x8000) === 0) {\n          // facet has its own unique color\n          r = (packedColor & 0x1f) / 31;\n          g = (packedColor >> 5 & 0x1f) / 31;\n          b = (packedColor >> 10 & 0x1f) / 31;\n        } else {\n          r = defaultR;\n          g = defaultG;\n          b = defaultB;\n        }\n      }\n\n      for (var i = 1; i <= 3; i++) {\n        var vertexstart = start + i * 12;\n        vertices[offset] = reader.getFloat32(vertexstart, true);\n        vertices[offset + 1] = reader.getFloat32(vertexstart + 4, true);\n        vertices[offset + 2] = reader.getFloat32(vertexstart + 8, true);\n        normals[offset] = normalX;\n        normals[offset + 1] = normalY;\n        normals[offset + 2] = normalZ;\n\n        if (hasColors) {\n          colors[offset] = r;\n          colors[offset + 1] = g;\n          colors[offset + 2] = b;\n        }\n\n        offset += 3;\n      }\n    }\n\n    geometry.addAttribute('position', new THREE.BufferAttribute(vertices, 3));\n    geometry.addAttribute('normal', new THREE.BufferAttribute(normals, 3));\n\n    if (hasColors) {\n      geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3));\n      geometry.hasColors = true;\n      geometry.alpha = alpha;\n    }\n\n    return geometry;\n  },\n  parseASCII: function parseASCII(data) {\n    var geometry, length, normal, patternFace, patternNormal, patternVertex, result, text;\n    geometry = new THREE.Geometry();\n    patternFace = /facet([\\s\\S]*?)endfacet/g;\n\n    while ((result = patternFace.exec(data)) !== null) {\n      text = result[0];\n      patternNormal = /normal[\\s]+([\\-+]?[0-9]+\\.?[0-9]*([eE][\\-+]?[0-9]+)?)+[\\s]+([\\-+]?[0-9]*\\.?[0-9]+([eE][\\-+]?[0-9]+)?)+[\\s]+([\\-+]?[0-9]*\\.?[0-9]+([eE][\\-+]?[0-9]+)?)+/g;\n\n      while ((result = patternNormal.exec(text)) !== null) {\n        normal = new THREE.Vector3(parseFloat(result[1]), parseFloat(result[3]), parseFloat(result[5]));\n      }\n\n      patternVertex = /vertex[\\s]+([\\-+]?[0-9]+\\.?[0-9]*([eE][\\-+]?[0-9]+)?)+[\\s]+([\\-+]?[0-9]*\\.?[0-9]+([eE][\\-+]?[0-9]+)?)+[\\s]+([\\-+]?[0-9]*\\.?[0-9]+([eE][\\-+]?[0-9]+)?)+/g;\n\n      while ((result = patternVertex.exec(text)) !== null) {\n        geometry.vertices.push(new THREE.Vector3(parseFloat(result[1]), parseFloat(result[3]), parseFloat(result[5])));\n      }\n\n      length = geometry.vertices.length;\n      geometry.faces.push(new THREE.Face3(length - 3, length - 2, length - 1, normal));\n    }\n\n    geometry.computeBoundingBox();\n    geometry.computeBoundingSphere();\n    return geometry;\n  },\n  ensureString: function ensureString(buf) {\n    if (typeof buf !== 'string') {\n      var array_buffer = new Uint8Array(buf);\n      var str = '';\n\n      for (var i = 0; i < buf.byteLength; i++) {\n        str += String.fromCharCode(array_buffer[i]); // implicitly assumes little-endian\n      }\n\n      return str;\n    } else {\n      return buf;\n    }\n  },\n  ensureBinary: function ensureBinary(buf) {\n    if (typeof buf === 'string') {\n      var array_buffer = new Uint8Array(buf.length);\n\n      for (var i = 0; i < buf.length; i++) {\n        array_buffer[i] = buf.charCodeAt(i) & 0xff; // implicitly assumes little-endian\n      }\n\n      return array_buffer.buffer || array_buffer;\n    } else {\n      return buf;\n    }\n  }\n};\n\nif (typeof DataView === 'undefined') {\n  DataView = function DataView(buffer, byteOffset, byteLength) {\n    this.buffer = buffer;\n    this.byteOffset = byteOffset || 0;\n    this.byteLength = byteLength || buffer.byteLength || buffer.length;\n    this._isString = typeof buffer === 'string';\n  };\n\n  DataView.prototype = {\n    _getCharCodes: function _getCharCodes(buffer, start, length) {\n      start = start || 0;\n      length = length || buffer.length;\n      var end = start + length;\n      var codes = [];\n\n      for (var i = start; i < end; i++) {\n        codes.push(buffer.charCodeAt(i) & 0xff);\n      }\n\n      return codes;\n    },\n    _getBytes: function _getBytes(length, byteOffset, littleEndian) {\n      var result; // Handle the lack of endianness\n\n      if (littleEndian === undefined) {\n        littleEndian = this._littleEndian;\n      } // Handle the lack of byteOffset\n\n\n      if (byteOffset === undefined) {\n        byteOffset = this.byteOffset;\n      } else {\n        byteOffset = this.byteOffset + byteOffset;\n      }\n\n      if (length === undefined) {\n        length = this.byteLength - byteOffset;\n      } // Error Checking\n\n\n      if (typeof byteOffset !== 'number') {\n        throw new TypeError('DataView byteOffset is not a number');\n      }\n\n      if (length < 0 || byteOffset + length > this.byteLength) {\n        throw new Error('DataView length or (byteOffset+length) value is out of bounds');\n      }\n\n      if (this.isString) {\n        result = this._getCharCodes(this.buffer, byteOffset, byteOffset + length);\n      } else {\n        result = this.buffer.slice(byteOffset, byteOffset + length);\n      }\n\n      if (!littleEndian && length > 1) {\n        if (!(result instanceof Array)) {\n          result = Array.prototype.slice.call(result);\n        }\n\n        result.reverse();\n      }\n\n      return result;\n    },\n    // Compatibility functions on a String Buffer\n    getFloat64: function getFloat64(byteOffset, littleEndian) {\n      var b = this._getBytes(8, byteOffset, littleEndian),\n          sign = 1 - 2 * (b[7] >> 7),\n          exponent = ((b[7] << 1 & 0xff) << 3 | b[6] >> 4) - ((1 << 10) - 1),\n          // Binary operators such as | and << operate on 32 bit values, using + and Math.pow(2) instead\n      mantissa = (b[6] & 0x0f) * Math.pow(2, 48) + b[5] * Math.pow(2, 40) + b[4] * Math.pow(2, 32) + b[3] * Math.pow(2, 24) + b[2] * Math.pow(2, 16) + b[1] * Math.pow(2, 8) + b[0];\n\n      if (exponent === 1024) {\n        if (mantissa !== 0) {\n          return NaN;\n        } else {\n          return sign * Infinity;\n        }\n      }\n\n      if (exponent === -1023) {\n        // Denormalized\n        return sign * mantissa * Math.pow(2, -1022 - 52);\n      }\n\n      return sign * (1 + mantissa * Math.pow(2, -52)) * Math.pow(2, exponent);\n    },\n    getFloat32: function getFloat32(byteOffset, littleEndian) {\n      var b = this._getBytes(4, byteOffset, littleEndian),\n          sign = 1 - 2 * (b[3] >> 7),\n          exponent = (b[3] << 1 & 0xff | b[2] >> 7) - 127,\n          mantissa = (b[2] & 0x7f) << 16 | b[1] << 8 | b[0];\n\n      if (exponent === 128) {\n        if (mantissa !== 0) {\n          return NaN;\n        } else {\n          return sign * Infinity;\n        }\n      }\n\n      if (exponent === -127) {\n        // Denormalized\n        return sign * mantissa * Math.pow(2, -126 - 23);\n      }\n\n      return sign * (1 + mantissa * Math.pow(2, -23)) * Math.pow(2, exponent);\n    },\n    getInt32: function getInt32(byteOffset, littleEndian) {\n      var b = this._getBytes(4, byteOffset, littleEndian);\n\n      return b[3] << 24 | b[2] << 16 | b[1] << 8 | b[0];\n    },\n    getUint32: function getUint32(byteOffset, littleEndian) {\n      return this.getInt32(byteOffset, littleEndian) >>> 0;\n    },\n    getInt16: function getInt16(byteOffset, littleEndian) {\n      return this.getUint16(byteOffset, littleEndian) << 16 >> 16;\n    },\n    getUint16: function getUint16(byteOffset, littleEndian) {\n      var b = this._getBytes(2, byteOffset, littleEndian);\n\n      return b[1] << 8 | b[0];\n    },\n    getInt8: function getInt8(byteOffset) {\n      return this.getUint8(byteOffset) << 24 >> 24;\n    },\n    getUint8: function getUint8(byteOffset) {\n      return this._getBytes(1, byteOffset)[0];\n    }\n  };\n}\n\nmodule.exports = THREE;","map":{"version":3,"names":["THREE","require","STLLoader","manager","undefined","DefaultLoadingManager","prototype","constructor","loadFromUrl","url","onLoad","onProgress","onError","scope","loader","XHRLoader","setCrossOrigin","crossOrigin","setResponseType","load","text","parse","loadFromFile","buffer","data","isBinary","expect","face_size","n_faces","reader","DataView","binData","getUint32","byteLength","fileLength","index","getUint8","ensureBinary","parseBinary","parseASCII","ensureString","faces","r","g","b","hasColors","colors","defaultR","defaultG","defaultB","alpha","Float32Array","dataOffset","faceLength","offset","geometry","BufferGeometry","vertices","normals","face","start","normalX","getFloat32","normalY","normalZ","packedColor","getUint16","i","vertexstart","addAttribute","BufferAttribute","length","normal","patternFace","patternNormal","patternVertex","result","Geometry","exec","Vector3","parseFloat","push","Face3","computeBoundingBox","computeBoundingSphere","buf","array_buffer","Uint8Array","str","String","fromCharCode","charCodeAt","byteOffset","_isString","_getCharCodes","end","codes","_getBytes","littleEndian","_littleEndian","TypeError","Error","isString","slice","Array","call","reverse","getFloat64","sign","exponent","mantissa","Math","pow","NaN","Infinity","getInt32","getInt16","getInt8","module","exports"],"sources":["/home/crow/Scrivania/AF2/newFrontEnd/node_modules/stl-viewer/dist/Three.js"],"sourcesContent":["'use strict';\n\nvar THREE = require('three');\n\n//\n// STL Loader added\n//\n/**\n * @author aleeper / http://adamleeper.com/\n * @author mrdoob / http://mrdoob.com/\n * @author gero3 / https://github.com/gero3\n *\n * Description: A THREE loader for STL ASCII files, as created by Solidworks and other CAD programs.\n *\n * Supports both binary and ASCII encoded files, with automatic detection of type.\n *\n * Limitations:\n *  Binary decoding supports \"Magics\" color format (http://en.wikipedia.org/wiki/STL_(file_format)#Color_in_binary_STL).\n *  There is perhaps some question as to how valid it is to always assume little-endian-ness.\n *  ASCII decoding assumes file is UTF-8. Seems to work for the examples...\n *\n * Usage:\n *  var loader = new THREE.STLLoader();\n *  loader.load( './models/stl/slotted_disk.stl', function ( geometry ) {\n *    scene.add( new THREE.Mesh( geometry ) );\n *  });\n *\n * For binary STLs geometry might contain colors for vertices. To use it:\n *  // use the same code to load STL as above\n *  if (geometry.hasColors) {\n *    material = new THREE.MeshPhongMaterial({ opacity: geometry.alpha, vertexColors: THREE.VertexColors });\n *  } else { .... }\n *  var mesh = new THREE.Mesh( geometry, material );\n */\n\nTHREE.STLLoader = function (manager) {\n  this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n};\n\nTHREE.STLLoader.prototype = {\n  constructor: THREE.STLLoader,\n\n  loadFromUrl: function loadFromUrl(url, onLoad, onProgress, onError) {\n    var scope = this;\n\n    var loader = new THREE.XHRLoader(scope.manager);\n    loader.setCrossOrigin(this.crossOrigin);\n    loader.setResponseType('arraybuffer');\n    loader.load(url, function (text) {\n      onLoad(scope.parse(text));\n    }, onProgress, onError);\n  },\n\n  loadFromFile: function loadFromFile(buffer, onLoad) {\n    var scope = this;\n    onLoad(scope.parse(buffer));\n  },\n\n  parse: function parse(data) {\n    var isBinary = function isBinary() {\n      var expect, face_size, n_faces, reader;\n      reader = new DataView(binData);\n      face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n      n_faces = reader.getUint32(80, true);\n      expect = 80 + 32 / 8 + n_faces * face_size;\n\n      if (expect === reader.byteLength) {\n        return true;\n      }\n\n      // some binary files will have different size from expected,\n      // checking characters higher than ASCII to confirm is binary\n      var fileLength = reader.byteLength;\n      for (var index = 0; index < fileLength; index++) {\n        if (reader.getUint8(index, false) > 127) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    var binData = this.ensureBinary(data);\n\n    return isBinary() ? this.parseBinary(binData) : this.parseASCII(this.ensureString(data));\n  },\n\n  parseBinary: function parseBinary(data) {\n    var reader = new DataView(data);\n    var faces = reader.getUint32(80, true);\n\n    var r,\n        g,\n        b,\n        hasColors = false,\n        colors;\n    var defaultR, defaultG, defaultB, alpha;\n\n    // process STL header\n    // check for default color in header (\"COLOR=rgba\" sequence).\n\n    for (var index = 0; index < 80 - 10; index++) {\n      if (reader.getUint32(index, false) == 0x434f4c4f /*COLO*/ && reader.getUint8(index + 4) == 0x52 /*'R'*/ && reader.getUint8(index + 5) == 0x3d /*'='*/\n      ) {\n          hasColors = true;\n          colors = new Float32Array(faces * 3 * 3);\n\n          defaultR = reader.getUint8(index + 6) / 255;\n          defaultG = reader.getUint8(index + 7) / 255;\n          defaultB = reader.getUint8(index + 8) / 255;\n          alpha = reader.getUint8(index + 9) / 255;\n        }\n    }\n\n    var dataOffset = 84;\n    var faceLength = 12 * 4 + 2;\n\n    var offset = 0;\n\n    var geometry = new THREE.BufferGeometry();\n\n    var vertices = new Float32Array(faces * 3 * 3);\n    var normals = new Float32Array(faces * 3 * 3);\n\n    for (var face = 0; face < faces; face++) {\n      var start = dataOffset + face * faceLength;\n      var normalX = reader.getFloat32(start, true);\n      var normalY = reader.getFloat32(start + 4, true);\n      var normalZ = reader.getFloat32(start + 8, true);\n\n      if (hasColors) {\n        var packedColor = reader.getUint16(start + 48, true);\n\n        if ((packedColor & 0x8000) === 0) {\n          // facet has its own unique color\n\n          r = (packedColor & 0x1f) / 31;\n          g = (packedColor >> 5 & 0x1f) / 31;\n          b = (packedColor >> 10 & 0x1f) / 31;\n        } else {\n          r = defaultR;\n          g = defaultG;\n          b = defaultB;\n        }\n      }\n\n      for (var i = 1; i <= 3; i++) {\n        var vertexstart = start + i * 12;\n\n        vertices[offset] = reader.getFloat32(vertexstart, true);\n        vertices[offset + 1] = reader.getFloat32(vertexstart + 4, true);\n        vertices[offset + 2] = reader.getFloat32(vertexstart + 8, true);\n\n        normals[offset] = normalX;\n        normals[offset + 1] = normalY;\n        normals[offset + 2] = normalZ;\n\n        if (hasColors) {\n          colors[offset] = r;\n          colors[offset + 1] = g;\n          colors[offset + 2] = b;\n        }\n\n        offset += 3;\n      }\n    }\n\n    geometry.addAttribute('position', new THREE.BufferAttribute(vertices, 3));\n    geometry.addAttribute('normal', new THREE.BufferAttribute(normals, 3));\n\n    if (hasColors) {\n      geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3));\n      geometry.hasColors = true;\n      geometry.alpha = alpha;\n    }\n\n    return geometry;\n  },\n\n  parseASCII: function parseASCII(data) {\n    var geometry, length, normal, patternFace, patternNormal, patternVertex, result, text;\n    geometry = new THREE.Geometry();\n    patternFace = /facet([\\s\\S]*?)endfacet/g;\n\n    while ((result = patternFace.exec(data)) !== null) {\n      text = result[0];\n      patternNormal = /normal[\\s]+([\\-+]?[0-9]+\\.?[0-9]*([eE][\\-+]?[0-9]+)?)+[\\s]+([\\-+]?[0-9]*\\.?[0-9]+([eE][\\-+]?[0-9]+)?)+[\\s]+([\\-+]?[0-9]*\\.?[0-9]+([eE][\\-+]?[0-9]+)?)+/g;\n\n      while ((result = patternNormal.exec(text)) !== null) {\n        normal = new THREE.Vector3(parseFloat(result[1]), parseFloat(result[3]), parseFloat(result[5]));\n      }\n\n      patternVertex = /vertex[\\s]+([\\-+]?[0-9]+\\.?[0-9]*([eE][\\-+]?[0-9]+)?)+[\\s]+([\\-+]?[0-9]*\\.?[0-9]+([eE][\\-+]?[0-9]+)?)+[\\s]+([\\-+]?[0-9]*\\.?[0-9]+([eE][\\-+]?[0-9]+)?)+/g;\n\n      while ((result = patternVertex.exec(text)) !== null) {\n        geometry.vertices.push(new THREE.Vector3(parseFloat(result[1]), parseFloat(result[3]), parseFloat(result[5])));\n      }\n\n      length = geometry.vertices.length;\n\n      geometry.faces.push(new THREE.Face3(length - 3, length - 2, length - 1, normal));\n    }\n\n    geometry.computeBoundingBox();\n    geometry.computeBoundingSphere();\n\n    return geometry;\n  },\n\n  ensureString: function ensureString(buf) {\n    if (typeof buf !== 'string') {\n      var array_buffer = new Uint8Array(buf);\n      var str = '';\n      for (var i = 0; i < buf.byteLength; i++) {\n        str += String.fromCharCode(array_buffer[i]); // implicitly assumes little-endian\n      }\n      return str;\n    } else {\n      return buf;\n    }\n  },\n\n  ensureBinary: function ensureBinary(buf) {\n    if (typeof buf === 'string') {\n      var array_buffer = new Uint8Array(buf.length);\n      for (var i = 0; i < buf.length; i++) {\n        array_buffer[i] = buf.charCodeAt(i) & 0xff; // implicitly assumes little-endian\n      }\n      return array_buffer.buffer || array_buffer;\n    } else {\n      return buf;\n    }\n  }\n};\n\nif (typeof DataView === 'undefined') {\n  DataView = function DataView(buffer, byteOffset, byteLength) {\n    this.buffer = buffer;\n    this.byteOffset = byteOffset || 0;\n    this.byteLength = byteLength || buffer.byteLength || buffer.length;\n    this._isString = typeof buffer === 'string';\n  };\n\n  DataView.prototype = {\n    _getCharCodes: function _getCharCodes(buffer, start, length) {\n      start = start || 0;\n      length = length || buffer.length;\n      var end = start + length;\n      var codes = [];\n      for (var i = start; i < end; i++) {\n        codes.push(buffer.charCodeAt(i) & 0xff);\n      }\n      return codes;\n    },\n\n    _getBytes: function _getBytes(length, byteOffset, littleEndian) {\n      var result;\n\n      // Handle the lack of endianness\n      if (littleEndian === undefined) {\n        littleEndian = this._littleEndian;\n      }\n\n      // Handle the lack of byteOffset\n      if (byteOffset === undefined) {\n        byteOffset = this.byteOffset;\n      } else {\n        byteOffset = this.byteOffset + byteOffset;\n      }\n\n      if (length === undefined) {\n        length = this.byteLength - byteOffset;\n      }\n\n      // Error Checking\n      if (typeof byteOffset !== 'number') {\n        throw new TypeError('DataView byteOffset is not a number');\n      }\n\n      if (length < 0 || byteOffset + length > this.byteLength) {\n        throw new Error('DataView length or (byteOffset+length) value is out of bounds');\n      }\n\n      if (this.isString) {\n        result = this._getCharCodes(this.buffer, byteOffset, byteOffset + length);\n      } else {\n        result = this.buffer.slice(byteOffset, byteOffset + length);\n      }\n\n      if (!littleEndian && length > 1) {\n        if (!(result instanceof Array)) {\n          result = Array.prototype.slice.call(result);\n        }\n\n        result.reverse();\n      }\n\n      return result;\n    },\n\n    // Compatibility functions on a String Buffer\n\n    getFloat64: function getFloat64(byteOffset, littleEndian) {\n      var b = this._getBytes(8, byteOffset, littleEndian),\n          sign = 1 - 2 * (b[7] >> 7),\n          exponent = ((b[7] << 1 & 0xff) << 3 | b[6] >> 4) - ((1 << 10) - 1),\n\n      // Binary operators such as | and << operate on 32 bit values, using + and Math.pow(2) instead\n      mantissa = (b[6] & 0x0f) * Math.pow(2, 48) + b[5] * Math.pow(2, 40) + b[4] * Math.pow(2, 32) + b[3] * Math.pow(2, 24) + b[2] * Math.pow(2, 16) + b[1] * Math.pow(2, 8) + b[0];\n\n      if (exponent === 1024) {\n        if (mantissa !== 0) {\n          return NaN;\n        } else {\n          return sign * Infinity;\n        }\n      }\n\n      if (exponent === -1023) {\n        // Denormalized\n        return sign * mantissa * Math.pow(2, -1022 - 52);\n      }\n\n      return sign * (1 + mantissa * Math.pow(2, -52)) * Math.pow(2, exponent);\n    },\n\n    getFloat32: function getFloat32(byteOffset, littleEndian) {\n      var b = this._getBytes(4, byteOffset, littleEndian),\n          sign = 1 - 2 * (b[3] >> 7),\n          exponent = (b[3] << 1 & 0xff | b[2] >> 7) - 127,\n          mantissa = (b[2] & 0x7f) << 16 | b[1] << 8 | b[0];\n\n      if (exponent === 128) {\n        if (mantissa !== 0) {\n          return NaN;\n        } else {\n          return sign * Infinity;\n        }\n      }\n\n      if (exponent === -127) {\n        // Denormalized\n        return sign * mantissa * Math.pow(2, -126 - 23);\n      }\n\n      return sign * (1 + mantissa * Math.pow(2, -23)) * Math.pow(2, exponent);\n    },\n\n    getInt32: function getInt32(byteOffset, littleEndian) {\n      var b = this._getBytes(4, byteOffset, littleEndian);\n      return b[3] << 24 | b[2] << 16 | b[1] << 8 | b[0];\n    },\n\n    getUint32: function getUint32(byteOffset, littleEndian) {\n      return this.getInt32(byteOffset, littleEndian) >>> 0;\n    },\n\n    getInt16: function getInt16(byteOffset, littleEndian) {\n      return this.getUint16(byteOffset, littleEndian) << 16 >> 16;\n    },\n\n    getUint16: function getUint16(byteOffset, littleEndian) {\n      var b = this._getBytes(2, byteOffset, littleEndian);\n      return b[1] << 8 | b[0];\n    },\n\n    getInt8: function getInt8(byteOffset) {\n      return this.getUint8(byteOffset) << 24 >> 24;\n    },\n\n    getUint8: function getUint8(byteOffset) {\n      return this._getBytes(1, byteOffset)[0];\n    }\n  };\n}\n\nmodule.exports = THREE;"],"mappings":"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"},"metadata":{},"sourceType":"script"}