{"ast":null,"code":"var _jsxFileName = \"/home/mike/Scrivania/provaFrontEnd/af2_front_end_test/src/Pages/StlLoad/StlLoad.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { UserNav } from \"../../component/Navbar/homeNav\";\nimport { create } from \"ipfs-http-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = create({\n  host: \"https://ipfs.infura.io:5001/api/v0'\",\n  port: '5001',\n  protocol: 'https',\n  apiPath: ''\n});\nexport default function StlLoad() {\n  _s();\n\n  const [file, setFile] = useState();\n  const [urlArray, setUrlArray] = useState([]);\n\n  const retrieveFile = e => {\n    const data = e.target.files[0];\n    const reader = new window.FileReader();\n    reader.readAsArrayBuffer(data);\n\n    reader.onloadend = () => {\n      console.log(\"Buffer data: \", Buffer(reader.result));\n      setFile(Buffer(reader.result));\n    };\n\n    e.preventDefault();\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    try {\n      const created = await client.add(file);\n      const url = \"https://ipfs.infura.io/ipfs/\" + created.path;\n      setUrlArray(prev => [...prev, url]);\n    } catch (erorr) {\n      console.log(\"error.message\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"StlLoad\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        name: \"data\",\n        onChange: retrieveFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn\",\n        children: \"Upload file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"display\",\n      children: urlArray.length !== 0 ? urlArray.map(el => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: el,\n        alt: \"nfts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 34\n      }, this)) : /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Upload data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n\n_s(StlLoad, \"/KBFFnqlstwDtQYus1x18psPjN8=\");\n\n_c = StlLoad;\n\nvar _c;\n\n$RefreshReg$(_c, \"StlLoad\");","map":{"version":3,"sources":["/home/mike/Scrivania/provaFrontEnd/af2_front_end_test/src/Pages/StlLoad/StlLoad.js"],"names":["useState","UserNav","create","client","host","port","protocol","apiPath","StlLoad","file","setFile","urlArray","setUrlArray","retrieveFile","e","data","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","console","log","Buffer","result","preventDefault","handleSubmit","created","add","url","path","prev","erorr","length","map","el"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,OAAT,QAAwB,gCAAxB;AACA,SAASC,MAAT,QAAuB,kBAAvB;;AAGA,MAAMC,MAAM,GAACD,MAAM,CAAC;AAACE,EAAAA,IAAI,EAAC,qCAAN;AAA4CC,EAAAA,IAAI,EAAE,MAAlD;AAAyDC,EAAAA,QAAQ,EAAE,OAAnE;AAA4EC,EAAAA,OAAO,EAAE;AAArF,CAAD,CAAnB;AAEA,eAAe,SAASC,OAAT,GAAkB;AAAA;;AAE7B,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAeV,QAAQ,EAA7B;AACA,QAAM,CAACW,QAAD,EAAUC,WAAV,IAAuBZ,QAAQ,CAAC,EAAD,CAArC;;AAEA,QAAMa,YAAY,GAAEC,CAAD,IAAK;AACpB,UAAMC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASC,KAAT,CAAe,CAAf,CAAb;AACA,UAAMC,MAAM,GAAG,IAAIC,MAAM,CAACC,UAAX,EAAf;AACAF,IAAAA,MAAM,CAACG,iBAAP,CAAyBN,IAAzB;;AACAG,IAAAA,MAAM,CAACI,SAAP,GAAmB,MAAM;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BC,MAAM,CAACP,MAAM,CAACQ,MAAR,CAAnC;AACAhB,MAAAA,OAAO,CAACe,MAAM,CAACP,MAAM,CAACQ,MAAR,CAAP,CAAP;AACD,KAHD;;AAIAZ,IAAAA,CAAC,CAACa,cAAF;AACH,GATD;;AAUA,QAAMC,YAAY,GAAC,MAAMd,CAAN,IAAU;AACzBA,IAAAA,CAAC,CAACa,cAAF;;AACA,QAAG;AACC,YAAME,OAAO,GAAE,MAAM1B,MAAM,CAAC2B,GAAP,CAAWrB,IAAX,CAArB;AACA,YAAMsB,GAAG,GAAE,iCAA+BF,OAAO,CAACG,IAAlD;AACApB,MAAAA,WAAW,CAAEqB,IAAD,IAAQ,CAAC,GAAGA,IAAJ,EAASF,GAAT,CAAT,CAAX;AACH,KAJD,CAKA,OAAMG,KAAN,EAAY;AACRX,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH;AACJ,GAVD;;AAYA,sBACI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,4BACA;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAuB,MAAA,QAAQ,EAAEI,YAAjC;AAAA,8BACE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,MAAxB;AAA+B,QAAA,QAAQ,EAAEf;AAAzC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAMA;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,gBACCF,QAAQ,CAACwB,MAAT,KAAoB,CAApB,GACGxB,QAAQ,CAACyB,GAAT,CAAcC,EAAD,iBAAQ;AAAK,QAAA,GAAG,EAAEA,EAAV;AAAc,QAAA,GAAG,EAAC;AAAlB;AAAA;AAAA;AAAA;AAAA,cAArB,CADH,gBAEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,YANA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH;;GAzCuB7B,O;;KAAAA,O","sourcesContent":["import { useState } from \"react\";\nimport { UserNav } from \"../../component/Navbar/homeNav\";\nimport { create } from \"ipfs-http-client\";\n\n\nconst client=create({host:\"https://ipfs.infura.io:5001/api/v0'\",port: '5001',protocol: 'https', apiPath: ''})\n\nexport default function StlLoad(){\n    \n    const [file,setFile]=useState();\n    const [urlArray,setUrlArray]=useState([])\n\n    const retrieveFile=(e)=>{\n        const data = e.target.files[0];\n        const reader = new window.FileReader();\n        reader.readAsArrayBuffer(data);\n        reader.onloadend = () => {\n          console.log(\"Buffer data: \", Buffer(reader.result));\n          setFile(Buffer(reader.result));\n        }\n        e.preventDefault();\n    }\n    const handleSubmit=async(e)=>{\n        e.preventDefault();\n        try{\n            const created =await client.add(file);\n            const url= \"https://ipfs.infura.io/ipfs/\"+created.path;\n            setUrlArray((prev)=>[...prev,url])\n        }\n        catch(erorr){\n            console.log(\"error.message\");\n        }\n    }\n\n    return (\n        <div className=\"StlLoad\">\n        <form className=\"form\" onSubmit={handleSubmit}>\n          <input type=\"file\" name=\"data\" onChange={retrieveFile} />\n          <button type=\"submit\" className=\"btn\">Upload file</button>\n        </form>\n\n        <div className=\"display\">\n        {urlArray.length !== 0\n          ? urlArray.map((el) => <img src={el} alt=\"nfts\" />)\n          : <h3>Upload data</h3>}\n      </div>\n      </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}