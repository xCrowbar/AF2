{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function takeWhile(predicate, inclusive) {\n  if (inclusive === void 0) {\n    inclusive = false;\n  }\n\n  return function (source) {\n    return source.lift(new TakeWhileOperator(predicate, inclusive));\n  };\n}\n\nvar TakeWhileOperator = /*@__PURE__*/function () {\n  function TakeWhileOperator(predicate, inclusive) {\n    this.predicate = predicate;\n    this.inclusive = inclusive;\n  }\n\n  TakeWhileOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));\n  };\n\n  return TakeWhileOperator;\n}();\n\nvar TakeWhileSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(TakeWhileSubscriber, _super);\n\n  function TakeWhileSubscriber(destination, predicate, inclusive) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.predicate = predicate;\n    _this.inclusive = inclusive;\n    _this.index = 0;\n    return _this;\n  }\n\n  TakeWhileSubscriber.prototype._next = function (value) {\n    var destination = this.destination;\n    var result;\n\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    this.nextOrComplete(value, result);\n  };\n\n  TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n    var destination = this.destination;\n\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      if (this.inclusive) {\n        destination.next(value);\n      }\n\n      destination.complete();\n    }\n  };\n\n  return TakeWhileSubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AAEA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AAmDA,SAAMC,UAAN,QACI,eADJ;OAEI;AACF,eAAO,KAAC,KAAqB,CAA7B,EAA6B;AAClBC;AAAwD;;AACpE;AAED;AACE,GAHD;;;qBAKa,GAAS,aAAS;AAAG,WAACC,iBAAD,CAACC,SAAD,EAACF,SAAD,EAAC;AAElC;AACE,qBAAcA,SAAd;AAED;;AACHC,8BAACE,IAAD,GAAC;AAAA;AAOD,GAPA;;AAOqC;CAbL;;uBAoB5B,gBAAM,UAAYC,MAAZ,EACP;SAHW,gCAA+CA;;WAC/CC,iCAAkBH;AALtB,gBAAKE,MAAa,KAAb,CAAa,IAAb,EAAaE,WAAb,KAAa,IAAlB;;;AAOPC;AAESA;AACR,WAAMA,KAAN;;;qBAEI;QACFD,WAAS,GAAK;QACfE;;AAAC;AACAA,oBAAYN,SAAZ,CAAuBO,KAAvB,EAAuB,YAAvB;KADA,QAGDC;AACGJ,iBAAC,MAAD,CAAgBI,GAAhB;AACL;AAEO;;AACN,SAAMC,cAAN,CAAoBF,KAApB,EAAyBD,MAAzB;;;qBAEa,CAACI,UAAUD,iBAAE;QACzBL;;eAAM;AACLA,iBAAS,KAAT,CAASG,KAAT;WAEC;AACD,0BAAoB;AACrBH;AACF;;AACHA;AAjCqC;;;;CAO3B","names":["tslib_1","Subscriber","inclusive","TakeWhileOperator","predicate","call","_super","TakeWhileSubscriber","destination","_this","result","value","err","nextOrComplete","prototype"],"sources":["../../../src/internal/operators/takeWhile.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}