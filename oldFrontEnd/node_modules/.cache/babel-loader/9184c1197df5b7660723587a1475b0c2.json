{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CoinbaseWalletSDK = void 0;\n\nconst ScopedLocalStorage_1 = require(\"./lib/ScopedLocalStorage\");\n\nconst CoinbaseWalletProvider_1 = require(\"./provider/CoinbaseWalletProvider\");\n\nconst WalletSDKUI_1 = require(\"./provider/WalletSDKUI\");\n\nconst WalletSDKRelay_1 = require(\"./relay/WalletSDKRelay\");\n\nconst WalletSDKRelayEventManager_1 = require(\"./relay/WalletSDKRelayEventManager\");\n\nconst util_1 = require(\"./util\");\n\nconst LINK_API_URL = process.env.LINK_API_URL || \"https://www.walletlink.org\";\nconst SDK_VERSION = process.env.SDK_VERSION || require(\"../package.json\").version || \"unknown\";\n\nclass CoinbaseWalletSDK {\n  /**\n   * Constructor\n   * @param options Coinbase Wallet SDK constructor options\n   */\n  constructor(options) {\n    var _a, _b;\n\n    this._appName = \"\";\n    this._appLogoUrl = null;\n    this._relay = null;\n    this._relayEventManager = null;\n    const linkAPIUrl = options.linkAPIUrl || LINK_API_URL;\n    let uiConstructor;\n\n    if (!options.uiConstructor) {\n      uiConstructor = opts => new WalletSDKUI_1.WalletSDKUI(opts);\n    } else {\n      uiConstructor = options.uiConstructor;\n    }\n\n    if (typeof options.overrideIsMetaMask === \"undefined\") {\n      this._overrideIsMetaMask = false;\n    } else {\n      this._overrideIsMetaMask = options.overrideIsMetaMask;\n    }\n\n    this._overrideIsCoinbaseWallet = (_a = options.overrideIsCoinbaseWallet) !== null && _a !== void 0 ? _a : true;\n    this._overrideIsCoinbaseBrowser = (_b = options.overrideIsCoinbaseBrowser) !== null && _b !== void 0 ? _b : false;\n    this._eventListener = options.eventListener;\n    const u = new URL(linkAPIUrl);\n    const origin = `${u.protocol}//${u.host}`;\n    this._storage = new ScopedLocalStorage_1.ScopedLocalStorage(`-walletlink:${origin}`); // needs migration to preserve local states\n\n    this._storage.setItem(\"version\", CoinbaseWalletSDK.VERSION);\n\n    if (this.walletExtension) {\n      return;\n    }\n\n    this._relayEventManager = new WalletSDKRelayEventManager_1.WalletSDKRelayEventManager();\n    this._relay = new WalletSDKRelay_1.WalletSDKRelay({\n      linkAPIUrl,\n      version: SDK_VERSION,\n      darkMode: !!options.darkMode,\n      uiConstructor,\n      storage: this._storage,\n      relayEventManager: this._relayEventManager,\n      eventListener: this._eventListener\n    });\n    this.setAppInfo(options.appName, options.appLogoUrl);\n    if (!!options.headlessMode) return;\n\n    this._relay.attachUI();\n  }\n  /**\n   * Create a Web3 Provider object\n   * @param jsonRpcUrl Ethereum JSON RPC URL (Default: \"\")\n   * @param chainId Ethereum Chain ID (Default: 1)\n   * @returns A Web3 Provider\n   */\n\n\n  makeWeb3Provider() {\n    let jsonRpcUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    let chainId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const extension = this.walletExtension;\n\n    if (extension) {\n      if (!this.isCipherProvider(extension)) {\n        extension.setProviderInfo(jsonRpcUrl, chainId);\n      }\n\n      return extension;\n    }\n\n    const relay = this._relay;\n\n    if (!relay || !this._relayEventManager || !this._storage) {\n      throw new Error(\"Relay not initialized, should never happen\");\n    }\n\n    if (!jsonRpcUrl) relay.setConnectDisabled(true);\n    return new CoinbaseWalletProvider_1.CoinbaseWalletProvider({\n      relayProvider: () => Promise.resolve(relay),\n      relayEventManager: this._relayEventManager,\n      storage: this._storage,\n      jsonRpcUrl,\n      chainId,\n      qrUrl: this.getQrUrl(),\n      eventListener: this._eventListener,\n      overrideIsMetaMask: this._overrideIsMetaMask,\n      overrideIsCoinbaseWallet: this._overrideIsCoinbaseWallet,\n      overrideIsCoinbaseBrowser: this._overrideIsCoinbaseBrowser\n    });\n  }\n  /**\n   * Set application information\n   * @param appName Application name\n   * @param appLogoUrl Application logo image URL\n   */\n\n\n  setAppInfo(appName, appLogoUrl) {\n    var _a;\n\n    this._appName = appName || \"DApp\";\n    this._appLogoUrl = appLogoUrl || (0, util_1.getFavicon)();\n    const extension = this.walletExtension;\n\n    if (extension) {\n      if (!this.isCipherProvider(extension)) {\n        extension.setAppInfo(this._appName, this._appLogoUrl);\n      }\n    } else {\n      (_a = this._relay) === null || _a === void 0 ? void 0 : _a.setAppInfo(this._appName, this._appLogoUrl);\n    }\n  }\n  /**\n   * Disconnect. After disconnecting, this will reload the web page to ensure\n   * all potential stale state is cleared.\n   */\n\n\n  disconnect() {\n    var _a;\n\n    const extension = this.walletExtension;\n\n    if (extension) {\n      extension.close();\n    } else {\n      (_a = this._relay) === null || _a === void 0 ? void 0 : _a.resetAndReload();\n    }\n  }\n  /**\n   * Return QR URL for mobile wallet connection, will return null if extension is installed\n   */\n\n\n  getQrUrl() {\n    var _a, _b;\n\n    return (_b = (_a = this._relay) === null || _a === void 0 ? void 0 : _a.getQRCodeUrl()) !== null && _b !== void 0 ? _b : null;\n  }\n\n  get walletExtension() {\n    var _a;\n\n    return (_a = window.coinbaseWalletExtension) !== null && _a !== void 0 ? _a : window.walletLinkExtension;\n  }\n\n  isCipherProvider(provider) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return typeof provider.isCipher === \"boolean\" && provider.isCipher;\n  }\n\n}\n\nexports.CoinbaseWalletSDK = CoinbaseWalletSDK;\nCoinbaseWalletSDK.VERSION = SDK_VERSION;","map":{"version":3,"sources":["/home/mike/Scrivania/provaFrontEnd/af2_front_end_test/node_modules/@coinbase/wallet-sdk/dist/CoinbaseWalletSDK.js"],"names":["Object","defineProperty","exports","value","CoinbaseWalletSDK","ScopedLocalStorage_1","require","CoinbaseWalletProvider_1","WalletSDKUI_1","WalletSDKRelay_1","WalletSDKRelayEventManager_1","util_1","LINK_API_URL","process","env","SDK_VERSION","version","constructor","options","_a","_b","_appName","_appLogoUrl","_relay","_relayEventManager","linkAPIUrl","uiConstructor","opts","WalletSDKUI","overrideIsMetaMask","_overrideIsMetaMask","_overrideIsCoinbaseWallet","overrideIsCoinbaseWallet","_overrideIsCoinbaseBrowser","overrideIsCoinbaseBrowser","_eventListener","eventListener","u","URL","origin","protocol","host","_storage","ScopedLocalStorage","setItem","VERSION","walletExtension","WalletSDKRelayEventManager","WalletSDKRelay","darkMode","storage","relayEventManager","setAppInfo","appName","appLogoUrl","headlessMode","attachUI","makeWeb3Provider","jsonRpcUrl","chainId","extension","isCipherProvider","setProviderInfo","relay","Error","setConnectDisabled","CoinbaseWalletProvider","relayProvider","Promise","resolve","qrUrl","getQrUrl","getFavicon","disconnect","close","resetAndReload","getQRCodeUrl","window","coinbaseWalletExtension","walletLinkExtension","provider","isCipher"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CoinbaseWalletSDK = void 0;\nconst ScopedLocalStorage_1 = require(\"./lib/ScopedLocalStorage\");\nconst CoinbaseWalletProvider_1 = require(\"./provider/CoinbaseWalletProvider\");\nconst WalletSDKUI_1 = require(\"./provider/WalletSDKUI\");\nconst WalletSDKRelay_1 = require(\"./relay/WalletSDKRelay\");\nconst WalletSDKRelayEventManager_1 = require(\"./relay/WalletSDKRelayEventManager\");\nconst util_1 = require(\"./util\");\nconst LINK_API_URL = process.env.LINK_API_URL || \"https://www.walletlink.org\";\nconst SDK_VERSION = process.env.SDK_VERSION || require(\"../package.json\").version || \"unknown\";\nclass CoinbaseWalletSDK {\n    /**\n     * Constructor\n     * @param options Coinbase Wallet SDK constructor options\n     */\n    constructor(options) {\n        var _a, _b;\n        this._appName = \"\";\n        this._appLogoUrl = null;\n        this._relay = null;\n        this._relayEventManager = null;\n        const linkAPIUrl = options.linkAPIUrl || LINK_API_URL;\n        let uiConstructor;\n        if (!options.uiConstructor) {\n            uiConstructor = opts => new WalletSDKUI_1.WalletSDKUI(opts);\n        }\n        else {\n            uiConstructor = options.uiConstructor;\n        }\n        if (typeof options.overrideIsMetaMask === \"undefined\") {\n            this._overrideIsMetaMask = false;\n        }\n        else {\n            this._overrideIsMetaMask = options.overrideIsMetaMask;\n        }\n        this._overrideIsCoinbaseWallet = (_a = options.overrideIsCoinbaseWallet) !== null && _a !== void 0 ? _a : true;\n        this._overrideIsCoinbaseBrowser =\n            (_b = options.overrideIsCoinbaseBrowser) !== null && _b !== void 0 ? _b : false;\n        this._eventListener = options.eventListener;\n        const u = new URL(linkAPIUrl);\n        const origin = `${u.protocol}//${u.host}`;\n        this._storage = new ScopedLocalStorage_1.ScopedLocalStorage(`-walletlink:${origin}`); // needs migration to preserve local states\n        this._storage.setItem(\"version\", CoinbaseWalletSDK.VERSION);\n        if (this.walletExtension) {\n            return;\n        }\n        this._relayEventManager = new WalletSDKRelayEventManager_1.WalletSDKRelayEventManager();\n        this._relay = new WalletSDKRelay_1.WalletSDKRelay({\n            linkAPIUrl,\n            version: SDK_VERSION,\n            darkMode: !!options.darkMode,\n            uiConstructor,\n            storage: this._storage,\n            relayEventManager: this._relayEventManager,\n            eventListener: this._eventListener\n        });\n        this.setAppInfo(options.appName, options.appLogoUrl);\n        if (!!options.headlessMode)\n            return;\n        this._relay.attachUI();\n    }\n    /**\n     * Create a Web3 Provider object\n     * @param jsonRpcUrl Ethereum JSON RPC URL (Default: \"\")\n     * @param chainId Ethereum Chain ID (Default: 1)\n     * @returns A Web3 Provider\n     */\n    makeWeb3Provider(jsonRpcUrl = \"\", chainId = 1) {\n        const extension = this.walletExtension;\n        if (extension) {\n            if (!this.isCipherProvider(extension)) {\n                extension.setProviderInfo(jsonRpcUrl, chainId);\n            }\n            return extension;\n        }\n        const relay = this._relay;\n        if (!relay || !this._relayEventManager || !this._storage) {\n            throw new Error(\"Relay not initialized, should never happen\");\n        }\n        if (!jsonRpcUrl)\n            relay.setConnectDisabled(true);\n        return new CoinbaseWalletProvider_1.CoinbaseWalletProvider({\n            relayProvider: () => Promise.resolve(relay),\n            relayEventManager: this._relayEventManager,\n            storage: this._storage,\n            jsonRpcUrl,\n            chainId,\n            qrUrl: this.getQrUrl(),\n            eventListener: this._eventListener,\n            overrideIsMetaMask: this._overrideIsMetaMask,\n            overrideIsCoinbaseWallet: this._overrideIsCoinbaseWallet,\n            overrideIsCoinbaseBrowser: this._overrideIsCoinbaseBrowser\n        });\n    }\n    /**\n     * Set application information\n     * @param appName Application name\n     * @param appLogoUrl Application logo image URL\n     */\n    setAppInfo(appName, appLogoUrl) {\n        var _a;\n        this._appName = appName || \"DApp\";\n        this._appLogoUrl = appLogoUrl || (0, util_1.getFavicon)();\n        const extension = this.walletExtension;\n        if (extension) {\n            if (!this.isCipherProvider(extension)) {\n                extension.setAppInfo(this._appName, this._appLogoUrl);\n            }\n        }\n        else {\n            (_a = this._relay) === null || _a === void 0 ? void 0 : _a.setAppInfo(this._appName, this._appLogoUrl);\n        }\n    }\n    /**\n     * Disconnect. After disconnecting, this will reload the web page to ensure\n     * all potential stale state is cleared.\n     */\n    disconnect() {\n        var _a;\n        const extension = this.walletExtension;\n        if (extension) {\n            extension.close();\n        }\n        else {\n            (_a = this._relay) === null || _a === void 0 ? void 0 : _a.resetAndReload();\n        }\n    }\n    /**\n     * Return QR URL for mobile wallet connection, will return null if extension is installed\n     */\n    getQrUrl() {\n        var _a, _b;\n        return (_b = (_a = this._relay) === null || _a === void 0 ? void 0 : _a.getQRCodeUrl()) !== null && _b !== void 0 ? _b : null;\n    }\n    get walletExtension() {\n        var _a;\n        return (_a = window.coinbaseWalletExtension) !== null && _a !== void 0 ? _a : window.walletLinkExtension;\n    }\n    isCipherProvider(provider) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        return typeof provider.isCipher === \"boolean\" && provider.isCipher;\n    }\n}\nexports.CoinbaseWalletSDK = CoinbaseWalletSDK;\nCoinbaseWalletSDK.VERSION = SDK_VERSION;\n"]},"metadata":{},"sourceType":"script"}