{"ast":null,"code":"var _jsxFileName = \"/home/mike/Scrivania/provaFrontEnd/af2_front_end_test/src/component/Context/userLogContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport User from \"../../SmartContracts/Users/Users\";\nimport Web3 from \"web3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/React.createContext();\nexport const UsercheckProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [username, setUsername] = useState('');\n  const [account, setAccount] = useState(null);\n  let [web3, setWeb3] = useState(null);\n  const user = new User();\n\n  async function checkAccount() {\n    let web3 = new Web3(window.ethereum);\n    setWeb3(web3);\n    const accounts = await web3.eth.getAccounts();\n    setAccount(accounts[0]);\n  }\n\n  useEffect(async () => {\n    checkAccount();\n    if (account.length == 0) return setAccount(0);else if (user.isUser()) {\n      let userData = user.getUser();\n      setUsername(userData.username);\n    } else return setUsername(undefined);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      username,\n      account,\n      setAccount,\n      setUsername\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UsercheckProvider, \"gEOr0YCuCEv+EpsmuSKQ78lUTcc=\");\n\n_c = UsercheckProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UsercheckProvider\");","map":{"version":3,"sources":["/home/mike/Scrivania/provaFrontEnd/af2_front_end_test/src/component/Context/userLogContext.js"],"names":["React","useEffect","User","Web3","UserContext","createContext","UsercheckProvider","children","username","setUsername","useState","account","setAccount","web3","setWeb3","user","checkAccount","window","ethereum","accounts","eth","getAccounts","length","isUser","userData","getUser","undefined"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,kCAAjB;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,OAAO,MAAMC,WAAW,gBAACJ,KAAK,CAACK,aAAN,EAAlB;AAGP,OAAO,MAAMC,iBAAiB,GAAC,QAAc;AAAA;;AAAA,MAAb;AAACC,IAAAA;AAAD,GAAa;AACzC,QAAM,CAACC,QAAD,EAAUC,WAAV,IAAuBC,QAAQ,CAAC,EAAD,CAArC;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBF,QAAQ,CAAC,IAAD,CAAtC;AACA,MAAI,CAACG,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,IAAD,CAA9B;AACA,QAAMK,IAAI,GAAE,IAAIb,IAAJ,EAAZ;;AAEA,iBAAec,YAAf,GAA6B;AACzB,QAAIH,IAAI,GAAG,IAAIV,IAAJ,CAASc,MAAM,CAACC,QAAhB,CAAX;AACAJ,IAAAA,OAAO,CAACD,IAAD,CAAP;AACA,UAAMM,QAAQ,GAAG,MAAMN,IAAI,CAACO,GAAL,CAASC,WAAT,EAAvB;AACAT,IAAAA,UAAU,CAACO,QAAQ,CAAC,CAAD,CAAT,CAAV;AACH;;AAEDlB,EAAAA,SAAS,CAAC,YAAS;AACfe,IAAAA,YAAY;AACZ,QAAGL,OAAO,CAACW,MAAR,IAAgB,CAAnB,EACI,OAAOV,UAAU,CAAC,CAAD,CAAjB,CADJ,KAEK,IAAGG,IAAI,CAACQ,MAAL,EAAH,EAAiB;AAClB,UAAIC,QAAQ,GAACT,IAAI,CAACU,OAAL,EAAb;AACAhB,MAAAA,WAAW,CAACe,QAAQ,CAAChB,QAAV,CAAX;AACH,KAHI,MAKD,OAAOC,WAAW,CAACiB,SAAD,CAAlB;AACP,GAVQ,EAUP,EAVO,CAAT;AAaA,sBACI,QAAC,WAAD,CAAa,QAAb;AACI,IAAA,KAAK,EAAE;AACHlB,MAAAA,QADG;AAEHG,MAAAA,OAFG;AAGHC,MAAAA,UAHG;AAIHH,MAAAA;AAJG,KADX;AAAA,cASKF;AATL;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CAvCM;;GAAMD,iB;;KAAAA,iB","sourcesContent":["import React, { useEffect } from \"react\";\nimport User from \"../../SmartContracts/Users/Users\";\nimport Web3 from \"web3\";\n\nexport const UserContext=React.createContext();\n\n\nexport const UsercheckProvider=({children})=>{\n    const [username,setUsername]=useState('');\n    const [account, setAccount] = useState(null)\n    let [web3, setWeb3] = useState(null)\n    const user= new User();\n\n    async function checkAccount(){\n        let web3 = new Web3(window.ethereum)\n        setWeb3(web3)\n        const accounts = await web3.eth.getAccounts()\n        setAccount(accounts[0]);\n    }\n\n    useEffect(async()=>{\n        checkAccount();\n        if(account.length==0)\n            return setAccount(0)\n        else if(user.isUser()){\n            let userData=user.getUser();\n            setUsername(userData.username);\n        }\n        else \n            return setUsername(undefined)\n    },[])\n\n\n    return (\n        <UserContext.Provider\n            value={{\n                username,\n                account,\n                setAccount,\n                setUsername\n\n            }}>\n\n            {children}\n        </UserContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}