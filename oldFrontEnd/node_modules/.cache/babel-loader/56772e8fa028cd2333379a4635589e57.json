{"ast":null,"code":"import Web3Istance from \"../Web3\";\nimport UserABI from '../../ABIs/User.json';\nexport default class User extends Web3Istance {\n  constructor() {\n    super();\n    let ABIScheduling = UserABI.abi;\n    let ContractNetworks = UserABI.networks;\n    let contractAddress = ContractNetworks[Object.keys(ContractNetworks)[Object.keys(ContractNetworks).length - 1]].address;\n    this.contract = new this.web3.eth.Contract(ABIScheduling, contractAddress); //console.log(`Indirizzo Contratto ----- `+ contractAddress);  \n  }\n\n  async addCaller(position, username, begin, end) {\n    if (begin !== undefined && end !== undefined) {\n      console.log(\"Maker\");\n      let account = await this.checkIfWalletIsConnected();\n      await this.contract.methods.addMaker(this.utils.fromAscii(JSON.stringify(position)), this.utils.fromAscii(username), parseInt(begin), parseInt(end)).send({\n        from: account,\n        gas: 4600000\n      });\n    } else {\n      console.log(\"User\");\n      let account = await this.checkIfWalletIsConnected();\n      let res = await this.contract.methods.addCaller(this.utils.fromAscii(JSON.stringify(position)), this.utils.fromAscii(username)).send({\n        from: account,\n        gas: 4600000\n      }).then(res => {\n        if (res) return true;else return false;\n      });\n      return res;\n    }\n  }\n\n  async isUser() {\n    let account = await this.checkIfWalletIsConnected();\n    console.log(account);\n    let res = await this.contract.methods.isPlayer(account).call();\n    return res;\n  }\n\n  async getUser() {\n    // await this.checkIfWalletIsConnected();\n    let res = await this.contract.methods.getPlayerInfo().call();\n    console.log(res);\n    return res;\n  }\n\n}","map":{"version":3,"sources":["/home/mike/Scrivania/provaFrontEnd/af2_front_end_test/src/SmartContracts/Users/Users.js"],"names":["Web3Istance","UserABI","User","constructor","ABIScheduling","abi","ContractNetworks","networks","contractAddress","Object","keys","length","address","contract","web3","eth","Contract","addCaller","position","username","begin","end","undefined","console","log","account","checkIfWalletIsConnected","methods","addMaker","utils","fromAscii","JSON","stringify","parseInt","send","from","gas","res","then","isUser","isPlayer","call","getUser","getPlayerInfo"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,SAAxB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AAEA,eAAe,MAAMC,IAAN,SAAmBF,WAAnB,CAA8B;AACzCG,EAAAA,WAAW,GAAE;AACT;AACA,QAAIC,aAAa,GAAGH,OAAO,CAACI,GAA5B;AACA,QAAIC,gBAAgB,GAAGL,OAAO,CAACM,QAA/B;AACA,QAAIC,eAAe,GAACF,gBAAgB,CAACG,MAAM,CAACC,IAAP,CAAYJ,gBAAZ,EAA8BG,MAAM,CAACC,IAAP,CAAYJ,gBAAZ,EAA8BK,MAA9B,GAAuC,CAArE,CAAD,CAAhB,CAA0FC,OAA9G;AACA,SAAKC,QAAL,GAAc,IAAI,KAAKC,IAAL,CAAUC,GAAV,CAAcC,QAAlB,CAA2BZ,aAA3B,EAAyCI,eAAzC,CAAd,CALS,CAMT;AACC;;AAGc,QAATS,SAAS,CAACC,QAAD,EAAUC,QAAV,EAAmBC,KAAnB,EAAyBC,GAAzB,EAA6B;AACxC,QAAGD,KAAK,KAAGE,SAAR,IAAqBD,GAAG,KAAGC,SAA9B,EAAwC;AACpCC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,UAAIC,OAAO,GAAC,MAAM,KAAKC,wBAAL,EAAlB;AACA,YAAM,KAAKb,QAAL,CAAcc,OAAd,CAAsBC,QAAtB,CAA+B,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,IAAI,CAACC,SAAL,CAAed,QAAf,CAArB,CAA/B,EAA8E,KAAKW,KAAL,CAAWC,SAAX,CAAqBX,QAArB,CAA9E,EAA6Gc,QAAQ,CAACb,KAAD,CAArH,EAA6Ha,QAAQ,CAACZ,GAAD,CAArI,EACDa,IADC,CACI;AAACC,QAAAA,IAAI,EAACV,OAAN;AAAcW,QAAAA,GAAG,EAAC;AAAlB,OADJ,CAAN;AAEH,KALD,MAMI;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,UAAIC,OAAO,GAAC,MAAM,KAAKC,wBAAL,EAAlB;AACA,UAAIW,GAAG,GAAC,MAAM,KAAKxB,QAAL,CAAcc,OAAd,CAAsBV,SAAtB,CAAgC,KAAKY,KAAL,CAAWC,SAAX,CAAqBC,IAAI,CAACC,SAAL,CAAed,QAAf,CAArB,CAAhC,EAA+E,KAAKW,KAAL,CAAWC,SAAX,CAAqBX,QAArB,CAA/E,EACTe,IADS,CACJ;AAACC,QAAAA,IAAI,EAACV,OAAN;AAAcW,QAAAA,GAAG,EAAC;AAAlB,OADI,EACwBE,IADxB,CAC8BD,GAAD,IAAO;AAC1C,YAAGA,GAAH,EACI,OAAO,IAAP,CADJ,KAEK,OAAO,KAAP;AACR,OALS,CAAd;AAMA,aAAOA,GAAP;AACH;AACJ;;AAEW,QAANE,MAAM,GAAE;AACV,QAAId,OAAO,GAAG,MAAM,KAAKC,wBAAL,EAApB;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYC,OAAZ;AACA,QAAIY,GAAG,GAAC,MAAM,KAAKxB,QAAL,CAAcc,OAAd,CAAsBa,QAAtB,CAA+Bf,OAA/B,EAAwCgB,IAAxC,EAAd;AACA,WAAOJ,GAAP;AACH;;AAEY,QAAPK,OAAO,GAAE;AACZ;AACC,QAAIL,GAAG,GAAE,MAAM,KAAKxB,QAAL,CAAcc,OAAd,CAAsBgB,aAAtB,GAAsCF,IAAtC,EAAf;AACAlB,IAAAA,OAAO,CAACC,GAAR,CAAYa,GAAZ;AACA,WAAOA,GAAP;AACH;;AA3CoC","sourcesContent":["import Web3Istance from \"../Web3\";\nimport UserABI from '../../ABIs/User.json'\n\nexport default class User extends Web3Istance{\n    constructor(){\n        super();\n        let ABIScheduling = UserABI.abi;\n        let ContractNetworks = UserABI.networks;\n        let contractAddress=ContractNetworks[Object.keys(ContractNetworks)[Object.keys(ContractNetworks).length - 1]].address;\n        this.contract=new this.web3.eth.Contract(ABIScheduling,contractAddress);\n        //console.log(`Indirizzo Contratto ----- `+ contractAddress);  \n        }\n    \n\n        async addCaller(position,username,begin,end){\n            if(begin!==undefined && end!==undefined){\n                console.log(\"Maker\");\n                let account=await this.checkIfWalletIsConnected();\n                await this.contract.methods.addMaker(this.utils.fromAscii(JSON.stringify(position)),this.utils.fromAscii(username),parseInt(begin),parseInt(end))\n                    .send({from:account,gas:4600000})\n            }\n            else{\n                console.log(\"User\");\n                let account=await this.checkIfWalletIsConnected();\n                let res=await this.contract.methods.addCaller(this.utils.fromAscii(JSON.stringify(position)),this.utils.fromAscii(username))\n                    .send({from:account,gas:4600000}).then((res)=>{\n                        if(res)\n                            return true;\n                        else return false;\n                    });\n                return res;\n            }\n        }\n\n        async isUser(){\n            let account = await this.checkIfWalletIsConnected();\n            console.log(account);\n            let res=await this.contract.methods.isPlayer(account).call()\n            return res;\n        }\n\n        async getUser(){\n           // await this.checkIfWalletIsConnected();\n            let res= await this.contract.methods.getPlayerInfo().call();\n            console.log(res);\n            return res;\n        }\n\n\n}"]},"metadata":{},"sourceType":"module"}