{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;\n\nvar keccak_1 = require(\"ethereum-cryptography/keccak\");\n\nvar createHash = require('create-hash');\n\nvar externals_1 = require(\"./externals\");\n\nvar bytes_1 = require(\"./bytes\");\n\nvar helpers_1 = require(\"./helpers\");\n/**\n * Creates Keccak hash of a Buffer input\n * @param a The input data (Buffer)\n * @param bits (number = 256) The Keccak width\n */\n\n\nvar keccak = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  (0, helpers_1.assertIsBuffer)(a);\n\n  switch (bits) {\n    case 224:\n      {\n        return (0, keccak_1.keccak224)(a);\n      }\n\n    case 256:\n      {\n        return (0, keccak_1.keccak256)(a);\n      }\n\n    case 384:\n      {\n        return (0, keccak_1.keccak384)(a);\n      }\n\n    case 512:\n      {\n        return (0, keccak_1.keccak512)(a);\n      }\n\n    default:\n      {\n        throw new Error(\"Invald algorithm: keccak\".concat(bits));\n      }\n  }\n};\n\nexports.keccak = keccak;\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer)\n */\n\nvar keccak256 = function (a) {\n  return (0, exports.keccak)(a);\n};\n\nexports.keccak256 = keccak256;\n/**\n * Creates Keccak hash of a utf-8 string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\n\nvar keccakFromString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  (0, helpers_1.assertIsString)(a);\n  var buf = Buffer.from(a, 'utf8');\n  return (0, exports.keccak)(buf, bits);\n};\n\nexports.keccakFromString = keccakFromString;\n/**\n * Creates Keccak hash of an 0x-prefixed string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\n\nvar keccakFromHexString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  (0, helpers_1.assertIsHexString)(a);\n  return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\n};\n\nexports.keccakFromHexString = keccakFromHexString;\n/**\n * Creates Keccak hash of a number array input\n * @param a The input data (number[])\n * @param bits (number = 256) The Keccak width\n */\n\nvar keccakFromArray = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  (0, helpers_1.assertIsArray)(a);\n  return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\n};\n\nexports.keccakFromArray = keccakFromArray;\n/**\n * Creates SHA256 hash of an input.\n * @param  a The input data (Buffer|Array|String)\n */\n\nvar _sha256 = function (a) {\n  a = (0, bytes_1.toBuffer)(a);\n  return createHash('sha256').update(a).digest();\n};\n/**\n * Creates SHA256 hash of a Buffer input.\n * @param a The input data (Buffer)\n */\n\n\nvar sha256 = function (a) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return _sha256(a);\n};\n\nexports.sha256 = sha256;\n/**\n * Creates SHA256 hash of a string input.\n * @param a The input data (string)\n */\n\nvar sha256FromString = function (a) {\n  (0, helpers_1.assertIsString)(a);\n  return _sha256(a);\n};\n\nexports.sha256FromString = sha256FromString;\n/**\n * Creates SHA256 hash of a number[] input.\n * @param a The input data (number[])\n */\n\nvar sha256FromArray = function (a) {\n  (0, helpers_1.assertIsArray)(a);\n  return _sha256(a);\n};\n\nexports.sha256FromArray = sha256FromArray;\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\n\nvar _ripemd160 = function (a, padded) {\n  a = (0, bytes_1.toBuffer)(a);\n  var hash = createHash('rmd160').update(a).digest();\n\n  if (padded === true) {\n    return (0, bytes_1.setLengthLeft)(hash, 32);\n  } else {\n    return hash;\n  }\n};\n/**\n * Creates RIPEMD160 hash of a Buffer input.\n * @param a The input data (Buffer)\n * @param padded Whether it should be padded to 256 bits or not\n */\n\n\nvar ripemd160 = function (a, padded) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return _ripemd160(a, padded);\n};\n\nexports.ripemd160 = ripemd160;\n/**\n * Creates RIPEMD160 hash of a string input.\n * @param a The input data (String)\n * @param padded Whether it should be padded to 256 bits or not\n */\n\nvar ripemd160FromString = function (a, padded) {\n  (0, helpers_1.assertIsString)(a);\n  return _ripemd160(a, padded);\n};\n\nexports.ripemd160FromString = ripemd160FromString;\n/**\n * Creates RIPEMD160 hash of a number[] input.\n * @param a The input data (number[])\n * @param padded Whether it should be padded to 256 bits or not\n */\n\nvar ripemd160FromArray = function (a, padded) {\n  (0, helpers_1.assertIsArray)(a);\n  return _ripemd160(a, padded);\n};\n\nexports.ripemd160FromArray = ripemd160FromArray;\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\n\nvar rlphash = function (a) {\n  return (0, exports.keccak)(externals_1.rlp.encode(a));\n};\n\nexports.rlphash = rlphash;","map":{"version":3,"mappings":"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","names":["createHash","require","keccak","a","bits","Error","exports","keccak256","keccakFromString","buf","Buffer","from","keccakFromHexString","keccakFromArray","_sha256","update","digest","sha256","sha256FromString","sha256FromArray","_ripemd160","padded","hash","ripemd160","ripemd160FromString","ripemd160FromArray","rlphash","externals_1","encode"],"sourceRoot":"","sources":["../src/hash.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}