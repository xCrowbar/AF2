{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { Description, defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n; //export type CallTransactionable = {\n//    call(transaction: TransactionRequest): Promise<TransactionResponse>;\n//};\n\nexport class ForkEvent extends Description {\n  static isForkEvent(value) {\n    return !!(value && value._isForkEvent);\n  }\n\n}\nexport class BlockForkEvent extends ForkEvent {\n  constructor(blockHash, expiry) {\n    if (!isHexString(blockHash, 32)) {\n      logger.throwArgumentError(\"invalid blockHash\", \"blockHash\", blockHash);\n    }\n\n    super({\n      _isForkEvent: true,\n      _isBlockForkEvent: true,\n      expiry: expiry || 0,\n      blockHash: blockHash\n    });\n  }\n\n}\nexport class TransactionForkEvent extends ForkEvent {\n  constructor(hash, expiry) {\n    if (!isHexString(hash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"hash\", hash);\n    }\n\n    super({\n      _isForkEvent: true,\n      _isTransactionForkEvent: true,\n      expiry: expiry || 0,\n      hash: hash\n    });\n  }\n\n}\nexport class TransactionOrderForkEvent extends ForkEvent {\n  constructor(beforeHash, afterHash, expiry) {\n    if (!isHexString(beforeHash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"beforeHash\", beforeHash);\n    }\n\n    if (!isHexString(afterHash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"afterHash\", afterHash);\n    }\n\n    super({\n      _isForkEvent: true,\n      _isTransactionOrderForkEvent: true,\n      expiry: expiry || 0,\n      beforeHash: beforeHash,\n      afterHash: afterHash\n    });\n  }\n\n} ///////////////////////////////\n// Exported Abstracts\n\nexport class Provider {\n  constructor() {\n    logger.checkAbstract(new.target, Provider);\n    defineReadOnly(this, \"_isProvider\", true);\n  }\n\n  getFeeData() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        block,\n        gasPrice\n      } = yield resolveProperties({\n        block: this.getBlock(\"latest\"),\n        gasPrice: this.getGasPrice().catch(error => {\n          // @TODO: Why is this now failing on Calaveras?\n          //console.log(error);\n          return null;\n        })\n      });\n      let maxFeePerGas = null,\n          maxPriorityFeePerGas = null;\n\n      if (block && block.baseFeePerGas) {\n        // We may want to compute this more accurately in the future,\n        // using the formula \"check if the base fee is correct\".\n        // See: https://eips.ethereum.org/EIPS/eip-1559\n        maxPriorityFeePerGas = BigNumber.from(\"1500000000\");\n        maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);\n      }\n\n      return {\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        gasPrice\n      };\n    });\n  } // Alias for \"on\"\n\n\n  addListener(eventName, listener) {\n    return this.on(eventName, listener);\n  } // Alias for \"off\"\n\n\n  removeListener(eventName, listener) {\n    return this.off(eventName, listener);\n  }\n\n  static isProvider(value) {\n    return !!(value && value._isProvider);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["BigNumber","isHexString","Description","defineReadOnly","resolveProperties","Logger","version","logger","ForkEvent","isForkEvent","value","_isForkEvent","BlockForkEvent","constructor","blockHash","expiry","throwArgumentError","_isBlockForkEvent","TransactionForkEvent","hash","_isTransactionForkEvent","TransactionOrderForkEvent","beforeHash","afterHash","_isTransactionOrderForkEvent","Provider","checkAbstract","new","target","getFeeData","block","gasPrice","getBlock","getGasPrice","catch","error","maxFeePerGas","maxPriorityFeePerGas","baseFeePerGas","from","mul","add","addListener","eventName","listener","on","removeListener","off","isProvider","_isProvider"],"sourceRoot":"","sources":["../src.ts/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}