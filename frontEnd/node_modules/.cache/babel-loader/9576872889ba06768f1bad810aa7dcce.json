{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nexport function sampleTime(period, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = async;\n  }\n\n  return function (source) {\n    return source.lift(new SampleTimeOperator(period, scheduler));\n  };\n}\n\nvar SampleTimeOperator = /*@__PURE__*/function () {\n  function SampleTimeOperator(period, scheduler) {\n    this.period = period;\n    this.scheduler = scheduler;\n  }\n\n  SampleTimeOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  };\n\n  return SampleTimeOperator;\n}();\n\nvar SampleTimeSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SampleTimeSubscriber, _super);\n\n  function SampleTimeSubscriber(destination, period, scheduler) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.period = period;\n    _this.scheduler = scheduler;\n    _this.hasValue = false;\n\n    _this.add(scheduler.schedule(dispatchNotification, period, {\n      subscriber: _this,\n      period: period\n    }));\n\n    return _this;\n  }\n\n  SampleTimeSubscriber.prototype._next = function (value) {\n    this.lastValue = value;\n    this.hasValue = true;\n  };\n\n  SampleTimeSubscriber.prototype.notifyNext = function () {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  };\n\n  return SampleTimeSubscriber;\n}(Subscriber);\n\nfunction dispatchNotification(state) {\n  var subscriber = state.subscriber,\n      period = state.period;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}","map":{"version":3,"mappings":";AAEA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AACA,SAASC,UAAT,QAAsB,eAAtB;AA6CA,SAAMC,KAAN,QAAgB,oBAAhB;OAA8C;AAC5C,eAAO,KAAC,KAAqB,CAA7B,EAA6B;AAC9BC;AAED;;AACE;AAAA,WAAkCC,MACd,KADc,CACU,yCADV,CAAlC;AAC4C,GAD5C;;;sBAC6B,GAAT,aAAwB;AAC5C,WAACC,kBAAD,CAACC,MAAD,EAACH,SAAD,EAAC;AAED;AACE,qBAAcA,SAAd;AACD;;AACHE,+BAACE,IAAD,GAAC;AAAA;AAOD,GAPA;;AAOsC;CAbQ;;wBAoB1C,gBAAM,UAAYC,MAAZ,EAEP;SAJmB,WAAMC,sBAAQD;;WACdC,kCAAwBH;AAJ5C,sBAAoB,KAApB,CAA0B,IAA1B,EAA0BI,WAA1B,KAA0B,IAA1B;;AAMEC,SAAI,CAACL,MAAL,GAASA,MAAT;;AACDK;;AAESA,uDAAcL,MAAd,EAAc;AAAAM;AAAAN;AAAA,KAAd;;AACR,WAAKK,KAAL;;;AAEFF,sBAAC,UAAD,CAACI,KAAD,GAAC;AAED;AACE,SAAIC,QAAJ,GAAS,IAAT;GAHF;;sBAKS,WAAiBC,aAAc,YAAE;QACvC;AACF;AACH,4BAAC,cAAD;AAtBsC;AAwBtC;;AACQ;CAlBE;;SAoBHC,qBAAgBC,OAAQ;AAC9B;AAAA","names":["tslib_1","Subscriber","async","scheduler","source","SampleTimeOperator","period","call","_super","SampleTimeSubscriber","destination","_this","subscriber","_next","hasValue","notifyNext","dispatchNotification","state"],"sources":["../../../src/internal/operators/sampleTime.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}