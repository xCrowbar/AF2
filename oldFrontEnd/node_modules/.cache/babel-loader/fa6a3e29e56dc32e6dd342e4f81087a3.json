{"ast":null,"code":"var _jsxFileName = \"/home/mike/Scrivania/provaFrontEnd/af2_front_end_test/src/component/Context/userLogContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, createContext } from \"react\"; //import Web3 from \"web3\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext({});\nexport const UserContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [account, setAccount] = useState();\n\n  async function checkAccount() {\n    if (window.ethereum) {\n      const result = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n    }\n  }\n\n  async function getAccount() {\n    const res = checkAccount().then(res => res);\n    return res;\n  }\n\n  useEffect(() => {\n    let res = getAccount();\n    console.log(res);\n    if (res.length > 0) setAccount(res[0]); //else return\n  }, [account]);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      account,\n      setAccount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserContextProvider, \"kdbFpNav45yYjoc+y6JdOSWhpco=\");\n\n_c = UserContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserContextProvider\");","map":{"version":3,"sources":["/home/mike/Scrivania/provaFrontEnd/af2_front_end_test/src/component/Context/userLogContext.js"],"names":["React","useEffect","useState","createContext","UserContext","UserContextProvider","children","account","setAccount","checkAccount","window","ethereum","result","request","method","getAccount","res","then","console","log","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,QAA1B,EAAmCC,aAAnC,QAAwD,OAAxD,C,CACA;;;AAEA,OAAO,MAAMC,WAAW,gBAACD,aAAa,CAAC,EAAD,CAA/B;AAEP,OAAO,MAAME,mBAAmB,GAAC,QAAc;AAAA;;AAAA,MAAb;AAACC,IAAAA;AAAD,GAAa;AAC5C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,EAAtC;;AAEC,iBAAeO,YAAf,GAA6B;AACzB,QAAIC,MAAM,CAACC,QAAX,EAAqB;AACjB,YAAMC,MAAM,GAAE,MAAMF,MAAM,CAACC,QAAP,CAAgBE,OAAhB,CAAwB;AAC1CC,QAAAA,MAAM,EAAE;AADkC,OAAxB,CAApB;AAEH;AACJ;;AAED,iBAAeC,UAAf,GAA2B;AACvB,UAAMC,GAAG,GAACP,YAAY,GAAGQ,IAAf,CAAqBD,GAAD,IAAOA,GAA3B,CAAV;AACA,WAAOA,GAAP;AACH;;AACDf,EAAAA,SAAS,CAAC,MAAI;AACV,QAAIe,GAAG,GAACD,UAAU,EAAlB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,QAAGA,GAAG,CAACI,MAAJ,GAAW,CAAd,EACQZ,UAAU,CAACQ,GAAG,CAAC,CAAD,CAAJ,CAAV,CAJE,CAOV;AAEF,GATO,EASN,CAACT,OAAD,CATM,CAAT;AAWA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAACA,MAAAA,OAAD;AAASC,MAAAA;AAAT,KAA7B;AAAA,cACKF;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA9BM;;GAAMD,mB;;KAAAA,mB","sourcesContent":["import React, { useEffect,useState,createContext } from \"react\";\n//import Web3 from \"web3\";\n\nexport const UserContext=createContext({});\n\nexport const UserContextProvider=({children})=>{\n   const [account, setAccount] = useState();\n\n    async function checkAccount(){\n        if (window.ethereum) {\n            const result =await window.ethereum.request({\n              method: \"eth_accounts\"})\n        }\n    }\n\n    async function getAccount(){\n        const res=checkAccount().then((res)=>res)\n        return res\n    }\n    useEffect(()=>{\n        let res=getAccount();\n        console.log(res)\n        if(res.length>0)\n                setAccount(res[0]);\n            \n        \n        //else return\n\n     },[account])\n\n    return (\n        <UserContext.Provider value={{account,setAccount}}>\n            {children}\n        </UserContext.Provider>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}