{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { MagicIncomingWindowMessage } from '@magic-sdk/types';\nimport { JsonRpcResponse } from './json-rpc';\nimport { createAutoCatchingPromise } from '../util/promise-tools';\n/**\n * Get the originating payload from a batch request using the specified `id`.\n */\n\nfunction getRequestPayloadFromBatch(requestPayload, id) {\n  return id && Array.isArray(requestPayload) ? requestPayload.find(function (p) {\n    return p.id === id;\n  }) : requestPayload;\n}\n/**\n * Ensures the incoming response follows the expected schema and parses for a\n * JSON RPC payload ID.\n */\n\n\nfunction standardizeResponse(requestPayload, event) {\n  var _a;\n\n  var id = (_a = event.data.response) === null || _a === void 0 ? void 0 : _a.id;\n  var requestPayloadResolved = getRequestPayloadFromBatch(requestPayload, id);\n\n  if (id && requestPayloadResolved) {\n    // Build a standardized response object\n    var response = new JsonRpcResponse(requestPayloadResolved).applyResult(event.data.response.result).applyError(event.data.response.error);\n    return {\n      id: id,\n      response: response\n    };\n  }\n\n  return {};\n}\n\nvar PayloadTransport =\n/** @class */\nfunction () {\n  /**\n   * Create an instance of `PayloadTransport`\n   *\n   * @param overlay - The `IframeController` context to which the event will be\n   * posted.\n   * @param endpoint - The URL for the relevant iframe context.\n   * @param encodedQueryParams - The unique, encoded query parameters for the\n   * relevant iframe context.\n   */\n  function PayloadTransport(endpoint, encodedQueryParams) {\n    this.endpoint = endpoint;\n    this.encodedQueryParams = encodedQueryParams;\n    this.messageHandlers = new Set();\n    this.init();\n  }\n\n  PayloadTransport.prototype.post = function (overlay, msgType, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , createAutoCatchingPromise(function (resolve) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var batchData, batchIds, acknowledgeResponse, removeResponseListener;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  return [4\n                  /*yield*/\n                  , overlay.ready];\n\n                case 1:\n                  _a.sent();\n\n                  batchData = [];\n                  batchIds = Array.isArray(payload) ? payload.map(function (p) {\n                    return p.id;\n                  }) : [];\n                  return [4\n                  /*yield*/\n                  , overlay.postMessage({\n                    msgType: msgType + \"-\" + this.encodedQueryParams,\n                    payload: payload\n                  })];\n\n                case 2:\n                  _a.sent();\n\n                  acknowledgeResponse = function (removeEventListener) {\n                    return function (event) {\n                      var _a = standardizeResponse(payload, event),\n                          id = _a.id,\n                          response = _a.response;\n\n                      if (id && response && Array.isArray(payload) && batchIds.includes(id)) {\n                        batchData.push(response); // For batch requests, we wait for all responses before resolving.\n\n                        if (batchData.length === payload.length) {\n                          removeEventListener();\n                          resolve(batchData);\n                        }\n                      } else if (id && response && !Array.isArray(payload) && id === payload.id) {\n                        removeEventListener();\n                        resolve(response);\n                      }\n                    };\n                  };\n\n                  removeResponseListener = this.on(MagicIncomingWindowMessage.MAGIC_HANDLE_RESPONSE, acknowledgeResponse(function () {\n                    return removeResponseListener();\n                  }));\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        })];\n      });\n    });\n  };\n  /**\n   * Listen for events received with the given `msgType`.\n   *\n   * @param msgType - The `msgType` encoded with the event data.\n   * @param handler - A handler function to execute on each event received.\n   * @return A `void` function to remove the attached event.\n   */\n\n\n  PayloadTransport.prototype.on = function (msgType, handler) {\n    var _this = this;\n\n    var boundHandler = handler.bind(window); // We cannot effectively cover this function because it never gets reference\n    // by value. The functionality of this callback is tested within\n    // `initMessageListener`.\n\n    /* istanbul ignore next */\n\n    var listener = function (event) {\n      if (event.data.msgType === msgType + \"-\" + _this.encodedQueryParams) boundHandler(event);\n    };\n\n    this.messageHandlers.add(listener);\n    return function () {\n      return _this.messageHandlers.delete(listener);\n    };\n  };\n\n  return PayloadTransport;\n}();\n\nexport { PayloadTransport };","map":{"version":3,"mappings":"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","names":["MagicIncomingWindowMessage","JsonRpcResponse","createAutoCatchingPromise","getRequestPayloadFromBatch","requestPayload","id","Array","isArray","find","p","standardizeResponse","event","data","response","_a","requestPayloadResolved","applyResult","result","applyError","error","endpoint","encodedQueryParams","Set","init","PayloadTransport","overlay","msgType","payload","resolve","ready","batchData","batchIds","map","postMessage","acknowledgeResponse","removeEventListener","includes","push","length","removeResponseListener","on","MAGIC_HANDLE_RESPONSE","handler","boundHandler","bind","window","listener","_this","messageHandlers","add","delete"],"sourceRoot":"","sources":["../../../src/core/payload-transport.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}