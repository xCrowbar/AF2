{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"./utils\");\n\nfunction fromSplit(split) {\n  const [protectedHeader, encrypted_key, iv, ciphertext, tag] = split;\n  const jwe = {\n    ciphertext,\n    iv,\n    protected: protectedHeader,\n    tag\n  };\n  if (encrypted_key) jwe.recipients = [{\n    encrypted_key\n  }];\n  return jwe;\n}\n\nfunction encodeRecipient(recipient) {\n  const encRec = {};\n  if (recipient.encrypted_key) encRec.encrypted_key = utils_1.fromBase64url(recipient.encrypted_key);\n  if (recipient.header) encRec.header = recipient.header;\n  return encRec;\n}\n\nfunction encode(jwe) {\n  const encJwe = {\n    ciphertext: utils_1.fromBase64url(jwe.ciphertext),\n    protected: utils_1.fromBase64url(jwe.protected),\n    iv: utils_1.fromBase64url(jwe.iv),\n    tag: utils_1.fromBase64url(jwe.tag)\n  };\n  if (jwe.aad) encJwe.aad = utils_1.fromBase64url(jwe.aad);\n  if (jwe.recipients) encJwe.recipients = jwe.recipients.map(encodeRecipient);\n  if (jwe.unprotected) encJwe.unprotected = jwe.unprotected;\n  return encJwe;\n}\n\nfunction decodeRecipient(encoded) {\n  const recipient = {};\n  if (encoded.encrypted_key) recipient.encrypted_key = utils_1.toBase64url(encoded.encrypted_key);\n  if (encoded.header) recipient.header = encoded.header;\n  return recipient;\n}\n\nfunction decode(encoded) {\n  const jwe = {\n    ciphertext: utils_1.toBase64url(encoded.ciphertext),\n    protected: utils_1.toBase64url(encoded.protected),\n    iv: utils_1.toBase64url(encoded.iv),\n    tag: utils_1.toBase64url(encoded.tag)\n  };\n  if (encoded.aad) jwe.aad = utils_1.toBase64url(encoded.aad);\n  if (encoded.recipients) jwe.recipients = encoded.recipients.map(decodeRecipient);\n  if (encoded.unprotected) jwe.unprotected = encoded.unprotected;\n  return jwe;\n}\n\nexports.default = {\n  fromSplit,\n  decode,\n  encode\n};","map":{"version":3,"mappings":";;;;;;AAAA;;AAgCA,SAASA,SAAT,CAAmBC,KAAnB,EAAuC;EACrC,MAAM,CAACC,eAAD,EAAkBC,aAAlB,EAAiCC,EAAjC,EAAqCC,UAArC,EAAiDC,GAAjD,IAAwDL,KAA9D;EACA,MAAMM,GAAG,GAAW;IAClBF,UADkB;IAElBD,EAFkB;IAGlBI,SAAS,EAAEN,eAHO;IAIlBI;EAJkB,CAApB;EAMA,IAAIH,aAAJ,EAAmBI,GAAG,CAACE,UAAJ,GAAiB,CAAC;IAAEN;EAAF,CAAD,CAAjB;EACnB,OAAOI,GAAP;AACD;;AAED,SAASG,eAAT,CAAyBC,SAAzB,EAAgD;EAC9C,MAAMC,MAAM,GAAqB,EAAjC;EACA,IAAID,SAAS,CAACR,aAAd,EAA6BS,MAAM,CAACT,aAAP,GAAuBU,sBAAcF,SAAS,CAACR,aAAxB,CAAvB;EAC7B,IAAIQ,SAAS,CAACG,MAAd,EAAsBF,MAAM,CAACE,MAAP,GAAgBH,SAAS,CAACG,MAA1B;EACtB,OAAOF,MAAP;AACD;;AAED,SAASG,MAAT,CAAgBR,GAAhB,EAA2B;EACzB,MAAMS,MAAM,GAAe;IACzBX,UAAU,EAAEQ,sBAAcN,GAAG,CAACF,UAAlB,CADa;IAEzBG,SAAS,EAAEK,sBAAcN,GAAG,CAACC,SAAlB,CAFc;IAGzBJ,EAAE,EAAES,sBAAcN,GAAG,CAACH,EAAlB,CAHqB;IAIzBE,GAAG,EAAEO,sBAAcN,GAAG,CAACD,GAAlB;EAJoB,CAA3B;EAMA,IAAIC,GAAG,CAACU,GAAR,EAAaD,MAAM,CAACC,GAAP,GAAaJ,sBAAcN,GAAG,CAACU,GAAlB,CAAb;EACb,IAAIV,GAAG,CAACE,UAAR,EAAoBO,MAAM,CAACP,UAAP,GAAoBF,GAAG,CAACE,UAAJ,CAAeS,GAAf,CAAmBR,eAAnB,CAApB;EACpB,IAAIH,GAAG,CAACY,WAAR,EAAqBH,MAAM,CAACG,WAAP,GAAqBZ,GAAG,CAACY,WAAzB;EACrB,OAAOH,MAAP;AACD;;AAED,SAASI,eAAT,CAAyBC,OAAzB,EAAkD;EAChD,MAAMV,SAAS,GAAiB,EAAhC;EACA,IAAIU,OAAO,CAAClB,aAAZ,EAA2BQ,SAAS,CAACR,aAAV,GAA0BU,oBAAYQ,OAAO,CAAClB,aAApB,CAA1B;EAC3B,IAAIkB,OAAO,CAACP,MAAZ,EAAoBH,SAAS,CAACG,MAAV,GAAmBO,OAAO,CAACP,MAA3B;EACpB,OAAOH,SAAP;AACD;;AAED,SAASW,MAAT,CAAgBD,OAAhB,EAAmC;EACjC,MAAMd,GAAG,GAAW;IAClBF,UAAU,EAAEQ,oBAAYQ,OAAO,CAAChB,UAApB,CADM;IAElBG,SAAS,EAAEK,oBAAYQ,OAAO,CAACb,SAApB,CAFO;IAGlBJ,EAAE,EAAES,oBAAYQ,OAAO,CAACjB,EAApB,CAHc;IAIlBE,GAAG,EAAEO,oBAAYQ,OAAO,CAACf,GAApB;EAJa,CAApB;EAMA,IAAIe,OAAO,CAACJ,GAAZ,EAAiBV,GAAG,CAACU,GAAJ,GAAUJ,oBAAYQ,OAAO,CAACJ,GAApB,CAAV;EACjB,IAAII,OAAO,CAACZ,UAAZ,EAAwBF,GAAG,CAACE,UAAJ,GAAiBY,OAAO,CAACZ,UAAR,CAAmBS,GAAnB,CAAuBE,eAAvB,CAAjB;EACxB,IAAIC,OAAO,CAACF,WAAZ,EAAyBZ,GAAG,CAACY,WAAJ,GAAkBE,OAAO,CAACF,WAA1B;EACzB,OAAOZ,GAAP;AACD;;AAEDgB,kBAAe;EACbvB,SADa;EAEbsB,MAFa;EAGbP;AAHa,CAAf","names":["fromSplit","split","protectedHeader","encrypted_key","iv","ciphertext","tag","jwe","protected","recipients","encodeRecipient","recipient","encRec","utils_1","header","encode","encJwe","aad","map","unprotected","decodeRecipient","encoded","decode","exports"],"sourceRoot":"","sources":["../src/encryption.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}