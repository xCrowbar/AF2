{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport User from \"../../SmartContracts/Users/Users\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport Web3 from 'web3';\nexport async function AccountCheck() {\n  _s();\n\n  const user = new User();\n  const web3 = new Web3(window.ethereum);\n  const {\n    ethereum\n  } = window;\n  const accounts = await ethereum.request({\n    method: 'eth_accounts'\n  });\n  if (accounts.length === 0) return false;else return true;\n  const navigate = useNavigate();\n  const location = useLocation();\n  navigate('/'); // let res=await user.isUser()\n}\n\n_s(AccountCheck, \"VDZHUspDq9N5O9RWjniBrjgIdAA=\", false, function () {\n  return [useNavigate, useLocation];\n});\n\n_c = AccountCheck;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountCheck\");","map":{"version":3,"sources":["/home/mike/Scrivania/provaFrontEnd/af2_front_end_test/src/component/signin/userLoginCheck.js"],"names":["User","useNavigate","useLocation","Web3","AccountCheck","user","web3","window","ethereum","accounts","request","method","length","navigate","location"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,kCAAjB;AACA,SAASC,WAAT,EAAqBC,WAArB,QAAwC,kBAAxC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAGA,OAAO,eAAeC,YAAf,GAA6B;AAAA;;AAChC,QAAMC,IAAI,GAAG,IAAIL,IAAJ,EAAb;AACA,QAAMM,IAAI,GAAG,IAAIH,IAAJ,CAASI,MAAM,CAACC,QAAhB,CAAb;AACA,QAAM;AAACA,IAAAA;AAAD,MAAWD,MAAjB;AACA,QAAME,QAAQ,GAAG,MAAMD,QAAQ,CAACE,OAAT,CAAiB;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAAjB,CAAvB;AAEA,MAAIF,QAAQ,CAACG,MAAT,KAAkB,CAAtB,EACI,OAAO,KAAP,CADJ,KAGI,OAAO,IAAP;AAEJ,QAAMC,QAAQ,GAACZ,WAAW,EAA1B;AACA,QAAMa,QAAQ,GAACZ,WAAW,EAA1B;AACAW,EAAAA,QAAQ,CAAC,GAAD,CAAR,CAbgC,CAc7B;AAGN;;GAjBqBT,Y;UAWHH,W,EACAC,W;;;KAZGE,Y;AAiBrB","sourcesContent":["import User from \"../../SmartContracts/Users/Users\";\nimport { useNavigate,useLocation } from \"react-router-dom\";\nimport Web3 from 'web3';\n\n\nexport async function AccountCheck(){\n    const user = new User();\n    const web3 = new Web3(window.ethereum);\n    const {ethereum}=window;\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n    \n    if (accounts.length===0)\n        return false\n    else\n        return true\n\n    const navigate=useNavigate()\n    const location=useLocation();\n    navigate('/');\n       // let res=await user.isUser()\n\n\n};"]},"metadata":{},"sourceType":"module"}