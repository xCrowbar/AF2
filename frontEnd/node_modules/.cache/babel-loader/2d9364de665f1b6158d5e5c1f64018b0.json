{"ast":null,"code":"import Web3Istance from \"../Web3\";\nimport OnBoardingABI from '../../ABIs/OnBoarding.json';\nexport default class OnBoarding extends Web3Istance {\n  constructor() {\n    super();\n    let ABIScheduling = OnBoardingABI.abi;\n    let ContractNetworks = UserABI.networks;\n    let contractAddress = ContractNetworks[Object.keys(ContractNetworks)[Object.keys(ContractNetworks).length - 1]].address;\n    this.contract = new this.web3.eth.Contract(ABIScheduling, contractAddress); //console.log(`Indirizzo Contratto ----- `+ contractAddress);  \n  }\n\n  async addPrinter(address, name, materialSupported, nozzles, mountedNozzles, printTemp, bedTemp, volume, soluble, foodSafety) {\n    let account = await this.checkIfWalletIsConnected();\n    await this.contract.methods.addPrinter(address, this.utils.fromAscii(JSON.stringify(name)), materialSupported, nozzles, mountedNozzles, printTemp, bedTemp, volume, soluble, foodSafety).send({\n      from: account,\n      gas: 4600000\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/mike/Scrivania/provaFrontEnd/af2_front_end_test/src/SmartContracts/OnBoarding/OnBoarding.js"],"names":["Web3Istance","OnBoardingABI","OnBoarding","constructor","ABIScheduling","abi","ContractNetworks","UserABI","networks","contractAddress","Object","keys","length","address","contract","web3","eth","Contract","addPrinter","name","materialSupported","nozzles","mountedNozzles","printTemp","bedTemp","volume","soluble","foodSafety","account","checkIfWalletIsConnected","methods","utils","fromAscii","JSON","stringify","send","from","gas"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,SAAxB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AAEA,eAAe,MAAMC,UAAN,SAAyBF,WAAzB,CAAoC;AAC/CG,EAAAA,WAAW,GAAE;AACT;AACA,QAAIC,aAAa,GAAGH,aAAa,CAACI,GAAlC;AACA,QAAIC,gBAAgB,GAAGC,OAAO,CAACC,QAA/B;AACA,QAAIC,eAAe,GAACH,gBAAgB,CAACI,MAAM,CAACC,IAAP,CAAYL,gBAAZ,EAA8BI,MAAM,CAACC,IAAP,CAAYL,gBAAZ,EAA8BM,MAA9B,GAAuC,CAArE,CAAD,CAAhB,CAA0FC,OAA9G;AACA,SAAKC,QAAL,GAAc,IAAI,KAAKC,IAAL,CAAUC,GAAV,CAAcC,QAAlB,CAA2Bb,aAA3B,EAAyCK,eAAzC,CAAd,CALS,CAMT;AACC;;AAGe,QAAVS,UAAU,CAACL,OAAD,EAASM,IAAT,EAAcC,iBAAd,EAAgCC,OAAhC,EAAwCC,cAAxC,EAAuDC,SAAvD,EAAiEC,OAAjE,EAAyEC,MAAzE,EAAgFC,OAAhF,EAAwFC,UAAxF,EAAmG;AAC/G,QAAIC,OAAO,GAAC,MAAM,KAAKC,wBAAL,EAAlB;AACA,UAAM,KAAKf,QAAL,CAAcgB,OAAd,CAAsBZ,UAAtB,CAAiCL,OAAjC,EACF,KAAKkB,KAAL,CAAWC,SAAX,CAAqBC,IAAI,CAACC,SAAL,CAAef,IAAf,CAArB,CADE,EAEFC,iBAFE,EAGFC,OAHE,EAIFC,cAJE,EAKFC,SALE,EAMFC,OANE,EAOFC,MAPE,EAQFC,OARE,EASFC,UATE,EASUQ,IATV,CASe;AAACC,MAAAA,IAAI,EAACR,OAAN;AAAcS,MAAAA,GAAG,EAAC;AAAlB,KATf,CAAN;AAUH;;AAvB0C","sourcesContent":["import Web3Istance from \"../Web3\";\nimport OnBoardingABI from '../../ABIs/OnBoarding.json'\n\nexport default class OnBoarding extends Web3Istance{\n    constructor(){\n        super();\n        let ABIScheduling = OnBoardingABI.abi;\n        let ContractNetworks = UserABI.networks;\n        let contractAddress=ContractNetworks[Object.keys(ContractNetworks)[Object.keys(ContractNetworks).length - 1]].address;\n        this.contract=new this.web3.eth.Contract(ABIScheduling,contractAddress);\n        //console.log(`Indirizzo Contratto ----- `+ contractAddress);  \n        }\n    \n\n        async addPrinter(address,name,materialSupported,nozzles,mountedNozzles,printTemp,bedTemp,volume,soluble,foodSafety){\n            let account=await this.checkIfWalletIsConnected();\n            await this.contract.methods.addPrinter(address,\n                this.utils.fromAscii(JSON.stringify(name)),\n                materialSupported,\n                nozzles,\n                mountedNozzles,\n                printTemp,\n                bedTemp,\n                volume,\n                soluble,\n                foodSafety).send({from:account,gas:4600000}) \n        }\n\n\n}"]},"metadata":{},"sourceType":"module"}