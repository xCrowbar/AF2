{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar multibases = require('ipfs-core-utils/multibases');\n\nvar multicodecs = require('ipfs-core-utils/multicodecs');\n\nvar multihashes = require('ipfs-core-utils/multihashes');\n\nvar dagPB = require('@ipld/dag-pb');\n\nvar dagCBOR = require('@ipld/dag-cbor');\n\nvar dagJSON = require('@ipld/dag-json');\n\nvar dagJOSE = require('dag-jose');\n\nvar identity = require('multiformats/hashes/identity');\n\nvar basics = require('multiformats/basics');\n\nvar index = require('./bitswap/index.js');\n\nvar index$1 = require('./block/index.js');\n\nvar index$2 = require('./bootstrap/index.js');\n\nvar index$3 = require('./config/index.js');\n\nvar index$4 = require('./dag/index.js');\n\nvar index$5 = require('./dht/index.js');\n\nvar index$6 = require('./diag/index.js');\n\nvar index$7 = require('./files/index.js');\n\nvar index$8 = require('./key/index.js');\n\nvar index$9 = require('./log/index.js');\n\nvar index$a = require('./name/index.js');\n\nvar index$b = require('./object/index.js');\n\nvar index$c = require('./pin/index.js');\n\nvar index$d = require('./pubsub/index.js');\n\nvar index$e = require('./refs/index.js');\n\nvar index$f = require('./repo/index.js');\n\nvar index$g = require('./stats/index.js');\n\nvar index$h = require('./swarm/index.js');\n\nvar add = require('./add.js');\n\nvar addAll = require('./add-all.js');\n\nvar cat = require('./cat.js');\n\nvar commands = require('./commands.js');\n\nvar dns = require('./dns.js');\n\nvar getEndpointConfig = require('./get-endpoint-config.js');\n\nvar get = require('./get.js');\n\nvar id = require('./id.js');\n\nvar isOnline = require('./is-online.js');\n\nvar ls = require('./ls.js');\n\nvar mount = require('./mount.js');\n\nvar ping = require('./ping.js');\n\nvar resolve = require('./resolve.js');\n\nvar start = require('./start.js');\n\nvar stop = require('./stop.js');\n\nvar version = require('./version.js');\n\nvar globSourceImport = require('ipfs-utils/src/files/glob-source.js');\n\nvar cid = require('multiformats/cid');\n\nvar multiaddr = require('multiaddr');\n\nvar urlSource_js = require('ipfs-utils/src/files/url-source.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar dagPB__namespace = /*#__PURE__*/_interopNamespace(dagPB);\n\nvar dagCBOR__namespace = /*#__PURE__*/_interopNamespace(dagCBOR);\n\nvar dagJSON__namespace = /*#__PURE__*/_interopNamespace(dagJSON);\n\nvar dagJOSE__namespace = /*#__PURE__*/_interopNamespace(dagJOSE);\n\nvar globSourceImport__default = /*#__PURE__*/_interopDefaultLegacy(globSourceImport);\n\nvar urlSource_js__default = /*#__PURE__*/_interopDefaultLegacy(urlSource_js);\n\nfunction create() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const id$1 = {\n    name: identity.identity.name,\n    code: identity.identity.code,\n    encode: id => id,\n    decode: id => id\n  };\n  const multibaseCodecs = Object.values(basics.bases);\n  (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base));\n  const multibases$1 = new multibases.Multibases({\n    bases: multibaseCodecs,\n    loadBase: options.ipld && options.ipld.loadBase\n  });\n  const blockCodecs = Object.values(basics.codecs);\n  [dagPB__namespace, dagCBOR__namespace, dagJSON__namespace, dagJOSE__namespace, id$1].concat(options.ipld && options.ipld.codecs || []).forEach(codec => blockCodecs.push(codec));\n  const multicodecs$1 = new multicodecs.Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  });\n  const multihashHashers = Object.values(basics.hashes);\n  (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher));\n  const multihashes$1 = new multihashes.Multihashes({\n    hashers: multihashHashers,\n    loadHasher: options.ipld && options.ipld.loadHasher\n  });\n  const client = {\n    add: add.createAdd(options),\n    addAll: addAll.createAddAll(options),\n    bitswap: index.createBitswap(options),\n    block: index$1.createBlock(options),\n    bootstrap: index$2.createBootstrap(options),\n    cat: cat.createCat(options),\n    commands: commands.createCommands(options),\n    config: index$3.createConfig(options),\n    dag: index$4.createDag(multicodecs$1, options),\n    dht: index$5.createDht(options),\n    diag: index$6.createDiag(options),\n    dns: dns.createDns(options),\n    files: index$7.createFiles(options),\n    get: get.createGet(options),\n    getEndpointConfig: getEndpointConfig.createGetEndpointConfig(options),\n    id: id.createId(options),\n    isOnline: isOnline.createIsOnline(options),\n    key: index$8.createKey(options),\n    log: index$9.createLog(options),\n    ls: ls.createLs(options),\n    mount: mount.createMount(options),\n    name: index$a.createName(options),\n    object: index$b.createObject(multicodecs$1, options),\n    pin: index$c.createPin(options),\n    ping: ping.createPing(options),\n    pubsub: index$d.createPubsub(options),\n    refs: index$e.createRefs(options),\n    repo: index$f.createRepo(options),\n    resolve: resolve.createResolve(options),\n    start: start.createStart(options),\n    stats: index$g.createStats(options),\n    stop: stop.createStop(options),\n    swarm: index$h.createSwarm(options),\n    version: version.createVersion(options),\n    bases: multibases$1,\n    codecs: multicodecs$1,\n    hashers: multihashes$1\n  };\n  return client;\n}\n\nconst globSource = globSourceImport__default[\"default\"];\nObject.defineProperty(exports, 'CID', {\n  enumerable: true,\n  get: function () {\n    return cid.CID;\n  }\n});\nObject.defineProperty(exports, 'multiaddr', {\n  enumerable: true,\n  get: function () {\n    return multiaddr.Multiaddr;\n  }\n});\nObject.defineProperty(exports, 'urlSource', {\n  enumerable: true,\n  get: function () {\n    return urlSource_js__default[\"default\"];\n  }\n});\nexports.create = create;\nexports.globSource = globSource;","map":{"version":3,"sources":["/home/mike/Scrivania/provaFrontEnd/af2_front_end_test/node_modules/ipfs-http-client/cjs/src/index.js"],"names":["Object","defineProperty","exports","value","multibases","require","multicodecs","multihashes","dagPB","dagCBOR","dagJSON","dagJOSE","identity","basics","index","index$1","index$2","index$3","index$4","index$5","index$6","index$7","index$8","index$9","index$a","index$b","index$c","index$d","index$e","index$f","index$g","index$h","add","addAll","cat","commands","dns","getEndpointConfig","get","id","isOnline","ls","mount","ping","resolve","start","stop","version","globSourceImport","cid","multiaddr","urlSource_js","_interopDefaultLegacy","e","_interopNamespace","__esModule","n","create","keys","forEach","k","d","getOwnPropertyDescriptor","enumerable","freeze","dagPB__namespace","dagCBOR__namespace","dagJSON__namespace","dagJOSE__namespace","globSourceImport__default","urlSource_js__default","options","id$1","name","code","encode","decode","multibaseCodecs","values","bases","ipld","base","push","multibases$1","Multibases","loadBase","blockCodecs","codecs","concat","codec","multicodecs$1","Multicodecs","loadCodec","multihashHashers","hashes","hashers","hasher","multihashes$1","Multihashes","loadHasher","client","createAdd","createAddAll","bitswap","createBitswap","block","createBlock","bootstrap","createBootstrap","createCat","createCommands","config","createConfig","dag","createDag","dht","createDht","diag","createDiag","createDns","files","createFiles","createGet","createGetEndpointConfig","createId","createIsOnline","key","createKey","log","createLog","createLs","createMount","createName","object","createObject","pin","createPin","createPing","pubsub","createPubsub","refs","createRefs","repo","createRepo","createResolve","createStart","stats","createStats","createStop","swarm","createSwarm","createVersion","globSource","CID","Multiaddr"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar multibases = require('ipfs-core-utils/multibases');\nvar multicodecs = require('ipfs-core-utils/multicodecs');\nvar multihashes = require('ipfs-core-utils/multihashes');\nvar dagPB = require('@ipld/dag-pb');\nvar dagCBOR = require('@ipld/dag-cbor');\nvar dagJSON = require('@ipld/dag-json');\nvar dagJOSE = require('dag-jose');\nvar identity = require('multiformats/hashes/identity');\nvar basics = require('multiformats/basics');\nvar index = require('./bitswap/index.js');\nvar index$1 = require('./block/index.js');\nvar index$2 = require('./bootstrap/index.js');\nvar index$3 = require('./config/index.js');\nvar index$4 = require('./dag/index.js');\nvar index$5 = require('./dht/index.js');\nvar index$6 = require('./diag/index.js');\nvar index$7 = require('./files/index.js');\nvar index$8 = require('./key/index.js');\nvar index$9 = require('./log/index.js');\nvar index$a = require('./name/index.js');\nvar index$b = require('./object/index.js');\nvar index$c = require('./pin/index.js');\nvar index$d = require('./pubsub/index.js');\nvar index$e = require('./refs/index.js');\nvar index$f = require('./repo/index.js');\nvar index$g = require('./stats/index.js');\nvar index$h = require('./swarm/index.js');\nvar add = require('./add.js');\nvar addAll = require('./add-all.js');\nvar cat = require('./cat.js');\nvar commands = require('./commands.js');\nvar dns = require('./dns.js');\nvar getEndpointConfig = require('./get-endpoint-config.js');\nvar get = require('./get.js');\nvar id = require('./id.js');\nvar isOnline = require('./is-online.js');\nvar ls = require('./ls.js');\nvar mount = require('./mount.js');\nvar ping = require('./ping.js');\nvar resolve = require('./resolve.js');\nvar start = require('./start.js');\nvar stop = require('./stop.js');\nvar version = require('./version.js');\nvar globSourceImport = require('ipfs-utils/src/files/glob-source.js');\nvar cid = require('multiformats/cid');\nvar multiaddr = require('multiaddr');\nvar urlSource_js = require('ipfs-utils/src/files/url-source.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar dagPB__namespace = /*#__PURE__*/_interopNamespace(dagPB);\nvar dagCBOR__namespace = /*#__PURE__*/_interopNamespace(dagCBOR);\nvar dagJSON__namespace = /*#__PURE__*/_interopNamespace(dagJSON);\nvar dagJOSE__namespace = /*#__PURE__*/_interopNamespace(dagJOSE);\nvar globSourceImport__default = /*#__PURE__*/_interopDefaultLegacy(globSourceImport);\nvar urlSource_js__default = /*#__PURE__*/_interopDefaultLegacy(urlSource_js);\n\nfunction create(options = {}) {\n  const id$1 = {\n    name: identity.identity.name,\n    code: identity.identity.code,\n    encode: id => id,\n    decode: id => id\n  };\n  const multibaseCodecs = Object.values(basics.bases);\n  (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base));\n  const multibases$1 = new multibases.Multibases({\n    bases: multibaseCodecs,\n    loadBase: options.ipld && options.ipld.loadBase\n  });\n  const blockCodecs = Object.values(basics.codecs);\n  [\n    dagPB__namespace,\n    dagCBOR__namespace,\n    dagJSON__namespace,\n    dagJOSE__namespace,\n    id$1\n  ].concat(options.ipld && options.ipld.codecs || []).forEach(codec => blockCodecs.push(codec));\n  const multicodecs$1 = new multicodecs.Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  });\n  const multihashHashers = Object.values(basics.hashes);\n  (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher));\n  const multihashes$1 = new multihashes.Multihashes({\n    hashers: multihashHashers,\n    loadHasher: options.ipld && options.ipld.loadHasher\n  });\n  const client = {\n    add: add.createAdd(options),\n    addAll: addAll.createAddAll(options),\n    bitswap: index.createBitswap(options),\n    block: index$1.createBlock(options),\n    bootstrap: index$2.createBootstrap(options),\n    cat: cat.createCat(options),\n    commands: commands.createCommands(options),\n    config: index$3.createConfig(options),\n    dag: index$4.createDag(multicodecs$1, options),\n    dht: index$5.createDht(options),\n    diag: index$6.createDiag(options),\n    dns: dns.createDns(options),\n    files: index$7.createFiles(options),\n    get: get.createGet(options),\n    getEndpointConfig: getEndpointConfig.createGetEndpointConfig(options),\n    id: id.createId(options),\n    isOnline: isOnline.createIsOnline(options),\n    key: index$8.createKey(options),\n    log: index$9.createLog(options),\n    ls: ls.createLs(options),\n    mount: mount.createMount(options),\n    name: index$a.createName(options),\n    object: index$b.createObject(multicodecs$1, options),\n    pin: index$c.createPin(options),\n    ping: ping.createPing(options),\n    pubsub: index$d.createPubsub(options),\n    refs: index$e.createRefs(options),\n    repo: index$f.createRepo(options),\n    resolve: resolve.createResolve(options),\n    start: start.createStart(options),\n    stats: index$g.createStats(options),\n    stop: stop.createStop(options),\n    swarm: index$h.createSwarm(options),\n    version: version.createVersion(options),\n    bases: multibases$1,\n    codecs: multicodecs$1,\n    hashers: multihashes$1\n  };\n  return client;\n}\nconst globSource = globSourceImport__default[\"default\"];\n\nObject.defineProperty(exports, 'CID', {\n  enumerable: true,\n  get: function () { return cid.CID; }\n});\nObject.defineProperty(exports, 'multiaddr', {\n  enumerable: true,\n  get: function () { return multiaddr.Multiaddr; }\n});\nObject.defineProperty(exports, 'urlSource', {\n  enumerable: true,\n  get: function () { return urlSource_js__default[\"default\"]; }\n});\nexports.create = create;\nexports.globSource = globSource;\n"]},"metadata":{},"sourceType":"script"}