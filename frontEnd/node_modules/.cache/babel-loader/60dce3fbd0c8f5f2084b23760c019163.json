{"ast":null,"code":"import * as env from \"@walletconnect/environment\";\nimport { ENCRYPT_OP, DECRYPT_OP, SIGN_OP, VERIFY_OP, AES_BROWSER_ALGO, AES_LENGTH, HMAC_BROWSER_ALGO, HMAC_BROWSER, HMAC_LENGTH, SHA256_BROWSER_ALGO, SHA512_BROWSER_ALGO, LENGTH_512 } from \"../constants\";\nexport function getAlgo(type) {\n  return type === AES_BROWSER_ALGO ? {\n    length: AES_LENGTH,\n    name: AES_BROWSER_ALGO\n  } : {\n    hash: {\n      name: HMAC_BROWSER_ALGO\n    },\n    name: HMAC_BROWSER\n  };\n}\nexport function getOps(type) {\n  return type === AES_BROWSER_ALGO ? [ENCRYPT_OP, DECRYPT_OP] : [SIGN_OP, VERIFY_OP];\n}\nexport async function browserExportKey(cryptoKey) {\n  let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : AES_BROWSER_ALGO;\n  const subtle = env.getSubtleCrypto();\n  return new Uint8Array(await subtle.exportKey(\"raw\", cryptoKey));\n}\nexport async function browserImportKey(buffer) {\n  let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : AES_BROWSER_ALGO;\n  return env.getSubtleCrypto().importKey(\"raw\", buffer, getAlgo(type), true, getOps(type));\n}\nexport async function browserAesEncrypt(iv, key, data) {\n  const subtle = env.getSubtleCrypto();\n  const cryptoKey = await browserImportKey(key, AES_BROWSER_ALGO);\n  const result = await subtle.encrypt({\n    iv,\n    name: AES_BROWSER_ALGO\n  }, cryptoKey, data);\n  return new Uint8Array(result);\n}\nexport async function browserAesDecrypt(iv, key, data) {\n  const subtle = env.getSubtleCrypto();\n  const cryptoKey = await browserImportKey(key, AES_BROWSER_ALGO);\n  const result = await subtle.decrypt({\n    iv,\n    name: AES_BROWSER_ALGO\n  }, cryptoKey, data);\n  return new Uint8Array(result);\n}\nexport async function browserHmacSha256Sign(key, data) {\n  const subtle = env.getSubtleCrypto();\n  const cryptoKey = await browserImportKey(key, HMAC_BROWSER);\n  const signature = await subtle.sign({\n    length: HMAC_LENGTH,\n    name: HMAC_BROWSER\n  }, cryptoKey, data);\n  return new Uint8Array(signature);\n}\nexport async function browserHmacSha512Sign(key, data) {\n  const subtle = env.getSubtleCrypto();\n  const cryptoKey = await browserImportKey(key, HMAC_BROWSER);\n  const signature = await subtle.sign({\n    length: LENGTH_512,\n    name: HMAC_BROWSER\n  }, cryptoKey, data);\n  return new Uint8Array(signature);\n}\nexport async function browserSha256(data) {\n  const subtle = env.getSubtleCrypto();\n  const result = await subtle.digest({\n    name: SHA256_BROWSER_ALGO\n  }, data);\n  return new Uint8Array(result);\n}\nexport async function browserSha512(data) {\n  const subtle = env.getSubtleCrypto();\n  const result = await subtle.digest({\n    name: SHA512_BROWSER_ALGO\n  }, data);\n  return new Uint8Array(result);\n}","map":{"version":3,"mappings":"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","names":["env","ENCRYPT_OP","DECRYPT_OP","SIGN_OP","VERIFY_OP","AES_BROWSER_ALGO","AES_LENGTH","HMAC_BROWSER_ALGO","HMAC_BROWSER","HMAC_LENGTH","SHA256_BROWSER_ALGO","SHA512_BROWSER_ALGO","LENGTH_512","getAlgo","type","length","name","hash","getOps","browserExportKey","cryptoKey","subtle","getSubtleCrypto","Uint8Array","exportKey","browserImportKey","buffer","importKey","browserAesEncrypt","iv","key","data","result","encrypt","browserAesDecrypt","decrypt","browserHmacSha256Sign","signature","sign","browserHmacSha512Sign","browserSha256","digest","browserSha512"],"sourceRoot":"","sources":["../../../src/lib/browser.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}