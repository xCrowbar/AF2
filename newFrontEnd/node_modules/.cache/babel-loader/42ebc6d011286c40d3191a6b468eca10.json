{"ast":null,"code":"var _jsxFileName = \"/home/crow/Scrivania/AF2/newFrontEnd/src/component/WalletCheck/WalletConnected.js\",\n    _s = $RefreshSig$();\n\nimport { useWeb3React } from '@web3-react/core';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { useState, useEffect } from 'react';\nimport { Navigate } from \"react-router-dom\"; //import User from '../../SmartContracts/Users/Users';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1, 3, 4, 5, 42, 56, 97, 1337]\n});\nexport default function WalletConnected(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const {\n    active: networkActive,\n    error: networkError,\n    activate: activateNetwork\n  } = useWeb3React();\n  const [loaded, setLoaded] = useState(false); //const user=new User();\n  //const [isUser,setIsUser]=useState(false)\n\n  const [wait, setWait] = useState(false);\n  /*const player=async()=>{\n    setIsUser(await user.isUser());\n    console.log(isUser);\n    return isUser;\n  }*/\n\n  const finish = () => {\n    setWait(true);\n  };\n\n  useEffect(() => {\n    injected.isAuthorized().then(isAuthorized => {\n      setLoaded(true);\n\n      if (isAuthorized && !networkActive && !networkError) {\n        activateNetwork(injected);\n      }\n    }).catch(() => {\n      setLoaded(true);\n    });\n    setTimeout(() => finish(), 500);\n  }, [activateNetwork, networkActive, networkError]);\n\n  if (loaded && wait) {\n    if (networkActive === true) {\n      return children;\n    } else if (!networkActive) {\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 14\n      }, this);\n    }\n  } else return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"Loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 14\n  }, this);\n} //Versione scarsa\n\n/*useEffect(()=>{\n  const accountCheck=async()=>{\n    let user=new User();\n    \n    const {ethereum}=window;\n    account =await ethereum.request({ method: 'eth_accounts' })\n      .then((res)=>{\n        if(res.length>0){\n          \n          \n          setLoaded(true)\n          setNetwork(true)\n        }\n            \n              else {\n                setLoaded(true);\n              }\n              })\n            .catch(()=>{setLoaded(true)})\n         };\n  accountCheck();\n},[loaded])\n\n      if(loaded && network){\n  console.log(\"ok\");\n  return (children);}\nelse if(loaded && !network){\n  console.log(\"no ok\");\n return  <Navigate to=\"/login\"></Navigate>\n}\nelse return (<span>Loading</span>)\n*/\n\n_s(WalletConnected, \"y46J2OTq+S73xS3ieHIA15/SQd4=\", false, function () {\n  return [useWeb3React];\n});\n\n_c = WalletConnected;\n\nvar _c;\n\n$RefreshReg$(_c, \"WalletConnected\");","map":{"version":3,"names":["useWeb3React","InjectedConnector","useState","useEffect","Navigate","injected","supportedChainIds","WalletConnected","children","active","networkActive","error","networkError","activate","activateNetwork","loaded","setLoaded","wait","setWait","finish","isAuthorized","then","catch","setTimeout"],"sources":["/home/crow/Scrivania/AF2/newFrontEnd/src/component/WalletCheck/WalletConnected.js"],"sourcesContent":["import { useWeb3React } from '@web3-react/core'\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { useState,useEffect } from 'react';\nimport {Navigate} from \"react-router-dom\";\n//import User from '../../SmartContracts/Users/Users';\n\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 3, 4, 5, 42, 56, 97 , 1337] });\n\n export default function WalletConnected({ children }){\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React();\n  const [loaded, setLoaded] = useState(false);\n  //const user=new User();\n  //const [isUser,setIsUser]=useState(false)\n  const [wait,setWait]=useState(false)\n\n  /*const player=async()=>{\n    setIsUser(await user.isUser());\n    console.log(isUser);\n    return isUser;\n  }*/\n  \n  const finish=()=>{\n    setWait(true);\n  }\n\n  useEffect(() => {\n    injected\n      .isAuthorized()\n      .then((isAuthorized) => {\n        setLoaded(true)\n        if (isAuthorized && !networkActive && !networkError) {\n          activateNetwork(injected);\n        }\n      })\n      .catch(() => {\n        setLoaded(true)\n\n      });\n      setTimeout(()=>finish(),500);\n    }, [activateNetwork, networkActive, networkError])\n  \n  \n  if(loaded && wait){\n    if(networkActive===true  ){\n      return children;\n      }\n    else if(!networkActive) {\n      return <Navigate to='/login'/>\n    }\n  }\n\n    else \n      return <span>Loading</span>\n\n  \n  \n\n}\n\n\n//Versione scarsa\n  /*useEffect(()=>{\n    const accountCheck=async()=>{\n      let user=new User();\n      \n      const {ethereum}=window;\n      account =await ethereum.request({ method: 'eth_accounts' })\n        .then((res)=>{\n          if(res.length>0){\n            \n            \n            setLoaded(true)\n            setNetwork(true)\n          }\n              \n                else {\n                  setLoaded(true);\n                }\n                })\n              .catch(()=>{setLoaded(true)})\n\n          };\n    accountCheck();\n  },[loaded])\n  \n        if(loaded && network){\n    console.log(\"ok\");\n    return (children);}\n  else if(loaded && !network){\n    console.log(\"no ok\");\n   return  <Navigate to=\"/login\"></Navigate>\n  }\n  else return (<span>Loading</span>)\n  */"],"mappings":";;;AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,QAAT,EAAkBC,SAAlB,QAAmC,OAAnC;AACA,SAAQC,QAAR,QAAuB,kBAAvB,C,CACA;;;AAEA,OAAO,MAAMC,QAAQ,GAAG,IAAIJ,iBAAJ,CAAsB;EAAEK,iBAAiB,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAA0B,IAA1B;AAArB,CAAtB,CAAjB;AAEN,eAAe,SAASC,eAAT,OAAsC;EAAA;;EAAA,IAAb;IAAEC;EAAF,CAAa;EACpD,MAAM;IAAEC,MAAM,EAAEC,aAAV;IAAyBC,KAAK,EAAEC,YAAhC;IAA8CC,QAAQ,EAAEC;EAAxD,IAA4Ed,YAAY,EAA9F;EACA,MAAM,CAACe,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,KAAD,CAApC,CAFoD,CAGpD;EACA;;EACA,MAAM,CAACe,IAAD,EAAMC,OAAN,IAAehB,QAAQ,CAAC,KAAD,CAA7B;EAEA;AACF;AACA;AACA;AACA;;EAEE,MAAMiB,MAAM,GAAC,MAAI;IACfD,OAAO,CAAC,IAAD,CAAP;EACD,CAFD;;EAIAf,SAAS,CAAC,MAAM;IACdE,QAAQ,CACLe,YADH,GAEGC,IAFH,CAESD,YAAD,IAAkB;MACtBJ,SAAS,CAAC,IAAD,CAAT;;MACA,IAAII,YAAY,IAAI,CAACV,aAAjB,IAAkC,CAACE,YAAvC,EAAqD;QACnDE,eAAe,CAACT,QAAD,CAAf;MACD;IACF,CAPH,EAQGiB,KARH,CAQS,MAAM;MACXN,SAAS,CAAC,IAAD,CAAT;IAED,CAXH;IAYEO,UAAU,CAAC,MAAIJ,MAAM,EAAX,EAAc,GAAd,CAAV;EACD,CAdM,EAcJ,CAACL,eAAD,EAAkBJ,aAAlB,EAAiCE,YAAjC,CAdI,CAAT;;EAiBA,IAAGG,MAAM,IAAIE,IAAb,EAAkB;IAChB,IAAGP,aAAa,KAAG,IAAnB,EAA0B;MACxB,OAAOF,QAAP;IACC,CAFH,MAGK,IAAG,CAACE,aAAJ,EAAmB;MACtB,oBAAO,QAAC,QAAD;QAAU,EAAE,EAAC;MAAb;QAAA;QAAA;QAAA;MAAA,QAAP;IACD;EACF,CAPD,MAUI,oBAAO;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;AAKL,C,CAGD;;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GApFyBH,e;UAC2DP,Y;;;KAD3DO,e"},"metadata":{},"sourceType":"module"}