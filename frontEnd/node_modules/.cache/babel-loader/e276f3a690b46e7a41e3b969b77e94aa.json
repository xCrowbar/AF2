{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nvar CHAIN_ID = 1;\n\nvar WalletLinkConnector = /*#__PURE__*/function (_AbstractConnector) {\n  _inheritsLoose(WalletLinkConnector, _AbstractConnector);\n\n  function WalletLinkConnector(_ref) {\n    var _this;\n\n    var url = _ref.url,\n        appName = _ref.appName,\n        appLogoUrl = _ref.appLogoUrl,\n        darkMode = _ref.darkMode,\n        supportedChainIds = _ref.supportedChainIds;\n    _this = _AbstractConnector.call(this, {\n      supportedChainIds: supportedChainIds\n    }) || this;\n    _this.url = url;\n    _this.appName = appName;\n    _this.appLogoUrl = appLogoUrl;\n    _this.darkMode = darkMode || false;\n    _this.handleChainChanged = _this.handleChainChanged.bind(_assertThisInitialized(_this));\n    _this.handleAccountsChanged = _this.handleAccountsChanged.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = WalletLinkConnector.prototype;\n\n  _proto.activate = function activate() {\n    try {\n      var _this3 = this;\n\n      var _temp4 = function _temp4() {\n        return Promise.resolve(_this3.provider.request({\n          method: 'eth_requestAccounts'\n        })).then(function (accounts) {\n          var account = accounts[0];\n\n          _this3.provider.on('chainChanged', _this3.handleChainChanged);\n\n          _this3.provider.on('accountsChanged', _this3.handleAccountsChanged);\n\n          return {\n            provider: _this3.provider,\n            account: account\n          };\n        });\n      };\n\n      var _temp5 = function () {\n        if (window.ethereum && window.ethereum.isCoinbaseWallet === true) {\n          // user is in the dapp browser on Coinbase Wallet\n          _this3.provider = window.ethereum;\n        } else {\n          var _temp6 = function () {\n            if (!_this3.walletLink) {\n              return Promise.resolve(import('@coinbase/wallet-sdk').then(function (m) {\n                var _m$default;\n\n                return (_m$default = m == null ? void 0 : m[\"default\"]) != null ? _m$default : m;\n              })).then(function (CoinbaseWalletSDK) {\n                _this3.walletLink = new CoinbaseWalletSDK(_extends({\n                  appName: _this3.appName,\n                  darkMode: _this3.darkMode\n                }, _this3.appLogoUrl ? {\n                  appLogoUrl: _this3.appLogoUrl\n                } : {}));\n                _this3.provider = _this3.walletLink.makeWeb3Provider(_this3.url, CHAIN_ID);\n              });\n            }\n          }();\n\n          if (_temp6 && _temp6.then) return _temp6.then(function () {});\n        }\n      }(); // @ts-ignore\n\n\n      return Promise.resolve(_temp5 && _temp5.then ? _temp5.then(_temp4) : _temp4(_temp5));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getProvider = function getProvider() {\n    try {\n      var _this5 = this;\n\n      return Promise.resolve(_this5.provider);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getChainId = function getChainId() {\n    try {\n      var _this7 = this;\n\n      return Promise.resolve(_this7.provider.chainId);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getAccount = function getAccount() {\n    try {\n      var _this9 = this;\n\n      return Promise.resolve(_this9.provider.request({\n        method: 'eth_requestAccounts'\n      })).then(function (accounts) {\n        return accounts[0];\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.deactivate = function deactivate() {\n    this.provider.removeListener('chainChanged', this.handleChainChanged);\n    this.provider.removeListener('accountsChanged', this.handleAccountsChanged);\n  };\n\n  _proto.close = function close() {\n    try {\n      var _this11 = this;\n\n      _this11.provider.close();\n\n      _this11.emitDeactivate();\n\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.handleChainChanged = function handleChainChanged(chainId) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId);\n    }\n\n    this.emitUpdate({\n      chainId: chainId\n    });\n  };\n\n  _proto.handleAccountsChanged = function handleAccountsChanged(accounts) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts);\n    }\n\n    this.emitUpdate({\n      account: accounts[0]\n    });\n  };\n\n  return WalletLinkConnector;\n}(AbstractConnector);\n\nexport { WalletLinkConnector };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAMA,QAAQ,GAAG,CAAjB;;IAUaC,mBAAb;AAAAC;;AASE;;;QAAcC;QAAKC;QAASC;QAAYC;QAAUC;AAChDC,0CAAM;AAAED,uBAAiB,EAAEA;AAArB,KAAN;AAEAC,UAAKL,GAAL,GAAWA,GAAX;AACAK,UAAKJ,OAAL,GAAeA,OAAf;AACAI,UAAKH,UAAL,GAAkBA,UAAlB;AACAG,UAAKF,QAAL,GAAgBA,QAAQ,IAAI,KAA5B;AAEAE,UAAKC,kBAAL,GAA0BD,MAAKC,kBAAL,CAAwBC,IAAxB,+BAA1B;AACAF,UAAKG,qBAAL,GAA6BH,MAAKG,qBAAL,CAA2BD,IAA3B,+BAA7B;;AACD;;AAnBH;;AAAAE,SAqBeC,QArBf;AAAA;mBAyBM;;;+BAWqBC,OAAKC,QAAL,CAAcC,OAAd,CAAsB;AAC3CC,gBAAM,EAAE;AADmC,SAAtB,kBAAjBC,QAAiB,EAAjBA;AAGN,cAAMC,OAAO,GAAGD,QAAQ,CAAC,CAAD,CAAxB;;AAEAJ,iBAAKC,QAAL,CAAcK,EAAd,CAAiB,cAAjB,EAAiCN,OAAKL,kBAAtC;;AACAK,iBAAKC,QAAL,CAAcK,EAAd,CAAiB,iBAAjB,EAAoCN,OAAKH,qBAAzC;;AAEA,iBAAO;AAAEI,oBAAQ,EAAED,OAAKC,QAAjB;AAA2BI,mBAAO,EAAEA;AAApC,WAAP;;;;;YArBIE,MAAM,CAACC,QAAPD,IAAmBA,MAAM,CAACC,QAAPD,CAAgBE,gBAAhBF,KAAqC;AAC1D;AACAP,iBAAKC,QAAL,GAAgBM,MAAM,CAACC,QAAvB;;;gBACS,CAACR,OAAKU;qCACiB,OAAO,sBAAP,EAA+BC,IAA/B,CAAoC,aAAC;AAAA;;AAAA,qCAAIC,CAAJ,QAAIA,GAAJ,MAAIA,IAAC,WAAL,yBAAkBA,CAAlB;AAArC,iCAA1BC,iBAA0B,EAA1BA;AACNb,uBAAKU,UAAL,GAAkB,IAAIG,iBAAJ;AAChBvB,yBAAO,EAAEU,OAAKV,OADE;AAEhBE,0BAAQ,EAAEQ,OAAKR;AAFC,mBAGZQ,OAAKT,UAAL,GAAkB;AAAEA,4BAAU,EAAES,OAAKT;AAAnB,iBAAlB,GAAoD,EAHxC,EAAlB;AAKAS,uBAAKC,QAAL,GAAgBD,OAAKU,UAAL,CAAgBI,gBAAhB,CAAiCd,OAAKX,GAAtC,EAA2CH,QAA3C,CAAhB;;;;;;;UAjCN,CAsBI;;;;AAtBJ;AAAA;AAAA;AAAA;;AAAAY,SA+CeiB,WA/Cf;AAAA;mBAgDW;;AAAP,6BAAOC,OAAKf,QAAZ;AAhDJ;AAAA;AAAA;AAAA;;AAAAH,SAmDemB,UAnDf;AAAA;mBAoDW;;AAAP,6BAAOC,OAAKjB,QAAL,CAAckB,OAArB;AApDJ;AAAA;AAAA;AAAA;;AAAArB,SAuDesB,UAvDf;AAAA;mBAwD2B;;6BAAAC,OAAKpB,QAAL,CAAcC,OAAd,CAAsB;AAC3CC,cAAM,EAAE;AADmC,OAAtB,kBAAjBC,QAAiB,EAAjBA;AAGN,eAAOA,QAAQ,CAAC,CAAD,CAAf;;AA3DJ;AAAA;AAAA;AAAA;;AAAAN,SA8DSwB,UA9DT,GA8DS;AACL,SAAKrB,QAAL,CAAcsB,cAAd,CAA6B,cAA7B,EAA6C,KAAK5B,kBAAlD;AACA,SAAKM,QAAL,CAAcsB,cAAd,CAA6B,iBAA7B,EAAgD,KAAK1B,qBAArD;AAhEJ;;AAAAC,SAmEe0B,KAnEf;AAAA;oBAoEI;;AAAAC,cAAKxB,QAAL,CAAcuB,KAAd;;AACAC,cAAKC,cAAL;;;AArEJ;AAAA;AAAA;AAAA;;AAAA5B,SAwEUH,kBAxEV,GAwEU,4BAAmBwB,OAAnB;AACN,+CAAa;AACXQ,aAAO,CAACC,GAARD,CAAY,4CAAZA,EAA0DR,OAA1DQ;AACD;;AACD,SAAKE,UAAL,CAAgB;AAAEV,aAAO,EAAEA;AAAX,KAAhB;AA5EJ;;AAAArB,SA+EUD,qBA/EV,GA+EU,+BAAsBO,QAAtB;AACN,+CAAa;AACXuB,aAAO,CAACC,GAARD,CAAY,+CAAZA,EAA6DvB,QAA7DuB;AACD;;AACD,SAAKE,UAAL,CAAgB;AAAExB,aAAO,EAAED,QAAQ,CAAC,CAAD;AAAnB,KAAhB;AAnFJ;;AAAA;AAAA,EAAyC0B,iBAAzC","names":["CHAIN_ID","WalletLinkConnector","_inheritsLoose","url","appName","appLogoUrl","darkMode","supportedChainIds","_this","handleChainChanged","bind","handleAccountsChanged","_proto","activate","_this3","provider","request","method","accounts","account","on","window","ethereum","isCoinbaseWallet","walletLink","then","m","CoinbaseWalletSDK","makeWeb3Provider","getProvider","_this5","getChainId","_this7","chainId","getAccount","_this9","deactivate","removeListener","close","_this11","emitDeactivate","console","log","emitUpdate","AbstractConnector"],"sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\n\nconst CHAIN_ID = 1\n\ninterface WalletLinkConnectorArguments {\n  url: string\n  appName: string\n  appLogoUrl?: string\n  darkMode?: boolean\n  supportedChainIds?: number[]\n}\n\nexport class WalletLinkConnector extends AbstractConnector {\n  private readonly url: string\n  private readonly appName: string\n  private readonly appLogoUrl?: string\n  private readonly darkMode: boolean\n\n  public walletLink: any\n  private provider: any\n\n  constructor({ url, appName, appLogoUrl, darkMode, supportedChainIds }: WalletLinkConnectorArguments) {\n    super({ supportedChainIds: supportedChainIds })\n\n    this.url = url\n    this.appName = appName\n    this.appLogoUrl = appLogoUrl\n    this.darkMode = darkMode || false\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    // @ts-ignore\n    if (window.ethereum && window.ethereum.isCoinbaseWallet === true) {\n      // user is in the dapp browser on Coinbase Wallet\n      this.provider = window.ethereum\n    } else if (!this.walletLink) {\n      const CoinbaseWalletSDK = await import('@coinbase/wallet-sdk').then(m => m?.default ?? m)\n      this.walletLink = new CoinbaseWalletSDK({\n        appName: this.appName,\n        darkMode: this.darkMode,\n        ...(this.appLogoUrl ? { appLogoUrl: this.appLogoUrl } : {})\n      })\n      this.provider = this.walletLink.makeWeb3Provider(this.url, CHAIN_ID)\n    }\n\n    const accounts = await this.provider.request({\n      method: 'eth_requestAccounts'\n    })\n    const account = accounts[0]\n\n    this.provider.on('chainChanged', this.handleChainChanged)\n    this.provider.on('accountsChanged', this.handleAccountsChanged)\n\n    return { provider: this.provider, account: account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.provider\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.provider.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    const accounts = await this.provider.request({\n      method: 'eth_requestAccounts'\n    })\n    return accounts[0]\n  }\n\n  public deactivate() {\n    this.provider.removeListener('chainChanged', this.handleChainChanged)\n    this.provider.removeListener('accountsChanged', this.handleAccountsChanged)\n  }\n\n  public async close() {\n    this.provider.close()\n    this.emitDeactivate()\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId: chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}