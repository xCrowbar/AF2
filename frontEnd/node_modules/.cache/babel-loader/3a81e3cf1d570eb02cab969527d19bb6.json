{"ast":null,"code":"import Web3Istance from \"../Web3\";\nimport UserABI from '../../ABIs/User.json';\nexport default class User extends Web3Istance {\n  constructor() {\n    super();\n    let ABIScheduling = UserABI.abi;\n    let ContractNetworks = UserABI.networks;\n    let contractAddress = ContractNetworks[Object.keys(ContractNetworks)[Object.keys(ContractNetworks).length - 1]].address;\n    this.contract = new this.web3.eth.Contract(ABIScheduling, contractAddress); //console.log(`Indirizzo Contratto ----- `+ contractAddress);  \n  }\n\n  async addCaller(position, username, begin, end) {\n    if (begin !== undefined && end !== undefined) {\n      let account = await this.checkIfWalletIsConnected();\n      this.contract.methods.addMaker(this.utils.fromAscii(JSON.stringify(position)), this.utils.fromAscii(username), parseInt(begin), parseInt(end)).send({\n        from: account,\n        gas: 3000000\n      });\n    } else {\n      let account = await this.checkIfWalletIsConnected();\n      this.contract.methods.addCaller(this.utils.fromAscii(JSON.stringify(position)), this.utils.fromAscii(username)).send({\n        from: account,\n        gas: 3000000\n      });\n    }\n  }\n\n  async isUser() {\n    let account = await this.checkIfWalletIsConnected();\n    let res = await this.contract.methods.isPlayer(account).call();\n    return res;\n  }\n\n  async getUser() {\n    await this.checkIfWalletIsConnected();\n    let res = await this.contract.methods.getPlayerInfo().call();\n    console.log(res);\n    return res;\n  }\n\n}","map":{"version":3,"sources":["/home/mike/Scrivania/provaFrontEnd/af2_front_end_test/src/SmartContracts/Users/Users.js"],"names":["Web3Istance","UserABI","User","constructor","ABIScheduling","abi","ContractNetworks","networks","contractAddress","Object","keys","length","address","contract","web3","eth","Contract","addCaller","position","username","begin","end","undefined","account","checkIfWalletIsConnected","methods","addMaker","utils","fromAscii","JSON","stringify","parseInt","send","from","gas","isUser","res","isPlayer","call","getUser","getPlayerInfo","console","log"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,SAAxB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AAEA,eAAe,MAAMC,IAAN,SAAmBF,WAAnB,CAA8B;AACzCG,EAAAA,WAAW,GAAE;AACT;AACA,QAAIC,aAAa,GAAGH,OAAO,CAACI,GAA5B;AACA,QAAIC,gBAAgB,GAAGL,OAAO,CAACM,QAA/B;AACA,QAAIC,eAAe,GAACF,gBAAgB,CAACG,MAAM,CAACC,IAAP,CAAYJ,gBAAZ,EAA8BG,MAAM,CAACC,IAAP,CAAYJ,gBAAZ,EAA8BK,MAA9B,GAAuC,CAArE,CAAD,CAAhB,CAA0FC,OAA9G;AACA,SAAKC,QAAL,GAAc,IAAI,KAAKC,IAAL,CAAUC,GAAV,CAAcC,QAAlB,CAA2BZ,aAA3B,EAAyCI,eAAzC,CAAd,CALS,CAMT;AACC;;AAGc,QAATS,SAAS,CAACC,QAAD,EAAUC,QAAV,EAAmBC,KAAnB,EAAyBC,GAAzB,EAA6B;AACxC,QAAGD,KAAK,KAAGE,SAAR,IAAqBD,GAAG,KAAGC,SAA9B,EAAwC;AACpC,UAAIC,OAAO,GAAC,MAAM,KAAKC,wBAAL,EAAlB;AACA,WAAKX,QAAL,CAAcY,OAAd,CAAsBC,QAAtB,CAA+B,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,IAAI,CAACC,SAAL,CAAeZ,QAAf,CAArB,CAA/B,EAA8E,KAAKS,KAAL,CAAWC,SAAX,CAAqBT,QAArB,CAA9E,EAA6GY,QAAQ,CAACX,KAAD,CAArH,EAA6HW,QAAQ,CAACV,GAAD,CAArI,EACKW,IADL,CACU;AAACC,QAAAA,IAAI,EAACV,OAAN;AAAcW,QAAAA,GAAG,EAAC;AAAlB,OADV;AAEH,KAJD,MAKI;AACA,UAAIX,OAAO,GAAC,MAAM,KAAKC,wBAAL,EAAlB;AACA,WAAKX,QAAL,CAAcY,OAAd,CAAsBR,SAAtB,CAAgC,KAAKU,KAAL,CAAWC,SAAX,CAAqBC,IAAI,CAACC,SAAL,CAAeZ,QAAf,CAArB,CAAhC,EAA+E,KAAKS,KAAL,CAAWC,SAAX,CAAqBT,QAArB,CAA/E,EACKa,IADL,CACU;AAACC,QAAAA,IAAI,EAACV,OAAN;AAAcW,QAAAA,GAAG,EAAC;AAAlB,OADV;AAEH;AACJ;;AAEW,QAANC,MAAM,GAAE;AACV,QAAIZ,OAAO,GAAG,MAAM,KAAKC,wBAAL,EAApB;AACA,QAAIY,GAAG,GAAC,MAAM,KAAKvB,QAAL,CAAcY,OAAd,CAAsBY,QAAtB,CAA+Bd,OAA/B,EAAwCe,IAAxC,EAAd;AACA,WAAOF,GAAP;AACH;;AAEY,QAAPG,OAAO,GAAE;AACX,UAAM,KAAKf,wBAAL,EAAN;AACA,QAAIY,GAAG,GAAE,MAAM,KAAKvB,QAAL,CAAcY,OAAd,CAAsBe,aAAtB,GAAsCF,IAAtC,EAAf;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ;AACA,WAAOA,GAAP;AACH;;AAnCoC","sourcesContent":["import Web3Istance from \"../Web3\";\nimport UserABI from '../../ABIs/User.json'\n\nexport default class User extends Web3Istance{\n    constructor(){\n        super();\n        let ABIScheduling = UserABI.abi;\n        let ContractNetworks = UserABI.networks;\n        let contractAddress=ContractNetworks[Object.keys(ContractNetworks)[Object.keys(ContractNetworks).length - 1]].address;\n        this.contract=new this.web3.eth.Contract(ABIScheduling,contractAddress);\n        //console.log(`Indirizzo Contratto ----- `+ contractAddress);  \n        }\n    \n\n        async addCaller(position,username,begin,end){\n            if(begin!==undefined && end!==undefined){\n                let account=await this.checkIfWalletIsConnected();\n                this.contract.methods.addMaker(this.utils.fromAscii(JSON.stringify(position)),this.utils.fromAscii(username),parseInt(begin),parseInt(end))\n                    .send({from:account,gas:3000000})\n            }\n            else{\n                let account=await this.checkIfWalletIsConnected();\n                this.contract.methods.addCaller(this.utils.fromAscii(JSON.stringify(position)),this.utils.fromAscii(username))\n                    .send({from:account,gas:3000000})\n            }\n        }\n\n        async isUser(){\n            let account = await this.checkIfWalletIsConnected();\n            let res=await this.contract.methods.isPlayer(account).call()\n            return res;\n        }\n\n        async getUser(){\n            await this.checkIfWalletIsConnected();\n            let res= await this.contract.methods.getPlayerInfo().call();\n            console.log(res);\n            return res;\n        }\n\n\n}"]},"metadata":{},"sourceType":"module"}