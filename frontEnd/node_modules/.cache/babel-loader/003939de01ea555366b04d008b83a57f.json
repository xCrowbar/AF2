{"ast":null,"code":"import { INTERNAL_ERROR, SERVER_ERROR_CODE_RANGE, RESERVED_ERROR_CODES, STANDARD_ERROR_MAP } from \"./constants\";\nexport function isServerErrorCode(code) {\n  return code <= SERVER_ERROR_CODE_RANGE[0] && code >= SERVER_ERROR_CODE_RANGE[1];\n}\nexport function isReservedErrorCode(code) {\n  return RESERVED_ERROR_CODES.includes(code);\n}\nexport function isValidErrorCode(code) {\n  return typeof code === \"number\";\n}\nexport function getError(type) {\n  if (!Object.keys(STANDARD_ERROR_MAP).includes(type)) {\n    return STANDARD_ERROR_MAP[INTERNAL_ERROR];\n  }\n\n  return STANDARD_ERROR_MAP[type];\n}\nexport function getErrorByCode(code) {\n  const match = Object.values(STANDARD_ERROR_MAP).find(e => e.code === code);\n\n  if (!match) {\n    return STANDARD_ERROR_MAP[INTERNAL_ERROR];\n  }\n\n  return match;\n}\nexport function validateJsonRpcError(response) {\n  if (typeof response.error.code === \"undefined\") {\n    return {\n      valid: false,\n      error: \"Missing code for JSON-RPC error\"\n    };\n  }\n\n  if (typeof response.error.message === \"undefined\") {\n    return {\n      valid: false,\n      error: \"Missing message for JSON-RPC error\"\n    };\n  }\n\n  if (!isValidErrorCode(response.error.code)) {\n    return {\n      valid: false,\n      error: `Invalid error code type for JSON-RPC: ${response.error.code}`\n    };\n  }\n\n  if (isReservedErrorCode(response.error.code)) {\n    const error = getErrorByCode(response.error.code);\n\n    if (error.message !== STANDARD_ERROR_MAP[INTERNAL_ERROR].message && response.error.message === error.message) {\n      return {\n        valid: false,\n        error: `Invalid error code message for JSON-RPC: ${response.error.code}`\n      };\n    }\n  }\n\n  return {\n    valid: true\n  };\n}\nexport function parseConnectionError(e, url, type) {\n  return e.message.includes(\"getaddrinfo ENOTFOUND\") || e.message.includes(\"connect ECONNREFUSED\") ? new Error(`Unavailable ${type} RPC url at ${url}`) : e;\n}","map":{"version":3,"mappings":"AACA,SACEA,cADF,EAEEC,uBAFF,EAGEC,oBAHF,EAIEC,kBAJF,QAKO,aALP;AAQA,OAAM,SAAUC,iBAAV,CAA4BC,IAA5B,EAAwC;AAC5C,SAAOA,IAAI,IAAIJ,uBAAuB,CAAC,CAAD,CAA/B,IAAsCI,IAAI,IAAIJ,uBAAuB,CAAC,CAAD,CAA5E;AACD;AAED,OAAM,SAAUK,mBAAV,CAA8BD,IAA9B,EAA0C;AAC9C,SAAOH,oBAAoB,CAACK,QAArB,CAA8BF,IAA9B,CAAP;AACD;AAED,OAAM,SAAUG,gBAAV,CAA2BH,IAA3B,EAAuC;AAC3C,SAAO,OAAOA,IAAP,KAAgB,QAAvB;AACD;AAED,OAAM,SAAUI,QAAV,CAAmBC,IAAnB,EAA+B;AACnC,MAAI,CAACC,MAAM,CAACC,IAAP,CAAYT,kBAAZ,EAAgCI,QAAhC,CAAyCG,IAAzC,CAAL,EAAqD;AACnD,WAAOP,kBAAkB,CAACH,cAAD,CAAzB;AACD;;AACD,SAAOG,kBAAkB,CAACO,IAAD,CAAzB;AACD;AAED,OAAM,SAAUG,cAAV,CAAyBR,IAAzB,EAAqC;AACzC,QAAMS,KAAK,GAAGH,MAAM,CAACI,MAAP,CAAcZ,kBAAd,EAAkCa,IAAlC,CAAuCC,CAAC,IAAIA,CAAC,CAACZ,IAAF,KAAWA,IAAvD,CAAd;;AACA,MAAI,CAACS,KAAL,EAAY;AACV,WAAOX,kBAAkB,CAACH,cAAD,CAAzB;AACD;;AACD,SAAOc,KAAP;AACD;AAED,OAAM,SAAUI,oBAAV,CAA+BC,QAA/B,EAAqD;AACzD,MAAI,OAAOA,QAAQ,CAACC,KAAT,CAAef,IAAtB,KAA+B,WAAnC,EAAgD;AAC9C,WAAO;AAAEgB,WAAK,EAAE,KAAT;AAAgBD,WAAK,EAAE;AAAvB,KAAP;AACD;;AACD,MAAI,OAAOD,QAAQ,CAACC,KAAT,CAAeE,OAAtB,KAAkC,WAAtC,EAAmD;AACjD,WAAO;AAAED,WAAK,EAAE,KAAT;AAAgBD,WAAK,EAAE;AAAvB,KAAP;AACD;;AACD,MAAI,CAACZ,gBAAgB,CAACW,QAAQ,CAACC,KAAT,CAAef,IAAhB,CAArB,EAA4C;AAC1C,WAAO;AACLgB,WAAK,EAAE,KADF;AAELD,WAAK,EAAE,yCAAyCD,QAAQ,CAACC,KAAT,CAAef,IAAI;AAF9D,KAAP;AAID;;AACD,MAAIC,mBAAmB,CAACa,QAAQ,CAACC,KAAT,CAAef,IAAhB,CAAvB,EAA8C;AAC5C,UAAMe,KAAK,GAAGP,cAAc,CAACM,QAAQ,CAACC,KAAT,CAAef,IAAhB,CAA5B;;AACA,QACEe,KAAK,CAACE,OAAN,KAAkBnB,kBAAkB,CAACH,cAAD,CAAlB,CAAmCsB,OAArD,IACAH,QAAQ,CAACC,KAAT,CAAeE,OAAf,KAA2BF,KAAK,CAACE,OAFnC,EAGE;AACA,aAAO;AACLD,aAAK,EAAE,KADF;AAELD,aAAK,EAAE,4CAA4CD,QAAQ,CAACC,KAAT,CAAef,IAAI;AAFjE,OAAP;AAID;AACF;;AACD,SAAO;AAAEgB,SAAK,EAAE;AAAT,GAAP;AACD;AAED,OAAM,SAAUE,oBAAV,CAA+BN,CAA/B,EAAyCO,GAAzC,EAAsDd,IAAtD,EAAkE;AACtE,SAAOO,CAAC,CAACK,OAAF,CAAUf,QAAV,CAAmB,uBAAnB,KAA+CU,CAAC,CAACK,OAAF,CAAUf,QAAV,CAAmB,sBAAnB,CAA/C,GACH,IAAIkB,KAAJ,CAAU,eAAef,IAAI,eAAec,GAAG,EAA/C,CADG,GAEHP,CAFJ;AAGD","names":["INTERNAL_ERROR","SERVER_ERROR_CODE_RANGE","RESERVED_ERROR_CODES","STANDARD_ERROR_MAP","isServerErrorCode","code","isReservedErrorCode","includes","isValidErrorCode","getError","type","Object","keys","getErrorByCode","match","values","find","e","validateJsonRpcError","response","error","valid","message","parseConnectionError","url","Error"],"sourceRoot":"","sources":["../../src/error.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}