{"ast":null,"code":"var _jsxFileName = \"/home/mike/Scrivania/provaFrontEnd/af2_front_end_test/src/component/WalletCheck/WalletConnected.js\",\n    _s = $RefreshSig$();\n\nimport { useWeb3React } from '@web3-react/core';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { useState, useEffect, Children } from 'react';\nimport { Navigate } from \"react-router-dom\";\nimport User from '../../SmartContracts/Users/Users';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1, 3, 4, 5, 42, 56, 97, 1337]\n});\nexport default function WalletConnected(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const {\n    active: networkActive,\n    error: networkError,\n    activate: activateNetwork\n  } = useWeb3React();\n  const [loaded, setLoaded] = useState(false);\n  const [network, setNetwork] = useState(false);\n  let account = undefined;\n  useEffect(() => {\n    const accountCheck = async () => {\n      let user = new User();\n      const {\n        ethereum\n      } = window;\n      account = await ethereum.request({\n        method: 'eth_accounts'\n      }).then(res => {\n        if (res.length > 0) {\n          setLoaded(true);\n          setNetwork(true);\n        } else {\n          setLoaded(true);\n        }\n      }).catch(() => {\n        setLoaded(true);\n      });\n    };\n\n    accountCheck();\n  }, [loaded, account]);\n\n  if (loaded && network) {\n    console.log(\"ok\");\n    return children;\n  } else if (loaded && !network) {\n    console.log(\"no ok\");\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 12\n    }, this);\n  } else return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"Loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 16\n  }, this);\n}\n/*\n  useEffect(() => {\n    injected\n      .isAuthorized()\n      .then((isAuthorized) => {\n        setLoaded(true)\n        if (isAuthorized && !networkActive && !networkError) {\n          activateNetwork(injected);\n        }\n      })\n      .catch(() => {\n        setLoaded(true)\n      })\n  }, [activateNetwork, networkActive, networkError])\n  \n\n\n  if(loaded){\n    if(networkActive===true){\n      console.log(loaded,networkActive);\n      return children;\n      }\n    else if(networkActive===false){\n      console.log(loaded,networkActive);\n      return <Navigate to=\"/login\" ></Navigate>\n    }\n  }\n\n    else \n      return <span>Loading</span>*/\n\n_s(WalletConnected, \"3UYmpRWEYuzvD9PsMxmj2UHts2A=\", false, function () {\n  return [useWeb3React];\n});\n\n_c = WalletConnected;\n\nvar _c;\n\n$RefreshReg$(_c, \"WalletConnected\");","map":{"version":3,"sources":["/home/mike/Scrivania/provaFrontEnd/af2_front_end_test/src/component/WalletCheck/WalletConnected.js"],"names":["useWeb3React","InjectedConnector","useState","useEffect","Children","Navigate","User","injected","supportedChainIds","WalletConnected","children","active","networkActive","error","networkError","activate","activateNetwork","loaded","setLoaded","network","setNetwork","account","undefined","accountCheck","user","ethereum","window","request","method","then","res","length","catch","console","log"],"mappings":";;;AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,QAAT,EAAkBC,SAAlB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,OAAOC,IAAP,MAAiB,kCAAjB;;AAGA,OAAO,MAAMC,QAAQ,GAAG,IAAIN,iBAAJ,CAAsB;AAAEO,EAAAA,iBAAiB,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAA0B,IAA1B;AAArB,CAAtB,CAAjB;AAEN,eAAe,SAASC,eAAT,OAAsC;AAAA;;AAAA,MAAb;AAAEC,IAAAA;AAAF,GAAa;AACpD,QAAM;AAAEC,IAAAA,MAAM,EAAEC,aAAV;AAAyBC,IAAAA,KAAK,EAAEC,YAAhC;AAA8CC,IAAAA,QAAQ,EAAEC;AAAxD,MAA4EhB,YAAY,EAA9F;AACA,QAAM,CAACiB,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACiB,OAAD,EAASC,UAAT,IAAqBlB,QAAQ,CAAC,KAAD,CAAnC;AACA,MAAImB,OAAO,GAACC,SAAZ;AAEAnB,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAMoB,YAAY,GAAC,YAAS;AAC1B,UAAIC,IAAI,GAAC,IAAIlB,IAAJ,EAAT;AAEA,YAAM;AAACmB,QAAAA;AAAD,UAAWC,MAAjB;AACAL,MAAAA,OAAO,GAAE,MAAMI,QAAQ,CAACE,OAAT,CAAiB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjB,EACZC,IADY,CACNC,GAAD,IAAO;AACX,YAAGA,GAAG,CAACC,MAAJ,GAAW,CAAd,EAAgB;AAGdb,UAAAA,SAAS,CAAC,IAAD,CAAT;AACAE,UAAAA,UAAU,CAAC,IAAD,CAAV;AACD,SALD,MAOW;AACHF,UAAAA,SAAS,CAAC,IAAD,CAAT;AACD;AACA,OAZI,EAaNc,KAbM,CAaA,MAAI;AAACd,QAAAA,SAAS,CAAC,IAAD,CAAT;AAAgB,OAbrB,CAAf;AAeK,KAnBP;;AAoBAK,IAAAA,YAAY;AACb,GAtBQ,EAsBP,CAACN,MAAD,EAAQI,OAAR,CAtBO,CAAT;;AAwBA,MAAGJ,MAAM,IAAIE,OAAb,EAAqB;AACnBc,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,WAAQxB,QAAR;AAAmB,GAFrB,MAGK,IAAGO,MAAM,IAAI,CAACE,OAAd,EAAsB;AACzBc,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD,wBAAQ,QAAC,QAAD;AAAU,MAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,YAAR;AACA,GAHI,MAIA,oBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAGN;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAvEyBzB,e;UAC2DT,Y;;;KAD3DS,e","sourcesContent":["import { useWeb3React } from '@web3-react/core'\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { useState,useEffect, Children } from 'react';\nimport {Navigate} from \"react-router-dom\";\nimport User from '../../SmartContracts/Users/Users';\n\n\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 3, 4, 5, 42, 56, 97 , 1337] });\n\n export default function WalletConnected({ children }){\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React();\n  const [loaded, setLoaded] = useState(false);\n  const [network,setNetwork]=useState(false);\n  let account=undefined;\n    \n  useEffect(()=>{\n    const accountCheck=async()=>{\n      let user=new User();\n      \n      const {ethereum}=window;\n      account =await ethereum.request({ method: 'eth_accounts' })\n        .then((res)=>{\n          if(res.length>0){\n            \n            \n            setLoaded(true)\n            setNetwork(true)\n          }\n              \n                else {\n                  setLoaded(true);\n                }\n                })\n              .catch(()=>{setLoaded(true)})\n\n          };\n    accountCheck();\n  },[loaded,account])\n\n  if(loaded && network){\n    console.log(\"ok\");\n    return (children);}\n  else if(loaded && !network){\n    console.log(\"no ok\");\n   return  <Navigate to=\"/login\"></Navigate>\n  }\n  else return (<span>Loading</span>)\n  \n\n}\n\n/*\n  useEffect(() => {\n    injected\n      .isAuthorized()\n      .then((isAuthorized) => {\n        setLoaded(true)\n        if (isAuthorized && !networkActive && !networkError) {\n          activateNetwork(injected);\n        }\n      })\n      .catch(() => {\n        setLoaded(true)\n      })\n  }, [activateNetwork, networkActive, networkError])\n  \n\n\n  if(loaded){\n    if(networkActive===true){\n      console.log(loaded,networkActive);\n      return children;\n      }\n    else if(networkActive===false){\n      console.log(loaded,networkActive);\n      return <Navigate to=\"/login\" ></Navigate>\n    }\n  }\n\n    else \n      return <span>Loading</span>*/"]},"metadata":{},"sourceType":"module"}