{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nvar URI_AVAILABLE = 'URI_AVAILABLE';\n\nvar UserRejectedRequestError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(UserRejectedRequestError, _Error);\n\n  function UserRejectedRequestError() {\n    var _this;\n\n    _this = _Error.call(this) || this;\n    _this.name = _this.constructor.name;\n    _this.message = 'The user rejected the request.';\n    return _this;\n  }\n\n  return UserRejectedRequestError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nfunction getSupportedChains(_ref) {\n  var supportedChainIds = _ref.supportedChainIds,\n      rpc = _ref.rpc;\n\n  if (supportedChainIds) {\n    return supportedChainIds;\n  }\n\n  return rpc ? Object.keys(rpc).map(function (k) {\n    return Number(k);\n  }) : undefined;\n}\n\nvar WalletConnectConnector = /*#__PURE__*/function (_AbstractConnector) {\n  _inheritsLoose(WalletConnectConnector, _AbstractConnector);\n\n  function WalletConnectConnector(config) {\n    var _this2;\n\n    _this2 = _AbstractConnector.call(this, {\n      supportedChainIds: getSupportedChains(config)\n    }) || this;\n    _this2.config = config;\n    _this2.handleChainChanged = _this2.handleChainChanged.bind(_assertThisInitialized(_this2));\n    _this2.handleAccountsChanged = _this2.handleAccountsChanged.bind(_assertThisInitialized(_this2));\n    _this2.handleDisconnect = _this2.handleDisconnect.bind(_assertThisInitialized(_this2));\n    return _this2;\n  }\n\n  var _proto = WalletConnectConnector.prototype;\n\n  _proto.handleChainChanged = function handleChainChanged(chainId) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId);\n    }\n\n    this.emitUpdate({\n      chainId: chainId\n    });\n  };\n\n  _proto.handleAccountsChanged = function handleAccountsChanged(accounts) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts);\n    }\n\n    this.emitUpdate({\n      account: accounts[0]\n    });\n  };\n\n  _proto.handleDisconnect = function handleDisconnect() {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Handling 'disconnect' event\");\n    }\n\n    this.emitDeactivate();\n  };\n\n  _proto.activate = function activate() {\n    try {\n      var _this4 = this;\n\n      var _temp3 = function _temp3() {\n        _this4.walletConnectProvider.on('chainChanged', _this4.handleChainChanged);\n\n        _this4.walletConnectProvider.on('accountsChanged', _this4.handleAccountsChanged);\n\n        _this4.walletConnectProvider.on('disconnect', _this4.handleDisconnect);\n\n        return Promise.resolve(_this4.walletConnectProvider.enable().then(function (accounts) {\n          return accounts[0];\n        })[\"catch\"](function (error) {\n          // TODO ideally this would be a better check\n          if (error.message === 'User closed modal') {\n            throw new UserRejectedRequestError();\n          }\n\n          throw error;\n        })).then(function (account) {\n          return {\n            provider: _this4.walletConnectProvider,\n            account: account\n          };\n        });\n      };\n\n      var _temp4 = function () {\n        if (!_this4.walletConnectProvider) {\n          return Promise.resolve(import('@walletconnect/ethereum-provider').then(function (m) {\n            var _m$default;\n\n            return (_m$default = m == null ? void 0 : m[\"default\"]) != null ? _m$default : m;\n          })).then(function (WalletConnectProvider) {\n            _this4.walletConnectProvider = new WalletConnectProvider(_this4.config);\n          });\n        }\n      }();\n\n      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getProvider = function getProvider() {\n    try {\n      var _this6 = this;\n\n      return Promise.resolve(_this6.walletConnectProvider);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getChainId = function getChainId() {\n    try {\n      var _this8 = this;\n\n      return Promise.resolve(_this8.walletConnectProvider.chainId);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getAccount = function getAccount() {\n    try {\n      var _this10 = this;\n\n      return Promise.resolve(_this10.walletConnectProvider.accounts).then(function (accounts) {\n        return accounts[0];\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.deactivate = function deactivate() {\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.removeListener('disconnect', this.handleDisconnect);\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged);\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged);\n      this.walletConnectProvider.disconnect();\n    }\n  };\n\n  _proto.close = function close() {\n    try {\n      var _this12 = this;\n\n      _this12.emitDeactivate();\n\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  return WalletConnectConnector;\n}(AbstractConnector);\n\nexport { URI_AVAILABLE, UserRejectedRequestError, WalletConnectConnector };","map":{"version":3,"mappings":"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","names":["URI_AVAILABLE","UserRejectedRequestError","_inheritsLoose","_this","name","constructor","message","Error","getSupportedChains","supportedChainIds","rpc","Object","keys","map","Number","k","undefined","WalletConnectConnector","config","_this2","handleChainChanged","bind","handleAccountsChanged","handleDisconnect","_proto","chainId","console","log","emitUpdate","accounts","account","emitDeactivate","activate","_this4","walletConnectProvider","on","enable","then","error","provider","m","WalletConnectProvider","getProvider","_this6","getChainId","Promise","resolve","_this8","getAccount","_this10","deactivate","removeListener","disconnect","close","_this12","AbstractConnector"],"sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport { IWCEthRpcConnectionOptions } from '@walletconnect/types'\n\nexport const URI_AVAILABLE = 'URI_AVAILABLE'\n\nexport interface WalletConnectConnectorArguments extends IWCEthRpcConnectionOptions {\n  supportedChainIds?: number[]\n}\n\nexport class UserRejectedRequestError extends Error {\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    this.message = 'The user rejected the request.'\n  }\n}\n\nfunction getSupportedChains({ supportedChainIds, rpc }: WalletConnectConnectorArguments): number[] | undefined {\n  if (supportedChainIds) {\n    return supportedChainIds\n  }\n\n  return rpc ? Object.keys(rpc).map(k => Number(k)) : undefined\n}\n\nexport class WalletConnectConnector extends AbstractConnector {\n  private readonly config: WalletConnectConnectorArguments\n\n  public walletConnectProvider?: any\n\n  constructor(config: WalletConnectConnectorArguments) {\n    super({ supportedChainIds: getSupportedChains(config) })\n\n    this.config = config\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n    this.handleDisconnect = this.handleDisconnect.bind(this)\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n\n  private handleDisconnect(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'disconnect' event\")\n    }\n    this.emitDeactivate()\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.walletConnectProvider) {\n      const WalletConnectProvider = await import('@walletconnect/ethereum-provider').then(m => m?.default ?? m)\n      this.walletConnectProvider = new WalletConnectProvider(this.config)\n    }\n\n    this.walletConnectProvider.on('chainChanged', this.handleChainChanged)\n    this.walletConnectProvider.on('accountsChanged', this.handleAccountsChanged)\n    this.walletConnectProvider.on('disconnect', this.handleDisconnect)\n\n    const account = await this.walletConnectProvider\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n      .catch((error: Error): void => {\n        // TODO ideally this would be a better check\n        if (error.message === 'User closed modal') {\n          throw new UserRejectedRequestError()\n        }\n\n        throw error\n      })\n\n    return { provider: this.walletConnectProvider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.walletConnectProvider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return Promise.resolve(this.walletConnectProvider.chainId)\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return Promise.resolve(this.walletConnectProvider.accounts).then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.removeListener('disconnect', this.handleDisconnect)\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n      this.walletConnectProvider.disconnect()\n    }\n  }\n\n  public async close() {\n    this.emitDeactivate()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}