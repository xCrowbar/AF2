{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function scan(accumulator, seed) {\n  var hasSeed = false;\n\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source) {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nvar ScanOperator = /*@__PURE__*/function () {\n  function ScanOperator(accumulator, seed, hasSeed) {\n    if (hasSeed === void 0) {\n      hasSeed = false;\n    }\n\n    this.accumulator = accumulator;\n    this.seed = seed;\n    this.hasSeed = hasSeed;\n  }\n\n  ScanOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  };\n\n  return ScanOperator;\n}();\n\nvar ScanSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ScanSubscriber, _super);\n\n  function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.accumulator = accumulator;\n    _this._seed = _seed;\n    _this.hasSeed = hasSeed;\n    _this.index = 0;\n    return _this;\n  }\n\n  Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n    get: function () {\n      return this._seed;\n    },\n    set: function (value) {\n      this.hasSeed = true;\n      this._seed = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ScanSubscriber.prototype._next = function (value) {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  };\n\n  ScanSubscriber.prototype._tryNext = function (value) {\n    var index = this.index++;\n    var result;\n\n    try {\n      result = this.accumulator(this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n\n    this.seed = result;\n    this.destination.next(result);\n  };\n\n  return ScanSubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AAEA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AAoDA,SAAMC,UAAN,QAA2B,eAA3B;OACE,SAAWC,IAAX,CAAcC,WAAd,EAAoBC,IAApB,EAAoB;AAMpB,MAAIC,UAAU,KAAd;;MACEC,SAAO,CAAGC,MAAV,IAAe;AAChBF;AAED;;SACE,SAAOG,oBAAP,CAAuBC,MAAvB,EAAoC;AACpC;AACH;AAED;;IACEC,4BAAoB,YAAmF;WAAAA,yCAAwB;AAA3G,oBAAW,KAAX;AAA6DL,aAAI,GAAJ;AAAsB;;AAA4B;AAEnI;AACE,mBAAcA,OAAd;AACD;;AACHK,yBAACC,IAAD,GAAC;AAAA;AAOD,GAPA;;AAOmC;CAZb;;kBAwBpB,GAEE,uBAAMC,MAAN,EAAkB;SAF4B;;WAA6DC,eAAYC;AACrG,4BAAgB,IAAhB,EAAgBA,WAAhB,KAAgB,IAAhB;;AAZZC,wBAAkBZ,WAAlB;;AAcPY;AAZDA;WAAAA;;;QAEC;SAED,YAAS;AACP,aAAK,KAAOC,KAAZ;KAHD;AAKDC,OAAC;;;AALA;AAYSC,oBAZT;AAaCC,gBAAU;AAbX;;gBAeQ,WAAYC,QAAK,UAAOC,KAAP,EAAO;QAC9B;WAAMjB;AACL,uBAAYkB,IAAZ,CAAqBD,KAArB;AACD,WACF;AAEO;AACN;;;gBAEI;QACFE,QAAM,KAAOA,KAAP;QACPC;;AAAC;AACAA,YAAK,oBAAqB,KAAEpB,IAAvB,EAAuBiB,KAAvB,EAAuBE,KAAvB,CAAL;AACD,KAFC,CAGF,OAAKE,GAAL,EAAY;AACR,WAACX,WAAD,CAAiBY,KAAjB,CAAkBD,GAAlB;AACL;;AACH;AArCmC,SAAUX,WAAV,CAqClCQ,IArCkC,CAqClCE,MArCkC;;;;CAc/B","names":["tslib_1","Subscriber","scan","accumulator","seed","hasSeed","arguments","length","scanOperatorFunction","source","ScanOperator","call","_super","ScanSubscriber","destination","_this","_seed","set","enumerable","configurable","_next","value","next","index","result","err","error"],"sources":["../../../src/internal/operators/scan.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}